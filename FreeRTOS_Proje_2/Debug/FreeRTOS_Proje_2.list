
FreeRTOS_Proje_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800a940  0800a940  0001a940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab68  0800ab68  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab70  0800ab70  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab70  0800ab70  0001ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0800ab78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002012c  2**0
                  CONTENTS
 10 .bss          00004248  2000012c  2000012c  0002012c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004374  20004374  0002012c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcac  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003808  00000000  00000000  0003be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0003f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f8  00000000  00000000  00040d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241b2  00000000  00000000  00042340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001affe  00000000  00000000  000664f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d94db  00000000  00000000  000814f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a9cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ca4  00000000  00000000  0015aa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000012c 	.word	0x2000012c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a924 	.word	0x0800a924

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000130 	.word	0x20000130
 80001cc:	0800a924 	.word	0x0800a924

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa4:	23aa      	movs	r3, #170	; 0xaa
 8000fa6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa8:	8afa      	ldrh	r2, [r7, #22]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2316      	movs	r3, #22
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	21ee      	movs	r1, #238	; 0xee
 8000fbc:	4836      	ldr	r0, [pc, #216]	; (8001098 <read_calliberation_data+0x10c>)
 8000fbe:	f002 f8b1 	bl	8003124 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fc2:	783b      	ldrb	r3, [r7, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <read_calliberation_data+0x110>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <read_calliberation_data+0x114>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <read_calliberation_data+0x118>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <read_calliberation_data+0x11c>)
 800100a:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7a7b      	ldrb	r3, [r7, #9]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <read_calliberation_data+0x120>)
 800101e:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001020:	7abb      	ldrb	r3, [r7, #10]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <read_calliberation_data+0x124>)
 8001032:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <read_calliberation_data+0x128>)
 8001044:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <read_calliberation_data+0x12c>)
 8001056:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7c7b      	ldrb	r3, [r7, #17]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <read_calliberation_data+0x130>)
 8001068:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800106a:	7cbb      	ldrb	r3, [r7, #18]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <read_calliberation_data+0x134>)
 800107a:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7d7b      	ldrb	r3, [r7, #21]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <read_calliberation_data+0x138>)
 800108c:	801a      	strh	r2, [r3, #0]

}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000444 	.word	0x20000444
 800109c:	20000148 	.word	0x20000148
 80010a0:	2000014a 	.word	0x2000014a
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	2000014e 	.word	0x2000014e
 80010ac:	20000150 	.word	0x20000150
 80010b0:	20000152 	.word	0x20000152
 80010b4:	20000154 	.word	0x20000154
 80010b8:	20000156 	.word	0x20000156
 80010bc:	20000158 	.word	0x20000158
 80010c0:	2000015a 	.word	0x2000015a
 80010c4:	2000015c 	.word	0x2000015c

080010c8 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010ce:	232e      	movs	r3, #46	; 0x2e
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	22f4      	movs	r2, #244	; 0xf4
 80010e8:	21ee      	movs	r1, #238	; 0xee
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <Get_UTemp+0x60>)
 80010ec:	f001 ff20 	bl	8002f30 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010f0:	2005      	movs	r0, #5
 80010f2:	f001 fa8b 	bl	800260c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	22f6      	movs	r2, #246	; 0xf6
 8001108:	21ee      	movs	r1, #238	; 0xee
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <Get_UTemp+0x60>)
 800110c:	f002 f80a 	bl	8003124 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b29a      	uxth	r2, r3
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000444 	.word	0x20000444

0800112c <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001130:	f7ff ffca 	bl	80010c8 <Get_UTemp>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <BMP180_GetTemp+0x108>)
 800113a:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <BMP180_GetTemp+0x108>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <BMP180_GetTemp+0x10c>)
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	4604      	mov	r4, r0
 800114e:	460d      	mov	r5, r1
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <BMP180_GetTemp+0x110>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f9e5 	bl	8000524 <__aeabi_i2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <BMP180_GetTemp+0x114>)
 8001160:	f7ff fb74 	bl	800084c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff fa44 	bl	80005f8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fcee 	bl	8000b58 <__aeabi_d2iz>
 800117c:	4603      	mov	r3, r0
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <BMP180_GetTemp+0x118>)
 8001180:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <BMP180_GetTemp+0x11c>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9cb 	bl	8000524 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <BMP180_GetTemp+0x120>)
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <BMP180_GetTemp+0x124>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <BMP180_GetTemp+0x118>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9b8 	bl	8000524 <__aeabi_i2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7ff fb46 	bl	800084c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fcc6 	bl	8000b58 <__aeabi_d2iz>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a21      	ldr	r2, [pc, #132]	; (8001254 <BMP180_GetTemp+0x128>)
 80011d0:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <BMP180_GetTemp+0x118>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <BMP180_GetTemp+0x128>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <BMP180_GetTemp+0x12c>)
 80011de:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <BMP180_GetTemp+0x12c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3308      	adds	r3, #8
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f99c 	bl	8000524 <__aeabi_i2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <BMP180_GetTemp+0x130>)
 80011f2:	f7ff fb2b 	bl	800084c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcab 	bl	8000b58 <__aeabi_d2iz>
 8001202:	4603      	mov	r3, r0
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <BMP180_GetTemp+0x134>)
 8001206:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <BMP180_GetTemp+0x134>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f989 	bl	8000524 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <BMP180_GetTemp+0x138>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fce0 	bl	8000be8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	ee07 3a90 	vmov	s15, r3
}
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	20000160 	.word	0x20000160
 8001238:	20000152 	.word	0x20000152
 800123c:	20000150 	.word	0x20000150
 8001240:	40e00000 	.word	0x40e00000
 8001244:	20000168 	.word	0x20000168
 8001248:	2000015a 	.word	0x2000015a
 800124c:	40a00000 	.word	0x40a00000
 8001250:	2000015c 	.word	0x2000015c
 8001254:	2000016c 	.word	0x2000016c
 8001258:	20000178 	.word	0x20000178
 800125c:	40300000 	.word	0x40300000
 8001260:	2000018c 	.word	0x2000018c
 8001264:	40240000 	.word	0x40240000

08001268 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3334      	adds	r3, #52	; 0x34
 800127a:	b2db      	uxtb	r3, r3
 800127c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <Get_UPress+0xb4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	2300      	movs	r3, #0
 8001286:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	f107 030f 	add.w	r3, r7, #15
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	22f4      	movs	r2, #244	; 0xf4
 800129c:	21ee      	movs	r1, #238	; 0xee
 800129e:	4820      	ldr	r0, [pc, #128]	; (8001320 <Get_UPress+0xb8>)
 80012a0:	f001 fe46 	bl	8002f30 <HAL_I2C_Mem_Write>
	switch (oss)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d81a      	bhi.n	80012e0 <Get_UPress+0x78>
 80012aa:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <Get_UPress+0x48>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012c9 	.word	0x080012c9
 80012b8:	080012d1 	.word	0x080012d1
 80012bc:	080012d9 	.word	0x080012d9
	{
		case (0):
			HAL_Delay (5);
 80012c0:	2005      	movs	r0, #5
 80012c2:	f001 f9a3 	bl	800260c <HAL_Delay>
			break;
 80012c6:	e00b      	b.n	80012e0 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 80012c8:	2008      	movs	r0, #8
 80012ca:	f001 f99f 	bl	800260c <HAL_Delay>
			break;
 80012ce:	e007      	b.n	80012e0 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 80012d0:	200e      	movs	r0, #14
 80012d2:	f001 f99b 	bl	800260c <HAL_Delay>
			break;
 80012d6:	e003      	b.n	80012e0 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 80012d8:	201a      	movs	r0, #26
 80012da:	f001 f997 	bl	800260c <HAL_Delay>
			break;
 80012de:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2303      	movs	r3, #3
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f6      	movs	r2, #246	; 0xf6
 80012f4:	21ee      	movs	r1, #238	; 0xee
 80012f6:	480a      	ldr	r0, [pc, #40]	; (8001320 <Get_UPress+0xb8>)
 80012f8:	f001 ff14 	bl	8003124 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4413      	add	r3, r2
 8001306:	7bba      	ldrb	r2, [r7, #14]
 8001308:	441a      	add	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f1c3 0308 	rsb	r3, r3, #8
 8001310:	fa42 f303 	asr.w	r3, r2, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0800a940 	.word	0x0800a940
 8001320:	20000444 	.word	0x20000444

08001324 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff9b 	bl	8001268 <Get_UPress>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4ba8      	ldr	r3, [pc, #672]	; (80015d8 <BMP180_GetPress+0x2b4>)
 8001338:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800133a:	4ba8      	ldr	r3, [pc, #672]	; (80015dc <BMP180_GetPress+0x2b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4aa8      	ldr	r2, [pc, #672]	; (80015e0 <BMP180_GetPress+0x2bc>)
 8001340:	8812      	ldrh	r2, [r2, #0]
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_i2d>
 800134a:	4604      	mov	r4, r0
 800134c:	460d      	mov	r5, r1
 800134e:	4ba5      	ldr	r3, [pc, #660]	; (80015e4 <BMP180_GetPress+0x2c0>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8e6 	bl	8000524 <__aeabi_i2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <BMP180_GetPress+0x2c4>)
 800135e:	f7ff fa75 	bl	800084c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7ff f945 	bl	80005f8 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fbef 	bl	8000b58 <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	4a9b      	ldr	r2, [pc, #620]	; (80015ec <BMP180_GetPress+0x2c8>)
 800137e:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001380:	4b9b      	ldr	r3, [pc, #620]	; (80015f0 <BMP180_GetPress+0x2cc>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8cc 	bl	8000524 <__aeabi_i2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b98      	ldr	r3, [pc, #608]	; (80015f4 <BMP180_GetPress+0x2d0>)
 8001392:	f7ff f931 	bl	80005f8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	4b96      	ldr	r3, [pc, #600]	; (80015f8 <BMP180_GetPress+0x2d4>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b91      	ldr	r3, [pc, #580]	; (80015ec <BMP180_GetPress+0x2c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8b9 	bl	8000524 <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7ff fa47 	bl	800084c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fbc7 	bl	8000b58 <__aeabi_d2iz>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a8b      	ldr	r2, [pc, #556]	; (80015fc <BMP180_GetPress+0x2d8>)
 80013ce:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80013d0:	4b86      	ldr	r3, [pc, #536]	; (80015ec <BMP180_GetPress+0x2c8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b89      	ldr	r3, [pc, #548]	; (80015fc <BMP180_GetPress+0x2d8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a89      	ldr	r2, [pc, #548]	; (8001600 <BMP180_GetPress+0x2dc>)
 80013dc:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80013de:	4b88      	ldr	r3, [pc, #544]	; (8001600 <BMP180_GetPress+0x2dc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013e6:	4a87      	ldr	r2, [pc, #540]	; (8001604 <BMP180_GetPress+0x2e0>)
 80013e8:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013ea:	4b87      	ldr	r3, [pc, #540]	; (8001608 <BMP180_GetPress+0x2e4>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f897 	bl	8000524 <__aeabi_i2d>
 80013f6:	4604      	mov	r4, r0
 80013f8:	460d      	mov	r5, r1
 80013fa:	4b82      	ldr	r3, [pc, #520]	; (8001604 <BMP180_GetPress+0x2e0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <BMP180_GetPress+0x2e0>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f88c 	bl	8000524 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b7e      	ldr	r3, [pc, #504]	; (800160c <BMP180_GetPress+0x2e8>)
 8001412:	f7ff fa1b 	bl	800084c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7ff f8eb 	bl	80005f8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <BMP180_GetPress+0x2d0>)
 8001430:	f7ff fa0c 	bl	800084c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fb8c 	bl	8000b58 <__aeabi_d2iz>
 8001440:	4603      	mov	r3, r0
 8001442:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <BMP180_GetPress+0x2c8>)
 8001444:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <BMP180_GetPress+0x2ec>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	461a      	mov	r2, r3
 800144e:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <BMP180_GetPress+0x2e0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f864 	bl	8000524 <__aeabi_i2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <BMP180_GetPress+0x2d0>)
 8001462:	f7ff f9f3 	bl	800084c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb73 	bl	8000b58 <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	4a61      	ldr	r2, [pc, #388]	; (80015fc <BMP180_GetPress+0x2d8>)
 8001476:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <BMP180_GetPress+0x2c8>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <BMP180_GetPress+0x2d8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4a64      	ldr	r2, [pc, #400]	; (8001614 <BMP180_GetPress+0x2f0>)
 8001484:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <BMP180_GetPress+0x2f4>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	009a      	lsls	r2, r3, #2
 800148e:	4b61      	ldr	r3, [pc, #388]	; (8001614 <BMP180_GetPress+0x2f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	441a      	add	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	3302      	adds	r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	da00      	bge.n	80014a2 <BMP180_GetPress+0x17e>
 80014a0:	3303      	adds	r3, #3
 80014a2:	109b      	asrs	r3, r3, #2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <BMP180_GetPress+0x2f8>)
 80014a8:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <BMP180_GetPress+0x2fc>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <BMP180_GetPress+0x2e0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f832 	bl	8000524 <__aeabi_i2d>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b57      	ldr	r3, [pc, #348]	; (8001624 <BMP180_GetPress+0x300>)
 80014c6:	f7ff f9c1 	bl	800084c <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb41 	bl	8000b58 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a44      	ldr	r2, [pc, #272]	; (80015ec <BMP180_GetPress+0x2c8>)
 80014da:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80014dc:	4b52      	ldr	r3, [pc, #328]	; (8001628 <BMP180_GetPress+0x304>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f81e 	bl	8000524 <__aeabi_i2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
 80014ec:	4b45      	ldr	r3, [pc, #276]	; (8001604 <BMP180_GetPress+0x2e0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a44      	ldr	r2, [pc, #272]	; (8001604 <BMP180_GetPress+0x2e0>)
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f813 	bl	8000524 <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <BMP180_GetPress+0x2e8>)
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7ff f872 	bl	80005f8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <BMP180_GetPress+0x308>)
 8001522:	f7ff f993 	bl	800084c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb13 	bl	8000b58 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4a31      	ldr	r2, [pc, #196]	; (80015fc <BMP180_GetPress+0x2d8>)
 8001536:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <BMP180_GetPress+0x2c8>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <BMP180_GetPress+0x2d8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	3302      	adds	r3, #2
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffed 	bl	8000524 <__aeabi_i2d>
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <BMP180_GetPress+0x30c>)
 8001550:	f7ff f97c 	bl	800084c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fafc 	bl	8000b58 <__aeabi_d2iz>
 8001560:	4603      	mov	r3, r0
 8001562:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <BMP180_GetPress+0x2f0>)
 8001564:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <BMP180_GetPress+0x310>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <BMP180_GetPress+0x2f0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffc3 	bl	8000504 <__aeabi_ui2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <BMP180_GetPress+0x2c4>)
 8001584:	f7ff f962 	bl	800084c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb0a 	bl	8000ba8 <__aeabi_d2uiz>
 8001594:	4603      	mov	r3, r0
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <BMP180_GetPress+0x314>)
 8001598:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <BMP180_GetPress+0x2b4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <BMP180_GetPress+0x2f8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	fa41 f202 	asr.w	r2, r1, r2
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a21      	ldr	r2, [pc, #132]	; (800163c <BMP180_GetPress+0x318>)
 80015b6:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <BMP180_GetPress+0x318>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db41      	blt.n	8001644 <BMP180_GetPress+0x320>
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <BMP180_GetPress+0x318>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	005a      	lsls	r2, r3, #1
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <BMP180_GetPress+0x314>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <BMP180_GetPress+0x31c>)
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e040      	b.n	8001658 <BMP180_GetPress+0x334>
 80015d6:	bf00      	nop
 80015d8:	20000164 	.word	0x20000164
 80015dc:	20000160 	.word	0x20000160
 80015e0:	20000152 	.word	0x20000152
 80015e4:	20000150 	.word	0x20000150
 80015e8:	40e00000 	.word	0x40e00000
 80015ec:	20000168 	.word	0x20000168
 80015f0:	2000015a 	.word	0x2000015a
 80015f4:	40a00000 	.word	0x40a00000
 80015f8:	2000015c 	.word	0x2000015c
 80015fc:	2000016c 	.word	0x2000016c
 8001600:	20000178 	.word	0x20000178
 8001604:	20000180 	.word	0x20000180
 8001608:	20000156 	.word	0x20000156
 800160c:	40b00000 	.word	0x40b00000
 8001610:	2000014a 	.word	0x2000014a
 8001614:	20000170 	.word	0x20000170
 8001618:	20000148 	.word	0x20000148
 800161c:	20000174 	.word	0x20000174
 8001620:	2000014c 	.word	0x2000014c
 8001624:	40c00000 	.word	0x40c00000
 8001628:	20000154 	.word	0x20000154
 800162c:	40f00000 	.word	0x40f00000
 8001630:	40100000 	.word	0x40100000
 8001634:	2000014e 	.word	0x2000014e
 8001638:	2000017c 	.word	0x2000017c
 800163c:	20000184 	.word	0x20000184
 8001640:	20000188 	.word	0x20000188
	else Press = (B7/B4)*2;
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <BMP180_GetPress+0x43c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <BMP180_GetPress+0x440>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	461a      	mov	r2, r3
 8001654:	4b44      	ldr	r3, [pc, #272]	; (8001768 <BMP180_GetPress+0x444>)
 8001656:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <BMP180_GetPress+0x444>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff61 	bl	8000524 <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <BMP180_GetPress+0x448>)
 8001668:	f7ff f8f0 	bl	800084c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <BMP180_GetPress+0x444>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff53 	bl	8000524 <__aeabi_i2d>
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <BMP180_GetPress+0x448>)
 8001684:	f7ff f8e2 	bl	800084c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe ffb2 	bl	80005f8 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa5c 	bl	8000b58 <__aeabi_d2iz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a33      	ldr	r2, [pc, #204]	; (8001770 <BMP180_GetPress+0x44c>)
 80016a4:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <BMP180_GetPress+0x44c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f640 32de 	movw	r2, #3038	; 0xbde
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff36 	bl	8000524 <__aeabi_i2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <BMP180_GetPress+0x450>)
 80016be:	f7ff f8c5 	bl	800084c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa45 	bl	8000b58 <__aeabi_d2iz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <BMP180_GetPress+0x44c>)
 80016d2:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <BMP180_GetPress+0x444>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <BMP180_GetPress+0x454>)
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff20 	bl	8000524 <__aeabi_i2d>
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <BMP180_GetPress+0x450>)
 80016ea:	f7ff f8af 	bl	800084c <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa2f 	bl	8000b58 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <BMP180_GetPress+0x458>)
 80016fe:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <BMP180_GetPress+0x444>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff0d 	bl	8000524 <__aeabi_i2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <BMP180_GetPress+0x44c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <BMP180_GetPress+0x458>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <BMP180_GetPress+0x45c>)
 8001728:	f7ff f890 	bl	800084c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fdaa 	bl	800028c <__adddf3>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa0a 	bl	8000b58 <__aeabi_d2iz>
 8001744:	4603      	mov	r3, r0
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <BMP180_GetPress+0x444>)
 8001748:	6013      	str	r3, [r2, #0]

	return Press;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <BMP180_GetPress+0x444>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bdb0      	pop	{r4, r5, r7, pc}
 8001760:	20000184 	.word	0x20000184
 8001764:	2000017c 	.word	0x2000017c
 8001768:	20000188 	.word	0x20000188
 800176c:	40700000 	.word	0x40700000
 8001770:	20000168 	.word	0x20000168
 8001774:	40f00000 	.word	0x40f00000
 8001778:	ffffe343 	.word	0xffffe343
 800177c:	2000016c 	.word	0x2000016c
 8001780:	40300000 	.word	0x40300000
 8001784:	00000000 	.word	0x00000000

08001788 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fdc7 	bl	8001324 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <BMP180_GetAlt+0x88>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001814 <BMP180_GetAlt+0x8c>
 80017a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017aa:	ee16 0a90 	vmov	r0, s13
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001800 <BMP180_GetAlt+0x78>
 80017ba:	ec43 2b10 	vmov	d0, r2, r3
 80017be:	f008 f997 	bl	8009af0 <pow>
 80017c2:	ec53 2b10 	vmov	r2, r3, d0
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <BMP180_GetAlt+0x90>)
 80017cc:	f7fe fd5c 	bl	8000288 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001808 <BMP180_GetAlt+0x80>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff0b 	bl	80005f8 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9fd 	bl	8000be8 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	ccd745e4 	.word	0xccd745e4
 8001804:	3fc85b95 	.word	0x3fc85b95
 8001808:	00000000 	.word	0x00000000
 800180c:	40e5a540 	.word	0x40e5a540
 8001810:	20000188 	.word	0x20000188
 8001814:	47c5e680 	.word	0x47c5e680
 8001818:	3ff00000 	.word	0x3ff00000

0800181c <BMP180_Start>:

void BMP180_Start (void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001820:	f7ff fbb4 	bl	8000f8c <read_calliberation_data>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <vApplicationGetIdleTaskMemory+0x2c>)
 8001838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <vApplicationGetIdleTaskMemory+0x30>)
 800183e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000190 	.word	0x20000190
 8001858:	20000244 	.word	0x20000244

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b0a0      	sub	sp, #128	; 0x80
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f000 fe91 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 f897 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f000 f9af 	bl	8001bcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800186e:	f000 f983 	bl	8001b78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001872:	f000 f8ef 	bl	8001a54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001876:	f000 f91b 	bl	8001ab0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800187a:	f000 f947 	bl	8001b0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  SensorInit();
 800187e:	f000 fa9d 	bl	8001dbc <SensorInit>

  HAL_UART_Receive_IT(&huart2, rx_Usart, 1);			// UART kesmesi icin baslatma
 8001882:	2201      	movs	r2, #1
 8001884:	4936      	ldr	r1, [pc, #216]	; (8001960 <main+0x104>)
 8001886:	4837      	ldr	r0, [pc, #220]	; (8001964 <main+0x108>)
 8001888:	f003 ff9b 	bl	80057c2 <HAL_UART_Receive_IT>
  PrintMessageToDisplay(firstMessage);					// seri ekrana ilk mesaji yaz
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <main+0x10c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fa75 	bl	8001d80 <PrintMessageToDisplay>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexForUart */
  osMutexDef(MutexForUart);										// mutex olusturma
 8001896:	2300      	movs	r3, #0
 8001898:	67bb      	str	r3, [r7, #120]	; 0x78
 800189a:	2300      	movs	r3, #0
 800189c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MutexForUartHandle = osMutexCreate(osMutex(MutexForUart));
 800189e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 ff91 	bl	80067ca <osMutexCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a30      	ldr	r2, [pc, #192]	; (800196c <main+0x110>)
 80018ac:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of MenuQueue */
  osMessageQDef(MenuQueue, 2, uint16_t);						// seri ekrana veri yazmak icin kullanılan kuyrugu olusturma
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <main+0x114>)
 80018b0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80018b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MenuQueueHandle = osMessageCreate(osMessageQ(MenuQueue), NULL);
 80018ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 ff9a 	bl	80067fa <osMessageCreate>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <main+0x118>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorDataQueue */
  osMessageQDef(SensorDataQueue, 3, sizeof(struct xMessage*));  // sensor verilerini yazmak ve okumak icin kuyruk olusturma
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <main+0x11c>)
 80018ce:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80018d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SensorDataQueueHandle = osMessageCreate(osMessageQ(SensorDataQueue), NULL);
 80018d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 ff8b 	bl	80067fa <osMessageCreate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a25      	ldr	r2, [pc, #148]	; (800197c <main+0x120>)
 80018e8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Menu_Task */
  osThreadDef(Menu_Task, MenuTask, osPriorityNormal, 0, 128);			// TASK'larin olusturulmasi
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <main+0x124>)
 80018ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018f0:	461d      	mov	r5, r3
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Menu_TaskHandle = osThreadCreate(osThread(Menu_Task), NULL);
 80018fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f004 ff14 	bl	8006732 <osThreadCreate>
 800190a:	4603      	mov	r3, r0
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <main+0x128>)
 800190e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <main+0x12c>)
 8001912:	f107 0420 	add.w	r4, r7, #32
 8001916:	461d      	mov	r5, r3
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f004 ff01 	bl	8006732 <osThreadCreate>
 8001930:	4603      	mov	r3, r0
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <main+0x130>)
 8001934:	6013      	str	r3, [r2, #0]

  /* definition and creation of WriteSensorData */
  osThreadDef(WriteSensorData, WriteSensorDataTask, osPriorityAboveNormal, 0, 128);
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <main+0x134>)
 8001938:	1d3c      	adds	r4, r7, #4
 800193a:	461d      	mov	r5, r3
 800193c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001940:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001944:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WriteSensorDataHandle = osThreadCreate(osThread(WriteSensorData), NULL);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fef0 	bl	8006732 <osThreadCreate>
 8001952:	4603      	mov	r3, r0
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <main+0x138>)
 8001956:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();					// Zamanlayiciyi baslatma
 8001958:	f004 fee4 	bl	8006724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195c:	e7fe      	b.n	800195c <main+0x100>
 800195e:	bf00      	nop
 8001960:	200005a0 	.word	0x200005a0
 8001964:	20000544 	.word	0x20000544
 8001968:	200000b4 	.word	0x200000b4
 800196c:	2000059c 	.word	0x2000059c
 8001970:	0800a994 	.word	0x0800a994
 8001974:	20000594 	.word	0x20000594
 8001978:	0800a9a4 	.word	0x0800a9a4
 800197c:	20000598 	.word	0x20000598
 8001980:	0800a9b4 	.word	0x0800a9b4
 8001984:	20000588 	.word	0x20000588
 8001988:	0800a9d0 	.word	0x0800a9d0
 800198c:	2000058c 	.word	0x2000058c
 8001990:	0800a9ec 	.word	0x0800a9ec
 8001994:	20000590 	.word	0x20000590

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	; 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f007 fbd2 	bl	8009150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemClock_Config+0xb4>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <SystemClock_Config+0xb4>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemClock_Config+0xb4>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <SystemClock_Config+0xb8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <SystemClock_Config+0xb8>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <SystemClock_Config+0xb8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f4:	2302      	movs	r3, #2
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019fc:	2310      	movs	r3, #16
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 f90d 	bl	8003c28 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a14:	f000 fb7e 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fb70 	bl	8004118 <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a3e:	f000 fb69 	bl	8002114 <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f001 f909 	bl	8002ca8 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 fb3a 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000444 	.word	0x20000444
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <MX_I2C2_Init+0x54>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <MX_I2C2_Init+0x58>)
 8001abe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_I2C2_Init+0x50>)
 8001aee:	f001 f8db 	bl	8002ca8 <HAL_I2C_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001af8:	f000 fb0c 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000498 	.word	0x20000498
 8001b04:	40005800 	.word	0x40005800
 8001b08:	000186a0 	.word	0x000186a0

08001b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b40:	2228      	movs	r2, #40	; 0x28
 8001b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b5e:	f002 fced 	bl	800453c <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f000 fad4 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200004ec 	.word	0x200004ec
 8001b74:	40013000 	.word	0x40013000

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f003 fd28 	bl	8005604 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 faab 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000544 	.word	0x20000544
 8001bc8:	40004400 	.word	0x40004400

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a30      	ldr	r2, [pc, #192]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_GPIO_Init+0xe0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2108      	movs	r1, #8
 8001c56:	4816      	ldr	r0, [pc, #88]	; (8001cb0 <MX_GPIO_Init+0xe4>)
 8001c58:	f001 f80c 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_GPIO_Init+0xe8>)
 8001c64:	f001 f806 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_GPIO_Init+0xe4>)
 8001c80:	f000 fe5c 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_GPIO_Init+0xe8>)
 8001c9e:	f000 fe4d 	bl	800293c <HAL_GPIO_Init>

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

void vApplicationIdleHook( void )						// IDLE task'i ekledim
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	__WFI();											// uyku moduna alir
 8001cbc:	bf30      	wfi
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <HAL_UART_RxCpltCallback+0x9c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d140      	bne.n	8001d5a <HAL_UART_RxCpltCallback+0x92>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;			// baglam degisikligi icin gerekli TASK durum degiskeni
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

		rx_Data[rx_count++] = rx_Usart[0];			// Seri ekrandan gelen her karakteri rx_data dizisine kaydeder
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_UART_RxCpltCallback+0xa0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	b2d1      	uxtb	r1, r2
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_UART_RxCpltCallback+0xa0>)
 8001ce6:	7011      	strb	r1, [r2, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_UART_RxCpltCallback+0xa4>)
 8001cec:	7819      	ldrb	r1, [r3, #0]
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_UART_RxCpltCallback+0xa8>)
 8001cf0:	5499      	strb	r1, [r3, r2]
		if(rx_Data[rx_count-1] == '\n')				// ENTER'a basildi mi?
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_UART_RxCpltCallback+0xa0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_UART_RxCpltCallback+0xa8>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d114      	bne.n	8001d2a <HAL_UART_RxCpltCallback+0x62>
		{
			rx_count = 0;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_UART_RxCpltCallback+0xa0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(MenuQueueHandle, rx_Data, &xHigherPriorityTaskWoken);				// kuyruk dolunca Task02'nin engelini kaldiracaktir
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_UART_RxCpltCallback+0xac>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4917      	ldr	r1, [pc, #92]	; (8001d70 <HAL_UART_RxCpltCallback+0xa8>)
 8001d12:	f005 f8d3 	bl	8006ebc <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(Menu_TaskHandle, 0, eNoAction, &xHigherPriorityTaskWoken);		// Menu_Task icin bildirim gonderir ve engelini kaldırarak calismasini saglar
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_UART_RxCpltCallback+0xb0>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	f006 fc53 	bl	80085d0 <xTaskGenericNotifyFromISR>
		}

		__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);			// UART bayragini temizle
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_UART_RxCpltCallback+0x9c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0220 	mvn.w	r2, #32
 8001d32:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_Usart, 1);				// Tekrardan kesmeye girebilmek icin aktif ettik
 8001d34:	2201      	movs	r2, #1
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <HAL_UART_RxCpltCallback+0xa4>)
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <HAL_UART_RxCpltCallback+0x9c>)
 8001d3a:	f003 fd42 	bl	80057c2 <HAL_UART_Receive_IT>

		if(xHigherPriorityTaskWoken == pdTRUE)					// Eger bildirim sayesinde daha yuksek oncelikli bir Task varsa baglam degisikligi yap
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10a      	bne.n	8001d5a <HAL_UART_RxCpltCallback+0x92>
		{
				portYIELD_FROM_ISR(xHigherPriorityTaskWoken);	// Baglam degisikligi
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_UART_RxCpltCallback+0x92>
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_UART_RxCpltCallback+0xb4>)
 8001d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	f3bf 8f6f 	isb	sy
		}
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000544 	.word	0x20000544
 8001d68:	200005b6 	.word	0x200005b6
 8001d6c:	200005a0 	.word	0x200005a0
 8001d70:	200005ac 	.word	0x200005ac
 8001d74:	20000594 	.word	0x20000594
 8001d78:	20000588 	.word	0x20000588
 8001d7c:	e000ed04 	.word	0xe000ed04

08001d80 <PrintMessageToDisplay>:

void PrintMessageToDisplay(char *message)						// seri ekrana veri yazmak icin fonksiyon
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != SET);				// UART gonderim bufferi bos mu? kontrol et
 8001d88:	bf00      	nop
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <PrintMessageToDisplay+0x38>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d1f8      	bne.n	8001d8a <PrintMessageToDisplay+0xa>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 500);	// veriyi seri ekrana yaz
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fa19 	bl	80001d0 <strlen>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <PrintMessageToDisplay+0x38>)
 8001daa:	f003 fc78 	bl	800569e <HAL_UART_Transmit>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000544 	.word	0x20000544

08001dbc <SensorInit>:

void SensorInit(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	ReadSpi(LIS_WHO_AM_I, &hspi1);			// LIS sensor baslatma
 8001dc0:	490a      	ldr	r1, [pc, #40]	; (8001dec <SensorInit+0x30>)
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f814 	bl	8001df0 <ReadSpi>
	HAL_Delay(100);							// bekleme suresi
 8001dc8:	2064      	movs	r0, #100	; 0x64
 8001dca:	f000 fc1f 	bl	800260c <HAL_Delay>
	WriteSpi(CTRL_REG4, 0xE7, &hspi1);		// Veri cikis araliği 12Hz, X,Y ve Z ekseni aktif
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <SensorInit+0x30>)
 8001dd0:	21e7      	movs	r1, #231	; 0xe7
 8001dd2:	2020      	movs	r0, #32
 8001dd4:	f000 f83c 	bl	8001e50 <WriteSpi>
	HAL_Delay(40);							// bekleme suresi
 8001dd8:	2028      	movs	r0, #40	; 0x28
 8001dda:	f000 fc17 	bl	800260c <HAL_Delay>
	BMP180_Start();							// BMP sensor baslatma
 8001dde:	f7ff fd1d 	bl	800181c <BMP180_Start>
	HAL_Delay(40);							// bekleme suresi
 8001de2:	2028      	movs	r0, #40	; 0x28
 8001de4:	f000 fc12 	bl	800260c <HAL_Delay>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200004ec 	.word	0x200004ec

08001df0 <ReadSpi>:

int8_t ReadSpi(uint8_t addres, SPI_HandleTypeDef *spiX)				// LIS sensorunden okuma yapmak icin fonksiyon
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]

	int8_t buffer;

	if(HAL_SPI_GetState(spiX) == HAL_SPI_STATE_READY)
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f003 f815 	bl	8004e2c <HAL_SPI_GetState>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11b      	bne.n	8001e40 <ReadSpi+0x50>
	{
		addres = addres | 0x80;							// addresin basina 1 yazarak okuma yapcagimizi soyluyoruz
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);		// sensorun CS pinini resetle (sensorle haberlesmeyi baslat)
 8001e12:	2200      	movs	r2, #0
 8001e14:	2108      	movs	r1, #8
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <ReadSpi+0x5c>)
 8001e18:	f000 ff2c 	bl	8002c74 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(spiX, &addres, 1, 10);
 8001e1c:	1df9      	adds	r1, r7, #7
 8001e1e:	230a      	movs	r3, #10
 8001e20:	2201      	movs	r2, #1
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f002 fc13 	bl	800464e <HAL_SPI_Transmit>

		HAL_SPI_Receive(spiX, &buffer, 1, 10);			// alinan veriyi buffer'a koy
 8001e28:	f107 010f 	add.w	r1, r7, #15
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	2201      	movs	r2, #1
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f002 fd48 	bl	80048c6 <HAL_SPI_Receive>

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);			// sensorun CS pinini setle (sensorle haberlesmeyi durdur)
 8001e36:	2201      	movs	r2, #1
 8001e38:	2108      	movs	r1, #8
 8001e3a:	4804      	ldr	r0, [pc, #16]	; (8001e4c <ReadSpi+0x5c>)
 8001e3c:	f000 ff1a 	bl	8002c74 <HAL_GPIO_WritePin>
	}

	return buffer;
 8001e40:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000

08001e50 <WriteSpi>:

void WriteSpi(uint8_t addres, uint8_t data, SPI_HandleTypeDef *spiX)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	603a      	str	r2, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);		//sensorun CS pinini resetle (sensorle haberlesmeyi baslat)
 8001e60:	2200      	movs	r2, #0
 8001e62:	2108      	movs	r1, #8
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <WriteSpi+0x44>)
 8001e66:	f000 ff05 	bl	8002c74 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spiX, &addres, 1, 100);
 8001e6a:	1df9      	adds	r1, r7, #7
 8001e6c:	2364      	movs	r3, #100	; 0x64
 8001e6e:	2201      	movs	r2, #1
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f002 fbec 	bl	800464e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(spiX, &data, 1, 100);
 8001e76:	1db9      	adds	r1, r7, #6
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f002 fbe6 	bl	800464e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);			// sensorun CS pinini setle (sensorle haberlesmeyi durdur)
 8001e82:	2201      	movs	r2, #1
 8001e84:	2108      	movs	r1, #8
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <WriteSpi+0x44>)
 8001e88:	f000 fef4 	bl	8002c74 <HAL_GPIO_WritePin>

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000

08001e98 <MenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MenuTask */
void MenuTask(void const * argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//char *display = menuDisplay;
  /* Infinite loop */
  for(;;)
  {
    if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY) == pdTRUE)		// UART'dan kesme bekle (ENTER'a basilirsa bu taskin engeli kalkar)
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f006 fb31 	bl	8008510 <xTaskNotifyWait>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d1f5      	bne.n	8001ea0 <MenuTask+0x8>
    {
    	xSemaphoreTake(MutexForUartHandle, portMAX_DELAY);			// Bu task ile StartTask aynı seri ekrana veri yazmak icin ikiside UART2'yi kullanmaktadir
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MenuTask+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f005 f979 	bl	80071b4 <xQueueSemaphoreTake>
    																// fakat ayni anda sadece biri kullanabilmektedir. Aynı anda kullanmlarini engellemek icin
    	PrintMessageToDisplay(menuDisplay);							// Mutex kullaniyoruz boylece iki gorevde ayni anda UART2'yi kullanamayacak.
 8001ec2:	4806      	ldr	r0, [pc, #24]	; (8001edc <MenuTask+0x44>)
 8001ec4:	f7ff ff5c 	bl	8001d80 <PrintMessageToDisplay>
    	xSemaphoreGive(MutexForUartHandle);							// Mutexi ilk alan UART2'yi kullanacak daha sonra mutexi birakacak ve digeri mutexi alarak UART2'yi kullanacak.
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <MenuTask+0x40>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f004 fef5 	bl	8006cc0 <xQueueGenericSend>
    if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY) == pdTRUE)		// UART'dan kesme bekle (ENTER'a basilirsa bu taskin engeli kalkar)
 8001ed6:	e7e3      	b.n	8001ea0 <MenuTask+0x8>
 8001ed8:	2000059c 	.word	0x2000059c
 8001edc:	20000000 	.word	0x20000000

08001ee0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)			// USART'dan (seri ekran) gelen verileri isleyecek TASK
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint8_t rx_que[2];							// USART2'ye gelen verinin bufferlanacagi dizi
	struct xMessage *pxTXMessage;				// sensor verilerini kuyruga yazmak icin olusturulan struct yapisi
  /* Infinite loop */
  for(;;)
  {
	  pxTXMessage = &xMessage_t;
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <StartTask02+0x11c>)
 8001eea:	60bb      	str	r3, [r7, #8]
	  xQueueReceive(MenuQueueHandle, rx_que, portMAX_DELAY);			// Seri ekrana yazilan veriyi al
 8001eec:	4b44      	ldr	r3, [pc, #272]	; (8002000 <StartTask02+0x120>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f107 010c 	add.w	r1, r7, #12
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f005 f87b 	bl	8006ff4 <xQueueReceive>
	  if(rx_que[0] == '1' && rx_que[1] == '\n')							// Veriye gore kontrol yap
 8001efe:	7b3b      	ldrb	r3, [r7, #12]
 8001f00:	2b31      	cmp	r3, #49	; 0x31
 8001f02:	d109      	bne.n	8001f18 <StartTask02+0x38>
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d106      	bne.n	8001f18 <StartTask02+0x38>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_SET);			// Tum kullanici ledlerini yak
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f10:	483c      	ldr	r0, [pc, #240]	; (8002004 <StartTask02+0x124>)
 8001f12:	f000 feaf 	bl	8002c74 <HAL_GPIO_WritePin>
 8001f16:	e070      	b.n	8001ffa <StartTask02+0x11a>
	  else if(rx_que[0] == '2' && rx_que[1] == '\n')
 8001f18:	7b3b      	ldrb	r3, [r7, #12]
 8001f1a:	2b32      	cmp	r3, #50	; 0x32
 8001f1c:	d109      	bne.n	8001f32 <StartTask02+0x52>
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	2b0a      	cmp	r3, #10
 8001f22:	d106      	bne.n	8001f32 <StartTask02+0x52>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, GPIO_PIN_RESET);		// Tum kullanici ledlerini sondur
 8001f24:	2200      	movs	r2, #0
 8001f26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f2a:	4836      	ldr	r0, [pc, #216]	; (8002004 <StartTask02+0x124>)
 8001f2c:	f000 fea2 	bl	8002c74 <HAL_GPIO_WritePin>
 8001f30:	e063      	b.n	8001ffa <StartTask02+0x11a>
	  else if(rx_que[0] == '3' && rx_que[1] == '\n')
 8001f32:	7b3b      	ldrb	r3, [r7, #12]
 8001f34:	2b33      	cmp	r3, #51	; 0x33
 8001f36:	d124      	bne.n	8001f82 <StartTask02+0xa2>
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	2b0a      	cmp	r3, #10
 8001f3c:	d121      	bne.n	8001f82 <StartTask02+0xa2>
	  {
		  typeOfMsg = 1;
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <StartTask02+0x128>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
		  pxTXMessage->sensorData[0] = ReadSpi(x_address, &hspi1);		// LIS sensor verilerini struct'a yaz
 8001f44:	68bc      	ldr	r4, [r7, #8]
 8001f46:	4931      	ldr	r1, [pc, #196]	; (800200c <StartTask02+0x12c>)
 8001f48:	2029      	movs	r0, #41	; 0x29
 8001f4a:	f7ff ff51 	bl	8001df0 <ReadSpi>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	7063      	strb	r3, [r4, #1]
		  pxTXMessage->sensorData[1] = ReadSpi(y_address, &hspi1);
 8001f52:	68bc      	ldr	r4, [r7, #8]
 8001f54:	492d      	ldr	r1, [pc, #180]	; (800200c <StartTask02+0x12c>)
 8001f56:	202b      	movs	r0, #43	; 0x2b
 8001f58:	f7ff ff4a 	bl	8001df0 <ReadSpi>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	70a3      	strb	r3, [r4, #2]
		  pxTXMessage->sensorData[2] = ReadSpi(z_address, &hspi1);
 8001f60:	68bc      	ldr	r4, [r7, #8]
 8001f62:	492a      	ldr	r1, [pc, #168]	; (800200c <StartTask02+0x12c>)
 8001f64:	202d      	movs	r0, #45	; 0x2d
 8001f66:	f7ff ff43 	bl	8001df0 <ReadSpi>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	70e3      	strb	r3, [r4, #3]

		  xQueueSend(SensorDataQueueHandle,&pxTXMessage,portMAX_DELAY);	// Struct'a yazilan verileri kuyruga yaz
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <StartTask02+0x130>)
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	f107 0108 	add.w	r1, r7, #8
 8001f76:	2300      	movs	r3, #0
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	f004 fea0 	bl	8006cc0 <xQueueGenericSend>
 8001f80:	e03b      	b.n	8001ffa <StartTask02+0x11a>
	  }
	  else if(rx_que[0] == '4' && rx_que[1] == '\n')
 8001f82:	7b3b      	ldrb	r3, [r7, #12]
 8001f84:	2b34      	cmp	r3, #52	; 0x34
 8001f86:	d135      	bne.n	8001ff4 <StartTask02+0x114>
 8001f88:	7b7b      	ldrb	r3, [r7, #13]
 8001f8a:	2b0a      	cmp	r3, #10
 8001f8c:	d132      	bne.n	8001ff4 <StartTask02+0x114>
	  {
		  typeOfMsg = 2;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <StartTask02+0x128>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
		  pxTXMessage->sensorData[0] 	= BMP180_GetTemp();				// BMP sensor verilerini struct'a yaz
 8001f94:	f7ff f8ca 	bl	800112c <BMP180_GetTemp>
 8001f98:	eef0 7a40 	vmov.f32	s15, s0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa2:	edc7 7a00 	vstr	s15, [r7]
 8001fa6:	783a      	ldrb	r2, [r7, #0]
 8001fa8:	b252      	sxtb	r2, r2
 8001faa:	705a      	strb	r2, [r3, #1]
		  pxTXMessage->sensorData[1] 	= BMP180_GetPress (0);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff f9b9 	bl	8001324 <BMP180_GetPress>
 8001fb2:	eef0 7a40 	vmov.f32	s15, s0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbc:	edc7 7a00 	vstr	s15, [r7]
 8001fc0:	783a      	ldrb	r2, [r7, #0]
 8001fc2:	b252      	sxtb	r2, r2
 8001fc4:	709a      	strb	r2, [r3, #2]
		  pxTXMessage->sensorData[2] 	= BMP180_GetAlt(0);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fbde 	bl	8001788 <BMP180_GetAlt>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	edc7 7a00 	vstr	s15, [r7]
 8001fda:	783a      	ldrb	r2, [r7, #0]
 8001fdc:	b252      	sxtb	r2, r2
 8001fde:	70da      	strb	r2, [r3, #3]

		  xQueueSend(SensorDataQueueHandle,&pxTXMessage,portMAX_DELAY);	// Struct'a yazilan verileri kuyruga yaz
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <StartTask02+0x130>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	f107 0108 	add.w	r1, r7, #8
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f04f 32ff 	mov.w	r2, #4294967295
 8001fee:	f004 fe67 	bl	8006cc0 <xQueueGenericSend>
 8001ff2:	e002      	b.n	8001ffa <StartTask02+0x11a>
	  }
	  else
	  {
		  PrintMessageToDisplay("\n\nPLEASE TRY AGAIN!!!\n\n");
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <StartTask02+0x134>)
 8001ff6:	f7ff fec3 	bl	8001d80 <PrintMessageToDisplay>
	  pxTXMessage = &xMessage_t;
 8001ffa:	e775      	b.n	8001ee8 <StartTask02+0x8>
 8001ffc:	200005bc 	.word	0x200005bc
 8002000:	20000594 	.word	0x20000594
 8002004:	40020c00 	.word	0x40020c00
 8002008:	200005b8 	.word	0x200005b8
 800200c:	200004ec 	.word	0x200004ec
 8002010:	20000598 	.word	0x20000598
 8002014:	0800aa08 	.word	0x0800aa08

08002018 <WriteSensorDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WriteSensorDataTask */
void WriteSensorDataTask(void const * argument)				// sensor verilerini kuyruktan okuyup seri ekrana yazacak TASK
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b092      	sub	sp, #72	; 0x48
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
	char Data[50];											// kuyruktan struct'a alinan verileri buraya kopyaliyorum
	struct xMessage *pxRXMessage;							// kuyruktan okunacak verileri aynı tip struct'a alinmasi gerekli!
  /* Infinite loop */
  for(;;)
  {
    xQueueReceive(SensorDataQueueHandle, &pxRXMessage, portMAX_DELAY);		// kuyruk doldugunda bu task'in engeli kaldirilacak ve calismaya basliyacak
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <WriteSensorDataTask+0xc0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f107 0108 	add.w	r1, r7, #8
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	4618      	mov	r0, r3
 800202e:	f004 ffe1 	bl	8006ff4 <xQueueReceive>

    if(typeOfMsg == 1)														// LIS sensor icin seri ekran yazisi
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <WriteSensorDataTask+0xc4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d112      	bne.n	8002060 <WriteSensorDataTask+0x48>
    	sprintf(Data, "\r\n\nX axis : %d\nY axis : %d\nZ axis : %d\n\n", pxRXMessage->sensorData[0], pxRXMessage->sensorData[1], pxRXMessage->sensorData[2]);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002048:	4619      	mov	r1, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002050:	f107 000c 	add.w	r0, r7, #12
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	460b      	mov	r3, r1
 8002058:	4921      	ldr	r1, [pc, #132]	; (80020e0 <WriteSensorDataTask+0xc8>)
 800205a:	f007 f98f 	bl	800937c <siprintf>
 800205e:	e015      	b.n	800208c <WriteSensorDataTask+0x74>

    else if(typeOfMsg == 2)													// BMP sensor icin seri ekran yazisi
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <WriteSensorDataTask+0xc4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d111      	bne.n	800208c <WriteSensorDataTask+0x74>
    	sprintf(Data, "\r\n\nTemperature : %d\nPressure : %d\nAltitude : %d\n\n", pxRXMessage->sensorData[0], pxRXMessage->sensorData[1], pxRXMessage->sensorData[2]);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002076:	4619      	mov	r1, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800207e:	f107 000c 	add.w	r0, r7, #12
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	4917      	ldr	r1, [pc, #92]	; (80020e4 <WriteSensorDataTask+0xcc>)
 8002088:	f007 f978 	bl	800937c <siprintf>

    while(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != SET);				// UART gonderim bufferi bos mu? kontrol et
 800208c:	bf00      	nop
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <WriteSensorDataTask+0xd0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d1f8      	bne.n	800208e <WriteSensorDataTask+0x76>

    xSemaphoreTake(MutexForUartHandle, portMAX_DELAY);						// MenuTask'i icinde anlattigim mutex yapisi!
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <WriteSensorDataTask+0xd4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 f885 	bl	80071b4 <xQueueSemaphoreTake>
    HAL_UART_Transmit(&huart2, (uint8_t*)Data, strlen(Data), 500);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f88e 	bl	80001d0 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	f107 010c 	add.w	r1, r7, #12
 80020bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020c0:	4809      	ldr	r0, [pc, #36]	; (80020e8 <WriteSensorDataTask+0xd0>)
 80020c2:	f003 faec 	bl	800569e <HAL_UART_Transmit>
    xSemaphoreGive(MutexForUartHandle);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <WriteSensorDataTask+0xd4>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	f004 fdf6 	bl	8006cc0 <xQueueGenericSend>
    xQueueReceive(SensorDataQueueHandle, &pxRXMessage, portMAX_DELAY);		// kuyruk doldugunda bu task'in engeli kaldirilacak ve calismaya basliyacak
 80020d4:	e7a4      	b.n	8002020 <WriteSensorDataTask+0x8>
 80020d6:	bf00      	nop
 80020d8:	20000598 	.word	0x20000598
 80020dc:	200005b8 	.word	0x200005b8
 80020e0:	0800aa20 	.word	0x0800aa20
 80020e4:	0800aa4c 	.word	0x0800aa4c
 80020e8:	20000544 	.word	0x20000544
 80020ec:	2000059c 	.word	0x2000059c

080020f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002102:	f000 fa63 	bl	80025cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40001000 	.word	0x40001000

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x8>
	...

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_MspInit+0x54>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_MspInit+0x54>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_MspInit+0x54>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_MspInit+0x54>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_MspInit+0x54>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_MspInit+0x54>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	210f      	movs	r1, #15
 8002162:	f06f 0001 	mvn.w	r0, #1
 8002166:	f000 fb2d 	bl	80027c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a32      	ldr	r2, [pc, #200]	; (8002260 <HAL_I2C_MspInit+0xe8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12c      	bne.n	80021f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ba:	2312      	movs	r3, #18
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021c6:	2304      	movs	r3, #4
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	4825      	ldr	r0, [pc, #148]	; (8002268 <HAL_I2C_MspInit+0xf0>)
 80021d2:	f000 fbb3 	bl	800293c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <HAL_I2C_MspInit+0xec>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021f2:	e031      	b.n	8002258 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_I2C_MspInit+0xf4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12c      	bne.n	8002258 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800221a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	480c      	ldr	r0, [pc, #48]	; (8002268 <HAL_I2C_MspInit+0xf0>)
 8002238:	f000 fb80 	bl	800293c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_I2C_MspInit+0xec>)
 8002246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_I2C_MspInit+0xec>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	bf00      	nop
 800225a:	3730      	adds	r7, #48	; 0x30
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40005400 	.word	0x40005400
 8002264:	40023800 	.word	0x40023800
 8002268:	40020400 	.word	0x40020400
 800226c:	40005800 	.word	0x40005800

08002270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_SPI_MspInit+0x84>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12b      	bne.n	80022ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 800229c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_SPI_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ca:	23e0      	movs	r3, #224	; 0xe0
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022da:	2305      	movs	r3, #5
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <HAL_SPI_MspInit+0x8c>)
 80022e6:	f000 fb29 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40013000 	.word	0x40013000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_UART_MspInit+0x94>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d133      	bne.n	800238a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_UART_MspInit+0x98>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_UART_MspInit+0x98>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_UART_MspInit+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_MspInit+0x98>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_UART_MspInit+0x98>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_UART_MspInit+0x98>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800235a:	230c      	movs	r3, #12
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800236a:	2307      	movs	r3, #7
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <HAL_UART_MspInit+0x9c>)
 8002376:	f000 fae1 	bl	800293c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2105      	movs	r1, #5
 800237e:	2026      	movs	r0, #38	; 0x26
 8002380:	f000 fa20 	bl	80027c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002384:	2026      	movs	r0, #38	; 0x26
 8002386:	f000 fa39 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004400 	.word	0x40004400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000

080023a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	2036      	movs	r0, #54	; 0x36
 80023b6:	f000 fa05 	bl	80027c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023ba:	2036      	movs	r0, #54	; 0x36
 80023bc:	f000 fa1e 	bl	80027fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_InitTick+0xa0>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_InitTick+0xa0>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_InitTick+0xa0>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023dc:	f107 0210 	add.w	r2, r7, #16
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 f876 	bl	80044d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023ec:	f002 f84c 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80023f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_InitTick+0xa4>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9b      	lsrs	r3, r3, #18
 80023fc:	3b01      	subs	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_InitTick+0xa8>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_InitTick+0xac>)
 8002404:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_InitTick+0xa8>)
 8002408:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <HAL_InitTick+0xa8>)
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_InitTick+0xa8>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_InitTick+0xa8>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <HAL_InitTick+0xa8>)
 8002422:	f002 fe41 	bl	80050a8 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <HAL_InitTick+0xa8>)
 800242e:	f002 fe95 	bl	800515c <HAL_TIM_Base_Start_IT>
 8002432:	4603      	mov	r3, r0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3730      	adds	r7, #48	; 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	431bde83 	.word	0x431bde83
 8002448:	200005c0 	.word	0x200005c0
 800244c:	40001000 	.word	0x40001000

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <USART2_IRQHandler+0x10>)
 8002482:	f003 f9cf 	bl	8005824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000544 	.word	0x20000544

08002490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM6_DAC_IRQHandler+0x10>)
 8002496:	f002 fed1 	bl	800523c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200005c0 	.word	0x200005c0

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f006 fe02 	bl	80090dc <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20020000 	.word	0x20020000
 8002504:	00000400 	.word	0x00000400
 8002508:	20000608 	.word	0x20000608
 800250c:	20004378 	.word	0x20004378

08002510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480d      	ldr	r0, [pc, #52]	; (8002570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800253a:	490e      	ldr	r1, [pc, #56]	; (8002574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800253c:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002550:	4c0b      	ldr	r4, [pc, #44]	; (8002580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255e:	f7ff ffd7 	bl	8002510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002562:	f006 fdc1 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7ff f979 	bl	800185c <main>
  bx  lr    
 800256a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800256c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002578:	0800ab78 	.word	0x0800ab78
  ldr r2, =_sbss
 800257c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002580:	20004374 	.word	0x20004374

08002584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_Init+0x40>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_Init+0x40>)
 800259e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_Init+0x40>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 f8fc 	bl	80027ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b6:	200f      	movs	r0, #15
 80025b8:	f7ff fef2 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7ff fdb0 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200000c0 	.word	0x200000c0
 80025f0:	2000060c 	.word	0x2000060c

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000060c 	.word	0x2000060c

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200000c0 	.word	0x200000c0

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff4c 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d6:	f7ff ff61 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7ff ffb1 	bl	8002748 <NVIC_EncodePriority>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff80 	bl	80026f4 <__NVIC_SetPriority>
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff54 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002826:	f7ff fee5 	bl	80025f4 <HAL_GetTick>
 800282a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d008      	beq.n	800284a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e052      	b.n	80028f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0216 	bic.w	r2, r2, #22
 8002858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_DMA_Abort+0x62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0208 	bic.w	r2, r2, #8
 8002888:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	e013      	b.n	80028c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289c:	f7ff feaa 	bl	80025f4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d90c      	bls.n	80028c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e015      	b.n	80028f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e4      	bne.n	800289c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	223f      	movs	r2, #63	; 0x3f
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e00c      	b.n	8002930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2205      	movs	r2, #5
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e16b      	b.n	8002c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 815a 	bne.w	8002c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	2b02      	cmp	r3, #2
 800298c:	d130      	bne.n	80029f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 0201 	and.w	r2, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d017      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	69b9      	ldr	r1, [r7, #24]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80b4 	beq.w	8002c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a5f      	ldr	r2, [pc, #380]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_GPIO_Init+0x310>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_GPIO_Init+0x314>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02b      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <HAL_GPIO_Init+0x318>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x222>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <HAL_GPIO_Init+0x31c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x21e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x320>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x216>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x212>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4c      	ldr	r2, [pc, #304]	; (8002c68 <HAL_GPIO_Init+0x32c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_GPIO_Init+0x330>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x20a>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00e      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b46:	2308      	movs	r3, #8
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x310>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba6:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae90 	bls.w	8002958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40021c00 	.word	0x40021c00
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e12b      	b.n	8002f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fa52 	bl	8002178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f001 fbbc 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8002d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a81      	ldr	r2, [pc, #516]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d807      	bhi.n	8002d2c <HAL_I2C_Init+0x84>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a80      	ldr	r2, [pc, #512]	; (8002f20 <HAL_I2C_Init+0x278>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	bf94      	ite	ls
 8002d24:	2301      	movls	r3, #1
 8002d26:	2300      	movhi	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e006      	b.n	8002d3a <HAL_I2C_Init+0x92>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_I2C_Init+0x27c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0e7      	b.n	8002f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a78      	ldr	r2, [pc, #480]	; (8002f28 <HAL_I2C_Init+0x280>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	0c9b      	lsrs	r3, r3, #18
 8002d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d802      	bhi.n	8002d7c <HAL_I2C_Init+0xd4>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	e009      	b.n	8002d90 <HAL_I2C_Init+0xe8>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	4a69      	ldr	r2, [pc, #420]	; (8002f2c <HAL_I2C_Init+0x284>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	3301      	adds	r3, #1
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002da2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	495c      	ldr	r1, [pc, #368]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002dac:	428b      	cmp	r3, r1
 8002dae:	d819      	bhi.n	8002de4 <HAL_I2C_Init+0x13c>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e59      	subs	r1, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dc4:	400b      	ands	r3, r1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_I2C_Init+0x138>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	e051      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e04f      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <HAL_I2C_Init+0x168>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e012      	b.n	8002e36 <HAL_I2C_Init+0x18e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Init+0x196>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e022      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10e      	bne.n	8002e64 <HAL_I2C_Init+0x1bc>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e58      	subs	r0, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	440b      	add	r3, r1
 8002e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e62:	e00f      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	0099      	lsls	r1, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	6809      	ldr	r1, [r1, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6911      	ldr	r1, [r2, #16]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	000186a0 	.word	0x000186a0
 8002f20:	001e847f 	.word	0x001e847f
 8002f24:	003d08ff 	.word	0x003d08ff
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f4a:	f7ff fb53 	bl	80025f4 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	f040 80d9 	bne.w	8003110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2319      	movs	r3, #25
 8002f64:	2201      	movs	r2, #1
 8002f66:	496d      	ldr	r1, [pc, #436]	; (800311c <HAL_I2C_Mem_Write+0x1ec>)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fc7f 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0cc      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_I2C_Mem_Write+0x56>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0c5      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d007      	beq.n	8002fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <HAL_I2C_Mem_Write+0x1f0>)
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fee:	88f8      	ldrh	r0, [r7, #6]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	8979      	ldrh	r1, [r7, #10]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fab6 	bl	8003570 <I2C_RequestMemoryWrite>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d052      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e081      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fd00 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b04      	cmp	r3, #4
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11b      	bne.n	80030b0 <HAL_I2C_Mem_Write+0x180>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1aa      	bne.n	800300e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fcec 	bl	8003a9a <I2C_WaitOnBTFFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e016      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000

08003124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4603      	mov	r3, r0
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	460b      	mov	r3, r1
 8003138:	813b      	strh	r3, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313e:	f7ff fa59 	bl	80025f4 <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	f040 8208 	bne.w	8003562 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2319      	movs	r3, #25
 8003158:	2201      	movs	r2, #1
 800315a:	497b      	ldr	r1, [pc, #492]	; (8003348 <HAL_I2C_Mem_Read+0x224>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fb85 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	e1fb      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_I2C_Mem_Read+0x56>
 8003176:	2302      	movs	r3, #2
 8003178:	e1f4      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d007      	beq.n	80031a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2222      	movs	r2, #34	; 0x22
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a5b      	ldr	r2, [pc, #364]	; (800334c <HAL_I2C_Mem_Read+0x228>)
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e2:	88f8      	ldrh	r0, [r7, #6]
 80031e4:	893a      	ldrh	r2, [r7, #8]
 80031e6:	8979      	ldrh	r1, [r7, #10]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4603      	mov	r3, r0
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fa52 	bl	800369c <I2C_RequestMemoryRead>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1b0      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	623b      	str	r3, [r7, #32]
 800321e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e184      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	2b01      	cmp	r3, #1
 8003238:	d11b      	bne.n	8003272 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e164      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	2b02      	cmp	r3, #2
 8003278:	d11b      	bne.n	80032b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	e144      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032c8:	e138      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	f200 80f1 	bhi.w	80034b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d123      	bne.n	8003324 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fc1b 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e139      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003322:	e10b      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	2b02      	cmp	r3, #2
 800332a:	d14e      	bne.n	80033ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	2200      	movs	r2, #0
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <HAL_I2C_Mem_Read+0x22c>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fa98 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e10e      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
 8003346:	bf00      	nop
 8003348:	00100002 	.word	0x00100002
 800334c:	ffff0000 	.word	0xffff0000
 8003350:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c8:	e0b8      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	2200      	movs	r2, #0
 80033d2:	4966      	ldr	r1, [pc, #408]	; (800356c <HAL_I2C_Mem_Read+0x448>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fa49 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0bf      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2200      	movs	r2, #0
 800342e:	494f      	ldr	r1, [pc, #316]	; (800356c <HAL_I2C_Mem_Read+0x448>)
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fa1b 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e091      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b4:	e042      	b.n	800353c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fb2e 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e04c      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d118      	bne.n	800353c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f aec2 	bne.w	80032ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010004 	.word	0x00010004

08003570 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f960 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d103      	bne.n	80035ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e05f      	b.n	800368e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	492d      	ldr	r1, [pc, #180]	; (8003698 <I2C_RequestMemoryWrite+0x128>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f998 	bl	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04c      	b.n	800368e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa02 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e02b      	b.n	800368e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	e021      	b.n	800368c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003648:	893b      	ldrh	r3, [r7, #8]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	b29b      	uxth	r3, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f9dc 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e005      	b.n	800368e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	00010002 	.word	0x00010002

0800369c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	460b      	mov	r3, r1
 80036b0:	813b      	strh	r3, [r7, #8]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	2200      	movs	r2, #0
 80036de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f8c2 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fc:	d103      	bne.n	8003706 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0aa      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	4952      	ldr	r1, [pc, #328]	; (8003868 <I2C_RequestMemoryRead+0x1cc>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f8fa 	bl	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e097      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	6a39      	ldr	r1, [r7, #32]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f964 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b04      	cmp	r3, #4
 800375c:	d107      	bne.n	800376e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e076      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]
 8003782:	e021      	b.n	80037c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	6a39      	ldr	r1, [r7, #32]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f93e 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d107      	bne.n	80037ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e050      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ca:	6a39      	ldr	r1, [r7, #32]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f923 	bl	8003a18 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d107      	bne.n	80037f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e035      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2200      	movs	r2, #0
 800380c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f82b 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d103      	bne.n	8003834 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e013      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003838:	897b      	ldrh	r3, [r7, #10]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	6a3a      	ldr	r2, [r7, #32]
 800384c:	4906      	ldr	r1, [pc, #24]	; (8003868 <I2C_RequestMemoryRead+0x1cc>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f863 	bl	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010002 	.word	0x00010002

0800386c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387c:	e025      	b.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d021      	beq.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe feb5 	bl	80025f4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e023      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10d      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	e00c      	b.n	800390a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d0b6      	beq.n	800387e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003928:	e051      	b.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d123      	bne.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003952:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e046      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d021      	beq.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fe33 	bl	80025f4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d116      	bne.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e020      	b.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10c      	bne.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e00b      	b.n	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d18d      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a24:	e02d      	b.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8ce 	bl	8003bc8 <I2C_IsAcknowledgeFailed>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e02d      	b.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d021      	beq.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fdd9 	bl	80025f4 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e007      	b.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d1ca      	bne.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa6:	e02d      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f88d 	bl	8003bc8 <I2C_IsAcknowledgeFailed>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e02d      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d021      	beq.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7fe fd98 	bl	80025f4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d1ca      	bne.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b28:	e042      	b.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d119      	bne.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0210 	mvn.w	r2, #16
 8003b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e029      	b.n	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe fd42 	bl	80025f4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d1b5      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d11b      	bne.n	8003c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e267      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d075      	beq.n	8003d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b85      	ldr	r3, [pc, #532]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b82      	ldr	r3, [pc, #520]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05b      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d157      	bne.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e242      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x74>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6c      	ldr	r2, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003cc0:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a68      	ldr	r2, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fc88 	bl	80025f4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fc84 	bl	80025f4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e207      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fc74 	bl	80025f4 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe fc70 	bl	80025f4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1f3      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1c7      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4937      	ldr	r1, [pc, #220]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e03a      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fc29 	bl	80025f4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fe fc25 	bl	80025f4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1a8      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4925      	ldr	r1, [pc, #148]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe fc08 	bl	80025f4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fe fc04 	bl	80025f4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e187      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d036      	beq.n	8003e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe fbe8 	bl	80025f4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe fbe4 	bl	80025f4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e167      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x200>
 8003e46:	e01b      	b.n	8003e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fbd1 	bl	80025f4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00e      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fe fbcd 	bl	80025f4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d907      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e150      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	42470000 	.word	0x42470000
 8003e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ea      	bne.n	8003e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8097 	beq.w	8003fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b74      	ldr	r3, [pc, #464]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a73      	ldr	r2, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fb8d 	bl	80025f4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fe fb89 	bl	80025f4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e10c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ea>
 8003f04:	4b64      	ldr	r3, [pc, #400]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a63      	ldr	r2, [pc, #396]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x30c>
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5e      	ldr	r2, [pc, #376]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f34:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	4b55      	ldr	r3, [pc, #340]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a54      	ldr	r2, [pc, #336]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fe fb4e 	bl	80025f4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fb4a 	bl	80025f4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0cb      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe fb38 	bl	80025f4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fe fb34 	bl	80025f4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0b5      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4a38      	ldr	r2, [pc, #224]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a1 	beq.w	8004108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d05c      	beq.n	800408c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d141      	bne.n	800405e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fb08 	bl	80025f4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fe fb04 	bl	80025f4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e087      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	491b      	ldr	r1, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe fadd 	bl	80025f4 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe fad9 	bl	80025f4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x416>
 800405c:	e054      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fac6 	bl	80025f4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fe fac2 	bl	80025f4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e038      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x4ec>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d121      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cc      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d90c      	bls.n	8004154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d044      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d119      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e06f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e067      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4934      	ldr	r1, [pc, #208]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fe f9f4 	bl	80025f4 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe f9f0 	bl	80025f4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e04f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d20c      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe f86e 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	0800aa88 	.word	0x0800aa88
 80042dc:	200000b8 	.word	0x200000b8
 80042e0:	200000bc 	.word	0x200000bc

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b090      	sub	sp, #64	; 0x40
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
 80042f0:	2300      	movs	r3, #0
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e09b      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800431c:	e09b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004322:	e098      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	627a      	str	r2, [r7, #36]	; 0x24
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800434c:	2100      	movs	r1, #0
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004350:	fb03 f201 	mul.w	r2, r3, r1
 8004354:	2300      	movs	r3, #0
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	4413      	add	r3, r2
 800435c:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 800435e:	fba0 1202 	umull	r1, r2, r0, r2
 8004362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004364:	460a      	mov	r2, r1
 8004366:	62ba      	str	r2, [r7, #40]	; 0x28
 8004368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436a:	4413      	add	r3, r2
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004370:	2200      	movs	r2, #0
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800437e:	f7fc fc83 	bl	8000c88 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4613      	mov	r3, r2
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438a:	e053      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	617a      	str	r2, [r7, #20]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	4652      	mov	r2, sl
 80043a4:	465b      	mov	r3, fp
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	ebb2 080a 	subs.w	r8, r2, sl
 80043be:	eb63 090b 	sbc.w	r9, r3, fp
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043d6:	ebb2 0408 	subs.w	r4, r2, r8
 80043da:	eb63 0509 	sbc.w	r5, r3, r9
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	00eb      	lsls	r3, r5, #3
 80043e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ec:	00e2      	lsls	r2, r4, #3
 80043ee:	4614      	mov	r4, r2
 80043f0:	461d      	mov	r5, r3
 80043f2:	eb14 030a 	adds.w	r3, r4, sl
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	eb45 030b 	adc.w	r3, r5, fp
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440a:	4629      	mov	r1, r5
 800440c:	028b      	lsls	r3, r1, #10
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004414:	4621      	mov	r1, r4
 8004416:	028a      	lsls	r2, r1, #10
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	2200      	movs	r2, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	60fa      	str	r2, [r7, #12]
 8004424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004428:	f7fc fc2e 	bl	8000c88 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004458:	4618      	mov	r0, r3
 800445a:	3740      	adds	r7, #64	; 0x40
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	017d7840 	.word	0x017d7840

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	200000b8 	.word	0x200000b8

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800aa98 	.word	0x0800aa98

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffdc 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0800aa98 	.word	0x0800aa98

080044d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	220f      	movs	r2, #15
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0203 	and.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <HAL_RCC_GetClockConfig+0x60>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40023c00 	.word	0x40023c00

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07b      	b.n	8004646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fe6e 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0104 	and.w	r1, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	f003 0210 	and.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_SPI_Transmit+0x22>
 800466c:	2302      	movs	r3, #2
 800466e:	e126      	b.n	80048be <HAL_SPI_Transmit+0x270>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004678:	f7fd ffbc 	bl	80025f4 <HAL_GetTick>
 800467c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d002      	beq.n	8004694 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800468e:	2302      	movs	r3, #2
 8004690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004692:	e10b      	b.n	80048ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Transmit+0x52>
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046a4:	e102      	b.n	80048ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ec:	d10f      	bne.n	800470e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d007      	beq.n	800472c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004734:	d14b      	bne.n	80047ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_SPI_Transmit+0xf6>
 800473e:	8afb      	ldrh	r3, [r7, #22]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d13e      	bne.n	80047c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	881a      	ldrh	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	1c9a      	adds	r2, r3, #2
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004768:	e02b      	b.n	80047c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d112      	bne.n	800479e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	; 0x36
 800479c:	e011      	b.n	80047c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800479e:	f7fd ff29 	bl	80025f4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d803      	bhi.n	80047b6 <HAL_SPI_Transmit+0x168>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Transmit+0x16e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047c0:	e074      	b.n	80048ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ce      	bne.n	800476a <HAL_SPI_Transmit+0x11c>
 80047cc:	e04c      	b.n	8004868 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_SPI_Transmit+0x18e>
 80047d6:	8afb      	ldrh	r3, [r7, #22]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d140      	bne.n	800485e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004802:	e02c      	b.n	800485e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d113      	bne.n	800483a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	; 0x36
 8004838:	e011      	b.n	800485e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483a:	f7fd fedb 	bl	80025f4 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d803      	bhi.n	8004852 <HAL_SPI_Transmit+0x204>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Transmit+0x20a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800485c:	e026      	b.n	80048ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1cd      	bne.n	8004804 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fbd9 	bl	8005024 <SPI_EndRxTxTransaction>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e000      	b.n	80048ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80048aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b088      	sub	sp, #32
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d112      	bne.n	800490a <HAL_SPI_Receive+0x44>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10e      	bne.n	800490a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2204      	movs	r2, #4
 80048f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f8f1 	bl	8004ae8 <HAL_SPI_TransmitReceive>
 8004906:	4603      	mov	r3, r0
 8004908:	e0ea      	b.n	8004ae0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_SPI_Receive+0x52>
 8004914:	2302      	movs	r3, #2
 8004916:	e0e3      	b.n	8004ae0 <HAL_SPI_Receive+0x21a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004920:	f7fd fe68 	bl	80025f4 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d002      	beq.n	8004938 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004932:	2302      	movs	r3, #2
 8004934:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004936:	e0ca      	b.n	8004ace <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_SPI_Receive+0x7e>
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004948:	e0c1      	b.n	8004ace <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2204      	movs	r2, #4
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d10f      	bne.n	80049b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d007      	beq.n	80049d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d162      	bne.n	8004a9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049d8:	e02e      	b.n	8004a38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d115      	bne.n	8004a14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f103 020c 	add.w	r2, r3, #12
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a12:	e011      	b.n	8004a38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a14:	f7fd fdee 	bl	80025f4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d803      	bhi.n	8004a2c <HAL_SPI_Receive+0x166>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d102      	bne.n	8004a32 <HAL_SPI_Receive+0x16c>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a36:	e04a      	b.n	8004ace <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1cb      	bne.n	80049da <HAL_SPI_Receive+0x114>
 8004a42:	e031      	b.n	8004aa8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d113      	bne.n	8004a7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a78:	e011      	b.n	8004a9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7a:	f7fd fdbb 	bl	80025f4 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_Receive+0x1cc>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_Receive+0x1d2>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a9c:	e017      	b.n	8004ace <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1cd      	bne.n	8004a44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fa53 	bl	8004f58 <SPI_EndRxTransaction>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
 8004aca:	e000      	b.n	8004ace <HAL_SPI_Receive+0x208>
  }

error :
 8004acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08c      	sub	sp, #48	; 0x30
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004af6:	2301      	movs	r3, #1
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x26>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e18a      	b.n	8004e24 <HAL_SPI_TransmitReceive+0x33c>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b16:	f7fd fd6d 	bl	80025f4 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00f      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x70>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3e:	d107      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x68>
 8004b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d003      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b56:	e15b      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x82>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x82>
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b70:	e14e      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d003      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2205      	movs	r2, #5
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	887a      	ldrh	r2, [r7, #2]
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	887a      	ldrh	r2, [r7, #2]
 8004b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	887a      	ldrh	r2, [r7, #2]
 8004bae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d007      	beq.n	8004bda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be2:	d178      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x10a>
 8004bec:	8b7b      	ldrh	r3, [r7, #26]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d166      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	1c9a      	adds	r2, r3, #2
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c16:	e053      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11b      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x176>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d016      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x176>
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d113      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	881a      	ldrh	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d119      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x1b8>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d014      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	b292      	uxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ca0:	f7fd fca8 	bl	80025f4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d807      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x1d8>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d003      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cbe:	e0a7      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1a6      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x130>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1a1      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x130>
 8004cd4:	e07c      	b.n	8004dd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x1fc>
 8004cde:	8b7b      	ldrh	r3, [r7, #26]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d16b      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d0a:	e057      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d11c      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x26c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x26c>
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d114      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d119      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x2ae>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d014      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d92:	2301      	movs	r3, #1
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d96:	f7fd fc2d 	bl	80025f4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d803      	bhi.n	8004dae <HAL_SPI_TransmitReceive+0x2c6>
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x2cc>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d103      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dba:	e029      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1a2      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x224>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d19d      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f925 	bl	8005024 <SPI_EndRxTxTransaction>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dec:	e010      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	e000      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3730      	adds	r7, #48	; 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3a:	b2db      	uxtb	r3, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e58:	f7fd fbcc 	bl	80025f4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e68:	f7fd fbc4 	bl	80025f4 <HAL_GetTick>
 8004e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e6e:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	015b      	lsls	r3, r3, #5
 8004e74:	0d1b      	lsrs	r3, r3, #20
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7e:	e054      	b.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d050      	beq.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e88:	f7fd fbb4 	bl	80025f4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d902      	bls.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d13d      	bne.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d111      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	d004      	beq.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d107      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee4:	d10f      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e017      	b.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d19b      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200000b8 	.word	0x200000b8

08004f58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6c:	d111      	bne.n	8004f92 <SPI_EndRxTransaction+0x3a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d004      	beq.n	8004f82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d107      	bne.n	8004f92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9a:	d12a      	bne.n	8004ff2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	d012      	beq.n	8004fcc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff49 	bl	8004e48 <SPI_WaitFlagStateUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02d      	beq.n	8005018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e026      	b.n	800501a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff ff36 	bl	8004e48 <SPI_WaitFlagStateUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01a      	beq.n	8005018 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e013      	b.n	800501a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff23 	bl	8004e48 <SPI_WaitFlagStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e000      	b.n	800501a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <SPI_EndRxTxTransaction+0x7c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <SPI_EndRxTxTransaction+0x80>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0d5b      	lsrs	r3, r3, #21
 800503c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d112      	bne.n	8005076 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fef4 	bl	8004e48 <SPI_WaitFlagStateUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3b01      	subs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d0f2      	beq.n	8005076 <SPI_EndRxTxTransaction+0x52>
 8005090:	e000      	b.n	8005094 <SPI_EndRxTxTransaction+0x70>
        break;
 8005092:	bf00      	nop
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200000b8 	.word	0x200000b8
 80050a4:	165e9f81 	.word	0x165e9f81

080050a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e041      	b.n	800513e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f839 	bl	8005146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f000 f9d8 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e04e      	b.n	8005212 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <HAL_TIM_Base_Start_IT+0xc4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d022      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d01d      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <HAL_TIM_Base_Start_IT+0xc8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <HAL_TIM_Base_Start_IT+0xcc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_TIM_Base_Start_IT+0xd0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_TIM_Base_Start_IT+0xd4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x80>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d111      	bne.n	8005200 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d010      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fe:	e007      	b.n	8005210 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40010400 	.word	0x40010400
 8005234:	40014000 	.word	0x40014000
 8005238:	40001800 	.word	0x40001800

0800523c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0202 	mvn.w	r2, #2
 8005268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8ee 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8e0 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8f1 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0204 	mvn.w	r2, #4
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8c4 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8b6 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f8c7 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0208 	mvn.w	r2, #8
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2204      	movs	r2, #4
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f89a 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f88c 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f89d 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b10      	cmp	r3, #16
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b10      	cmp	r3, #16
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0210 	mvn.w	r2, #16
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2208      	movs	r2, #8
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f870 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f862 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f873 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0201 	mvn.w	r2, #1
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc fe98 	bl	80020f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f902 	bl	80055f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f838 	bl	8005488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	d10e      	bne.n	8005444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b20      	cmp	r3, #32
 8005432:	d107      	bne.n	8005444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0220 	mvn.w	r2, #32
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8cc 	bl	80055dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d027      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d023      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d017      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <TIM_Base_SetConfig+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <TIM_Base_SetConfig+0x138>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <TIM_Base_SetConfig+0x13c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a0a      	ldr	r2, [pc, #40]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40001800 	.word	0x40001800
 80055d4:	40001c00 	.word	0x40001c00
 80055d8:	40002000 	.word	0x40002000

080055dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03f      	b.n	8005696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fe68 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fddf 	bl	800620c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b08a      	sub	sp, #40	; 0x28
 80056a2:	af02      	add	r7, sp, #8
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d17c      	bne.n	80057b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Transmit+0x2c>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e075      	b.n	80057ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Transmit+0x3e>
 80056d8:	2302      	movs	r3, #2
 80056da:	e06e      	b.n	80057ba <HAL_UART_Transmit+0x11c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2221      	movs	r2, #33	; 0x21
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f2:	f7fc ff7f 	bl	80025f4 <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d108      	bne.n	8005720 <HAL_UART_Transmit+0x82>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e003      	b.n	8005728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005730:	e02a      	b.n	8005788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fb1f 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	3302      	adds	r3, #2
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e007      	b.n	800577a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1cf      	bne.n	8005732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 faef 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d11d      	bne.n	8005818 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_UART_Receive_IT+0x26>
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e016      	b.n	800581a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Receive_IT+0x38>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e00f      	b.n	800581a <HAL_UART_Receive_IT+0x58>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fb24 	bl	8005e5c <UART_Start_Receive_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	e000      	b.n	800581a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0ba      	sub	sp, #232	; 0xe8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fc07 	bl	8006096 <UART_Receive_IT>
      return;
 8005888:	e256      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800588a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80de 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
 8005894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d1 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0202 	orr.w	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
 8005902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 81ed 	beq.w	8005d2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb92 	bl	8006096 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_UART_IRQHandler+0x17a>
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04f      	beq.n	8005a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa9a 	bl	8005ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d141      	bne.n	8005a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d9      	bne.n	80059b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	4a7d      	ldr	r2, [pc, #500]	; (8005c00 <HAL_UART_IRQHandler+0x3dc>)
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc ff70 	bl	80028f8 <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00e      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f990 	bl	8005d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00a      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f98c 	bl	8005d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e006      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f988 	bl	8005d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a4a:	e170      	b.n	8005d2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	bf00      	nop
    return;
 8005a4e:	e16e      	b.n	8005d2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f040 814a 	bne.w	8005cee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8143 	beq.w	8005cee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 813c 	beq.w	8005cee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	f040 80b4 	bne.w	8005c04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8140 	beq.w	8005d32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aba:	429a      	cmp	r2, r3
 8005abc:	f080 8139 	bcs.w	8005d32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad2:	f000 8088 	beq.w	8005be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1d9      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e1      	bne.n	8005b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e3      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fc fe19 	bl	8002818 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8b6 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bfc:	e099      	b.n	8005d32 <HAL_UART_IRQHandler+0x50e>
 8005bfe:	bf00      	nop
 8005c00:	08005f9f 	.word	0x08005f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 808b 	beq.w	8005d36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8086 	beq.w	8005d36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e3      	bne.n	8005c2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	623b      	str	r3, [r7, #32]
   return(result);
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ccc:	61fa      	str	r2, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e3      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f83e 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cec:	e023      	b.n	8005d36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_UART_IRQHandler+0x4ea>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f95d 	bl	8005fc6 <UART_Transmit_IT>
    return;
 8005d0c:	e014      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <HAL_UART_IRQHandler+0x514>
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f99d 	bl	8006066 <UART_EndTransmit_IT>
    return;
 8005d2c:	e004      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
    return;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
      return;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
      return;
 8005d36:	bf00      	nop
  }
}
 8005d38:	37e8      	adds	r7, #232	; 0xe8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop

08005d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b090      	sub	sp, #64	; 0x40
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	e050      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d04c      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da0:	f7fc fc28 	bl	80025f4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d241      	bcs.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd0:	637a      	str	r2, [r7, #52]	; 0x34
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3314      	adds	r3, #20
 8005dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	613b      	str	r3, [r7, #16]
   return(result);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e04:	623a      	str	r2, [r7, #32]
 8005e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00f      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d09f      	beq.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3740      	adds	r7, #64	; 0x40
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2222      	movs	r2, #34	; 0x22
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0220 	orr.w	r2, r2, #32
 8005ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b095      	sub	sp, #84	; 0x54
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f00:	643a      	str	r2, [r7, #64]	; 0x40
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d119      	bne.n	8005f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f70:	61ba      	str	r2, [r7, #24]
 8005f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6979      	ldr	r1, [r7, #20]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f92:	bf00      	nop
 8005f94:	3754      	adds	r7, #84	; 0x54
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fecb 	bl	8005d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b21      	cmp	r3, #33	; 0x21
 8005fd8:	d13e      	bne.n	8006058 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe2:	d114      	bne.n	800600e <UART_Transmit_IT+0x48>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d110      	bne.n	800600e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006000:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]
 800600c:	e008      	b.n	8006020 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6211      	str	r1, [r2, #32]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10f      	bne.n	8006054 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006042:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe5a 	bl	8005d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b08c      	sub	sp, #48	; 0x30
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b22      	cmp	r3, #34	; 0x22
 80060a8:	f040 80ab 	bne.w	8006202 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d117      	bne.n	80060e6 <UART_Receive_IT+0x50>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	1c9a      	adds	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
 80060e4:	e026      	b.n	8006134 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f8:	d007      	beq.n	800610a <UART_Receive_IT+0x74>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <UART_Receive_IT+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e008      	b.n	800612a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29b      	uxth	r3, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4619      	mov	r1, r3
 8006142:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006144:	2b00      	cmp	r3, #0
 8006146:	d15a      	bne.n	80061fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0220 	bic.w	r2, r2, #32
 8006156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d135      	bne.n	80061f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	613b      	str	r3, [r7, #16]
   return(result);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	623a      	str	r2, [r7, #32]
 80061b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	69f9      	ldr	r1, [r7, #28]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d10a      	bne.n	80061e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fdbb 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
 80061f2:	e002      	b.n	80061fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fb fd67 	bl	8001cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e002      	b.n	8006204 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e000      	b.n	8006204 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
  }
}
 8006204:	4618      	mov	r0, r3
 8006206:	3730      	adds	r7, #48	; 0x30
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800620c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006210:	b0c0      	sub	sp, #256	; 0x100
 8006212:	af00      	add	r7, sp, #0
 8006214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	68d9      	ldr	r1, [r3, #12]
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	ea40 0301 	orr.w	r3, r0, r1
 8006234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	431a      	orrs	r2, r3
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006264:	f021 010c 	bic.w	r1, r1, #12
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006272:	430b      	orrs	r3, r1
 8006274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	6999      	ldr	r1, [r3, #24]
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	ea40 0301 	orr.w	r3, r0, r1
 8006292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b8f      	ldr	r3, [pc, #572]	; (80064d8 <UART_SetConfig+0x2cc>)
 800629c:	429a      	cmp	r2, r3
 800629e:	d005      	beq.n	80062ac <UART_SetConfig+0xa0>
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b8d      	ldr	r3, [pc, #564]	; (80064dc <UART_SetConfig+0x2d0>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d104      	bne.n	80062b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062ac:	f7fe f900 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 80062b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b4:	e003      	b.n	80062be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fe f8e7 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80062ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	f040 810c 	bne.w	80064e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	1891      	adds	r1, r2, r2
 80062e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e6:	415b      	adcs	r3, r3
 80062e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ee:	4621      	mov	r1, r4
 80062f0:	eb12 0801 	adds.w	r8, r2, r1
 80062f4:	4629      	mov	r1, r5
 80062f6:	eb43 0901 	adc.w	r9, r3, r1
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800630a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630e:	4690      	mov	r8, r2
 8006310:	4699      	mov	r9, r3
 8006312:	4623      	mov	r3, r4
 8006314:	eb18 0303 	adds.w	r3, r8, r3
 8006318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800631c:	462b      	mov	r3, r5
 800631e:	eb49 0303 	adc.w	r3, r9, r3
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800633a:	460b      	mov	r3, r1
 800633c:	18db      	adds	r3, r3, r3
 800633e:	653b      	str	r3, [r7, #80]	; 0x50
 8006340:	4613      	mov	r3, r2
 8006342:	eb42 0303 	adc.w	r3, r2, r3
 8006346:	657b      	str	r3, [r7, #84]	; 0x54
 8006348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800634c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006350:	f7fa fc9a 	bl	8000c88 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4b61      	ldr	r3, [pc, #388]	; (80064e0 <UART_SetConfig+0x2d4>)
 800635a:	fba3 2302 	umull	r2, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	011c      	lsls	r4, r3, #4
 8006362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800636c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	1891      	adds	r1, r2, r2
 800637a:	64b9      	str	r1, [r7, #72]	; 0x48
 800637c:	415b      	adcs	r3, r3
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006384:	4641      	mov	r1, r8
 8006386:	eb12 0a01 	adds.w	sl, r2, r1
 800638a:	4649      	mov	r1, r9
 800638c:	eb43 0b01 	adc.w	fp, r3, r1
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800639c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a4:	4692      	mov	sl, r2
 80063a6:	469b      	mov	fp, r3
 80063a8:	4643      	mov	r3, r8
 80063aa:	eb1a 0303 	adds.w	r3, sl, r3
 80063ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063b2:	464b      	mov	r3, r9
 80063b4:	eb4b 0303 	adc.w	r3, fp, r3
 80063b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063d0:	460b      	mov	r3, r1
 80063d2:	18db      	adds	r3, r3, r3
 80063d4:	643b      	str	r3, [r7, #64]	; 0x40
 80063d6:	4613      	mov	r3, r2
 80063d8:	eb42 0303 	adc.w	r3, r2, r3
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
 80063de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e6:	f7fa fc4f 	bl	8000c88 <__aeabi_uldivmod>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <UART_SetConfig+0x2d4>)
 80063f2:	fba3 2301 	umull	r2, r3, r3, r1
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2264      	movs	r2, #100	; 0x64
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	1acb      	subs	r3, r1, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006406:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <UART_SetConfig+0x2d4>)
 8006408:	fba3 2302 	umull	r2, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006414:	441c      	add	r4, r3
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006430:	415b      	adcs	r3, r3
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6339      	str	r1, [r7, #48]	; 0x30
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800648c:	460b      	mov	r3, r1
 800648e:	18db      	adds	r3, r3, r3
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	4613      	mov	r3, r2
 8006494:	eb42 0303 	adc.w	r3, r2, r3
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064a2:	f7fa fbf1 	bl	8000c88 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <UART_SetConfig+0x2d4>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <UART_SetConfig+0x2d4>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 0207 	and.w	r2, r3, #7
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4422      	add	r2, r4
 80064d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d4:	e105      	b.n	80066e2 <UART_SetConfig+0x4d6>
 80064d6:	bf00      	nop
 80064d8:	40011000 	.word	0x40011000
 80064dc:	40011400 	.word	0x40011400
 80064e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	1891      	adds	r1, r2, r2
 80064fc:	6239      	str	r1, [r7, #32]
 80064fe:	415b      	adcs	r3, r3
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006506:	4641      	mov	r1, r8
 8006508:	1854      	adds	r4, r2, r1
 800650a:	4649      	mov	r1, r9
 800650c:	eb43 0501 	adc.w	r5, r3, r1
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	00eb      	lsls	r3, r5, #3
 800651a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651e:	00e2      	lsls	r2, r4, #3
 8006520:	4614      	mov	r4, r2
 8006522:	461d      	mov	r5, r3
 8006524:	4643      	mov	r3, r8
 8006526:	18e3      	adds	r3, r4, r3
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800652c:	464b      	mov	r3, r9
 800652e:	eb45 0303 	adc.w	r3, r5, r3
 8006532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006552:	4629      	mov	r1, r5
 8006554:	008b      	lsls	r3, r1, #2
 8006556:	4621      	mov	r1, r4
 8006558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655c:	4621      	mov	r1, r4
 800655e:	008a      	lsls	r2, r1, #2
 8006560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006564:	f7fa fb90 	bl	8000c88 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4b60      	ldr	r3, [pc, #384]	; (80066f0 <UART_SetConfig+0x4e4>)
 800656e:	fba3 2302 	umull	r2, r3, r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	011c      	lsls	r4, r3, #4
 8006576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	1891      	adds	r1, r2, r2
 800658e:	61b9      	str	r1, [r7, #24]
 8006590:	415b      	adcs	r3, r3
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006598:	4641      	mov	r1, r8
 800659a:	1851      	adds	r1, r2, r1
 800659c:	6139      	str	r1, [r7, #16]
 800659e:	4649      	mov	r1, r9
 80065a0:	414b      	adcs	r3, r1
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b0:	4659      	mov	r1, fp
 80065b2:	00cb      	lsls	r3, r1, #3
 80065b4:	4651      	mov	r1, sl
 80065b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ba:	4651      	mov	r1, sl
 80065bc:	00ca      	lsls	r2, r1, #3
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	4642      	mov	r2, r8
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065cc:	464b      	mov	r3, r9
 80065ce:	460a      	mov	r2, r1
 80065d0:	eb42 0303 	adc.w	r3, r2, r3
 80065d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065f0:	4649      	mov	r1, r9
 80065f2:	008b      	lsls	r3, r1, #2
 80065f4:	4641      	mov	r1, r8
 80065f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fa:	4641      	mov	r1, r8
 80065fc:	008a      	lsls	r2, r1, #2
 80065fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006602:	f7fa fb41 	bl	8000c88 <__aeabi_uldivmod>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <UART_SetConfig+0x4e4>)
 800660c:	fba3 1302 	umull	r1, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	2164      	movs	r1, #100	; 0x64
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	3332      	adds	r3, #50	; 0x32
 800661e:	4a34      	ldr	r2, [pc, #208]	; (80066f0 <UART_SetConfig+0x4e4>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800662a:	441c      	add	r4, r3
 800662c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006630:	2200      	movs	r2, #0
 8006632:	673b      	str	r3, [r7, #112]	; 0x70
 8006634:	677a      	str	r2, [r7, #116]	; 0x74
 8006636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800663a:	4642      	mov	r2, r8
 800663c:	464b      	mov	r3, r9
 800663e:	1891      	adds	r1, r2, r2
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	415b      	adcs	r3, r3
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664a:	4641      	mov	r1, r8
 800664c:	1851      	adds	r1, r2, r1
 800664e:	6039      	str	r1, [r7, #0]
 8006650:	4649      	mov	r1, r9
 8006652:	414b      	adcs	r3, r1
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006662:	4659      	mov	r1, fp
 8006664:	00cb      	lsls	r3, r1, #3
 8006666:	4651      	mov	r1, sl
 8006668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666c:	4651      	mov	r1, sl
 800666e:	00ca      	lsls	r2, r1, #3
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	4603      	mov	r3, r0
 8006676:	4642      	mov	r2, r8
 8006678:	189b      	adds	r3, r3, r2
 800667a:	66bb      	str	r3, [r7, #104]	; 0x68
 800667c:	464b      	mov	r3, r9
 800667e:	460a      	mov	r2, r1
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	663b      	str	r3, [r7, #96]	; 0x60
 8006690:	667a      	str	r2, [r7, #100]	; 0x64
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669e:	4649      	mov	r1, r9
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4641      	mov	r1, r8
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4641      	mov	r1, r8
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066b0:	f7fa faea 	bl	8000c88 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <UART_SetConfig+0x4e4>)
 80066ba:	fba3 1302 	umull	r1, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2164      	movs	r1, #100	; 0x64
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	3332      	adds	r3, #50	; 0x32
 80066cc:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <UART_SetConfig+0x4e4>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4422      	add	r2, r4
 80066e0:	609a      	str	r2, [r3, #8]
}
 80066e2:	bf00      	nop
 80066e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e8:	46bd      	mov	sp, r7
 80066ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ee:	bf00      	nop
 80066f0:	51eb851f 	.word	0x51eb851f

080066f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006706:	2b84      	cmp	r3, #132	; 0x84
 8006708:	d005      	beq.n	8006716 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800670a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	3303      	adds	r3, #3
 8006714:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006728:	f001 f922 	bl	8007970 <vTaskStartScheduler>
  
  return osOK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	bd80      	pop	{r7, pc}

08006732 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006734:	b089      	sub	sp, #36	; 0x24
 8006736:	af04      	add	r7, sp, #16
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d020      	beq.n	8006786 <osThreadCreate+0x54>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01c      	beq.n	8006786 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685c      	ldr	r4, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681d      	ldr	r5, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691e      	ldr	r6, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff ffc8 	bl	80066f4 <makeFreeRtosPriority>
 8006764:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800676e:	9202      	str	r2, [sp, #8]
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	9100      	str	r1, [sp, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4632      	mov	r2, r6
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 ff4e 	bl	800761c <xTaskCreateStatic>
 8006780:	4603      	mov	r3, r0
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e01c      	b.n	80067c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685c      	ldr	r4, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006792:	b29e      	uxth	r6, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff ffaa 	bl	80066f4 <makeFreeRtosPriority>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f107 030c 	add.w	r3, r7, #12
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	9200      	str	r2, [sp, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	4632      	mov	r2, r6
 80067ae:	4629      	mov	r1, r5
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 ff90 	bl	80076d6 <xTaskCreate>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d001      	beq.n	80067c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4619      	mov	r1, r3
 80067e0:	2001      	movs	r0, #1
 80067e2:	f000 fa52 	bl	8006c8a <xQueueCreateMutexStatic>
 80067e6:	4603      	mov	r3, r0
 80067e8:	e003      	b.n	80067f2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80067ea:	2001      	movs	r0, #1
 80067ec:	f000 fa35 	bl	8006c5a <xQueueCreateMutex>
 80067f0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80067fa:	b590      	push	{r4, r7, lr}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af02      	add	r7, sp, #8
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d011      	beq.n	8006830 <osMessageCreate+0x36>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2400      	movs	r4, #0
 8006826:	9400      	str	r4, [sp, #0]
 8006828:	f000 f92c 	bl	8006a84 <xQueueGenericCreateStatic>
 800682c:	4603      	mov	r3, r0
 800682e:	e008      	b.n	8006842 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	4619      	mov	r1, r3
 800683c:	f000 f99a 	bl	8006b74 <xQueueGenericCreate>
 8006840:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}

0800684a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f103 0208 	add.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f103 0208 	add.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f103 0208 	add.w	r2, r3, #8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	601a      	str	r2, [r3, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d103      	bne.n	800690c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e00c      	b.n	8006926 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3308      	adds	r3, #8
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e002      	b.n	800691a <vListInsert+0x2e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d2f6      	bcs.n	8006914 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6852      	ldr	r2, [r2, #4]
 800697e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d103      	bne.n	8006992 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	1e5a      	subs	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069de:	f002 f871 	bl	8008ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	68f9      	ldr	r1, [r7, #12]
 8006a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	441a      	add	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	22ff      	movs	r2, #255	; 0xff
 8006a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	22ff      	movs	r2, #255	; 0xff
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d114      	bne.n	8006a5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3310      	adds	r3, #16
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f9e7 	bl	8007e14 <xTaskRemoveFromEventList>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d012      	beq.n	8006a72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <xQueueGenericReset+0xcc>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	e009      	b.n	8006a72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3310      	adds	r3, #16
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fef1 	bl	800684a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3324      	adds	r3, #36	; 0x24
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff feec 	bl	800684a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a72:	f002 f857 	bl	8008b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a76:	2301      	movs	r3, #1
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08e      	sub	sp, #56	; 0x38
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <xQueueGenericCreateStatic+0x52>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <xQueueGenericCreateStatic+0x56>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <xQueueGenericCreateStatic+0x58>
 8006ada:	2300      	movs	r3, #0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	623b      	str	r3, [r7, #32]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <xQueueGenericCreateStatic+0x7e>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueGenericCreateStatic+0x82>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueGenericCreateStatic+0x84>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	61fb      	str	r3, [r7, #28]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b22:	2348      	movs	r3, #72	; 0x48
 8006b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b48      	cmp	r3, #72	; 0x48
 8006b2a:	d00a      	beq.n	8006b42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	61bb      	str	r3, [r7, #24]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f83f 	bl	8006be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3730      	adds	r7, #48	; 0x30
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	613b      	str	r3, [r7, #16]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3348      	adds	r3, #72	; 0x48
 8006bac:	4618      	mov	r0, r3
 8006bae:	f002 f8ab 	bl	8008d08 <pvPortMalloc>
 8006bb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	3348      	adds	r3, #72	; 0x48
 8006bc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bcc:	79fa      	ldrb	r2, [r7, #7]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f805 	bl	8006be8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bde:	69bb      	ldr	r3, [r7, #24]
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e002      	b.n	8006c0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c16:	2101      	movs	r1, #1
 8006c18:	69b8      	ldr	r0, [r7, #24]
 8006c1a:	f7ff fecb 	bl	80069b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c46:	2300      	movs	r3, #0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f837 	bl	8006cc0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b086      	sub	sp, #24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	4603      	mov	r3, r0
 8006c62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6939      	ldr	r1, [r7, #16]
 8006c72:	6978      	ldr	r0, [r7, #20]
 8006c74:	f7ff ff7e 	bl	8006b74 <xQueueGenericCreate>
 8006c78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff ffd3 	bl	8006c26 <prvInitialiseMutex>

		return xNewQueue;
 8006c80:	68fb      	ldr	r3, [r7, #12]
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af02      	add	r7, sp, #8
 8006c90:	4603      	mov	r3, r0
 8006c92:	6039      	str	r1, [r7, #0]
 8006c94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c96:	2301      	movs	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	6939      	ldr	r1, [r7, #16]
 8006ca8:	6978      	ldr	r0, [r7, #20]
 8006caa:	f7ff feeb 	bl	8006a84 <xQueueGenericCreateStatic>
 8006cae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff ffb8 	bl	8006c26 <prvInitialiseMutex>

		return xNewQueue;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08e      	sub	sp, #56	; 0x38
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <xQueueGenericSend+0x32>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <xQueueGenericSend+0x40>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <xQueueGenericSend+0x44>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <xQueueGenericSend+0x46>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <xQueueGenericSend+0x60>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSend+0x6e>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <xQueueGenericSend+0x72>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueGenericSend+0x74>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	623b      	str	r3, [r7, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4e:	f001 fa23 	bl	8008198 <xTaskGetSchedulerState>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueGenericSend+0x9e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericSend+0xa2>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericSend+0xa4>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	61fb      	str	r3, [r7, #28]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7e:	f001 fea1 	bl	8008ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <xQueueGenericSend+0xd4>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d129      	bne.n	8006de8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9a:	f000 fb2f 	bl	80073fc <prvCopyDataToQueue>
 8006d9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f831 	bl	8007e14 <xTaskRemoveFromEventList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006db8:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <xQueueGenericSend+0x1f8>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	e00a      	b.n	8006de0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dd0:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <xQueueGenericSend+0x1f8>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006de0:	f001 fea0 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e063      	b.n	8006eb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dee:	f001 fe99 	bl	8008b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e05c      	b.n	8006eb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dfc:	f107 0314 	add.w	r3, r7, #20
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 f869 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e0a:	f001 fe8b 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e0e:	f000 fe19 	bl	8007a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e12:	f001 fe57 	bl	8008ac4 <vPortEnterCritical>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d103      	bne.n	8006e2c <xQueueGenericSend+0x16c>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e32:	b25b      	sxtb	r3, r3
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d103      	bne.n	8006e42 <xQueueGenericSend+0x182>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e42:	f001 fe6f 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e46:	1d3a      	adds	r2, r7, #4
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f001 f858 	bl	8007f04 <xTaskCheckForTimeOut>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d124      	bne.n	8006ea4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e5c:	f000 fbc6 	bl	80075ec <prvIsQueueFull>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	3310      	adds	r3, #16
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 ffac 	bl	8007dcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e76:	f000 fb51 	bl	800751c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e7a:	f000 fdf1 	bl	8007a60 <xTaskResumeAll>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af7c 	bne.w	8006d7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <xQueueGenericSend+0x1f8>)
 8006e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	e772      	b.n	8006d7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9a:	f000 fb3f 	bl	800751c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e9e:	f000 fddf 	bl	8007a60 <xTaskResumeAll>
 8006ea2:	e76c      	b.n	8006d7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea6:	f000 fb39 	bl	800751c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eaa:	f000 fdd9 	bl	8007a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3738      	adds	r7, #56	; 0x38
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b090      	sub	sp, #64	; 0x40
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <xQueueGenericSendFromISR+0x3c>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <xQueueGenericSendFromISR+0x40>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e000      	b.n	8006efe <xQueueGenericSendFromISR+0x42>
 8006efc:	2300      	movs	r3, #0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <xQueueGenericSendFromISR+0x6a>
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <xQueueGenericSendFromISR+0x6e>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueGenericSendFromISR+0x70>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	623b      	str	r3, [r7, #32]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f46:	f001 fe9f 	bl	8008c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	61fa      	str	r2, [r7, #28]
 8006f60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <xQueueGenericSendFromISR+0xbc>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d12f      	bne.n	8006fd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f8e:	f000 fa35 	bl	80073fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d112      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	3324      	adds	r3, #36	; 0x24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 ff33 	bl	8007e14 <xTaskRemoveFromEventList>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00e      	beq.n	8006fd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	e007      	b.n	8006fd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	b25a      	sxtb	r2, r3
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fd6:	e001      	b.n	8006fdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fe6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3740      	adds	r7, #64	; 0x40
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	; 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <xQueueReceive+0x30>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	623b      	str	r3, [r7, #32]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <xQueueReceive+0x3e>
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <xQueueReceive+0x42>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueReceive+0x44>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <xQueueReceive+0x5e>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61fb      	str	r3, [r7, #28]
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007052:	f001 f8a1 	bl	8008198 <xTaskGetSchedulerState>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <xQueueReceive+0x6e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <xQueueReceive+0x72>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <xQueueReceive+0x74>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <xQueueReceive+0x8e>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	61bb      	str	r3, [r7, #24]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007082:	f001 fd1f 	bl	8008ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d01f      	beq.n	80070d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007096:	f000 fa1b 	bl	80074d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	1e5a      	subs	r2, r3, #1
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00f      	beq.n	80070ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	3310      	adds	r3, #16
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 feb0 	bl	8007e14 <xTaskRemoveFromEventList>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070ba:	4b3d      	ldr	r3, [pc, #244]	; (80071b0 <xQueueReceive+0x1bc>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ca:	f001 fd2b 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e069      	b.n	80071a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070d8:	f001 fd24 	bl	8008b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070dc:	2300      	movs	r3, #0
 80070de:	e062      	b.n	80071a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070e6:	f107 0310 	add.w	r3, r7, #16
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fef4 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070f4:	f001 fd16 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070f8:	f000 fca4 	bl	8007a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070fc:	f001 fce2 	bl	8008ac4 <vPortEnterCritical>
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007106:	b25b      	sxtb	r3, r3
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d103      	bne.n	8007116 <xQueueReceive+0x122>
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711c:	b25b      	sxtb	r3, r3
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d103      	bne.n	800712c <xQueueReceive+0x138>
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800712c:	f001 fcfa 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007130:	1d3a      	adds	r2, r7, #4
 8007132:	f107 0310 	add.w	r3, r7, #16
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fee3 	bl	8007f04 <xTaskCheckForTimeOut>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d123      	bne.n	800718c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007146:	f000 fa3b 	bl	80075c0 <prvIsQueueEmpty>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d017      	beq.n	8007180 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	3324      	adds	r3, #36	; 0x24
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fe37 	bl	8007dcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800715e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007160:	f000 f9dc 	bl	800751c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007164:	f000 fc7c 	bl	8007a60 <xTaskResumeAll>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d189      	bne.n	8007082 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <xQueueReceive+0x1bc>)
 8007170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	e780      	b.n	8007082 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007182:	f000 f9cb 	bl	800751c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007186:	f000 fc6b 	bl	8007a60 <xTaskResumeAll>
 800718a:	e77a      	b.n	8007082 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718e:	f000 f9c5 	bl	800751c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007192:	f000 fc65 	bl	8007a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007198:	f000 fa12 	bl	80075c0 <prvIsQueueEmpty>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f af6f 	beq.w	8007082 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3730      	adds	r7, #48	; 0x30
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	623b      	str	r3, [r7, #32]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	61fb      	str	r3, [r7, #28]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007204:	f000 ffc8 	bl	8008198 <xTaskGetSchedulerState>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <xQueueSemaphoreTake+0x60>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <xQueueSemaphoreTake+0x64>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <xQueueSemaphoreTake+0x66>
 8007218:	2300      	movs	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	61bb      	str	r3, [r7, #24]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007234:	f001 fc46 	bl	8008ac4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d024      	beq.n	800728e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007254:	f001 f948 	bl	80084e8 <pvTaskIncrementMutexHeldCount>
 8007258:	4602      	mov	r2, r0
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00f      	beq.n	8007286 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	3310      	adds	r3, #16
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fdd2 	bl	8007e14 <xTaskRemoveFromEventList>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007276:	4b54      	ldr	r3, [pc, #336]	; (80073c8 <xQueueSemaphoreTake+0x214>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007286:	f001 fc4d 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 800728a:	2301      	movs	r3, #1
 800728c:	e097      	b.n	80073be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d111      	bne.n	80072b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	617b      	str	r3, [r7, #20]
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072b0:	f001 fc38 	bl	8008b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e082      	b.n	80073be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fe08 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072cc:	f001 fc2a 	bl	8008b24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d0:	f000 fbb8 	bl	8007a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d4:	f001 fbf6 	bl	8008ac4 <vPortEnterCritical>
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072de:	b25b      	sxtb	r3, r3
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e4:	d103      	bne.n	80072ee <xQueueSemaphoreTake+0x13a>
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d103      	bne.n	8007304 <xQueueSemaphoreTake+0x150>
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007304:	f001 fc0e 	bl	8008b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007308:	463a      	mov	r2, r7
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fdf7 	bl	8007f04 <xTaskCheckForTimeOut>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d132      	bne.n	8007382 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800731c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800731e:	f000 f94f 	bl	80075c0 <prvIsQueueEmpty>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d026      	beq.n	8007376 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007330:	f001 fbc8 	bl	8008ac4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 ff4b 	bl	80081d4 <xTaskPriorityInherit>
 800733e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007340:	f001 fbf0 	bl	8008b24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	3324      	adds	r3, #36	; 0x24
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fd3d 	bl	8007dcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007354:	f000 f8e2 	bl	800751c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007358:	f000 fb82 	bl	8007a60 <xTaskResumeAll>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	f47f af68 	bne.w	8007234 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007364:	4b18      	ldr	r3, [pc, #96]	; (80073c8 <xQueueSemaphoreTake+0x214>)
 8007366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	e75e      	b.n	8007234 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007378:	f000 f8d0 	bl	800751c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800737c:	f000 fb70 	bl	8007a60 <xTaskResumeAll>
 8007380:	e758      	b.n	8007234 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007384:	f000 f8ca 	bl	800751c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007388:	f000 fb6a 	bl	8007a60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800738e:	f000 f917 	bl	80075c0 <prvIsQueueEmpty>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	f43f af4d 	beq.w	8007234 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073a0:	f001 fb90 	bl	8008ac4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a6:	f000 f811 	bl	80073cc <prvGetDisinheritPriorityAfterTimeout>
 80073aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f80a 	bl	80083cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073b8:	f001 fbb4 	bl	8008b24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3738      	adds	r7, #56	; 0x38
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d006      	beq.n	80073ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1c3 0307 	rsb	r3, r3, #7
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e001      	b.n	80073ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073ee:	68fb      	ldr	r3, [r7, #12]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10d      	bne.n	8007436 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d14d      	bne.n	80074be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 ff4a 	bl	80082c0 <xTaskPriorityDisinherit>
 800742c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	e043      	b.n	80074be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d119      	bne.n	8007470 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6858      	ldr	r0, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	461a      	mov	r2, r3
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	f001 fe74 	bl	8009134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d32b      	bcc.n	80074be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e026      	b.n	80074be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68d8      	ldr	r0, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	461a      	mov	r2, r3
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	f001 fe5a 	bl	8009134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	425b      	negs	r3, r3
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d207      	bcs.n	80074ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	425b      	negs	r3, r3
 80074a6:	441a      	add	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d105      	bne.n	80074be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074c6:	697b      	ldr	r3, [r7, #20]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d018      	beq.n	8007514 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	441a      	add	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d303      	bcc.n	8007504 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68d9      	ldr	r1, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	461a      	mov	r2, r3
 800750e:	6838      	ldr	r0, [r7, #0]
 8007510:	f001 fe10 	bl	8009134 <memcpy>
	}
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007524:	f001 face 	bl	8008ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007530:	e011      	b.n	8007556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	d012      	beq.n	8007560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fc68 	bl	8007e14 <xTaskRemoveFromEventList>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800754a:	f000 fd3d 	bl	8007fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	3b01      	subs	r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dce9      	bgt.n	8007532 <prvUnlockQueue+0x16>
 800755e:	e000      	b.n	8007562 <prvUnlockQueue+0x46>
					break;
 8007560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800756a:	f001 fadb 	bl	8008b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800756e:	f001 faa9 	bl	8008ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800757a:	e011      	b.n	80075a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d012      	beq.n	80075aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3310      	adds	r3, #16
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fc43 	bl	8007e14 <xTaskRemoveFromEventList>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007594:	f000 fd18 	bl	8007fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	3b01      	subs	r3, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dce9      	bgt.n	800757c <prvUnlockQueue+0x60>
 80075a8:	e000      	b.n	80075ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	22ff      	movs	r2, #255	; 0xff
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80075b4:	f001 fab6 	bl	8008b24 <vPortExitCritical>
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075c8:	f001 fa7c 	bl	8008ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e001      	b.n	80075de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075de:	f001 faa1 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075f4:	f001 fa66 	bl	8008ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	429a      	cmp	r2, r3
 8007602:	d102      	bne.n	800760a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e001      	b.n	800760e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800760e:	f001 fa89 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 8007612:	68fb      	ldr	r3, [r7, #12]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08e      	sub	sp, #56	; 0x38
 8007620:	af04      	add	r7, sp, #16
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xTaskCreateStatic+0x46>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	61fb      	str	r3, [r7, #28]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007662:	23b4      	movs	r3, #180	; 0xb4
 8007664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2bb4      	cmp	r3, #180	; 0xb4
 800766a:	d00a      	beq.n	8007682 <xTaskCreateStatic+0x66>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	61bb      	str	r3, [r7, #24]
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01e      	beq.n	80076c8 <xTaskCreateStatic+0xac>
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01b      	beq.n	80076c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	2202      	movs	r2, #2
 800769e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076a2:	2300      	movs	r3, #0
 80076a4:	9303      	str	r3, [sp, #12]
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	9302      	str	r3, [sp, #8]
 80076aa:	f107 0314 	add.w	r3, r7, #20
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 f850 	bl	8007760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c2:	f000 f8eb 	bl	800789c <prvAddNewTaskToReadyList>
 80076c6:	e001      	b.n	80076cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076cc:	697b      	ldr	r3, [r7, #20]
	}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3728      	adds	r7, #40	; 0x28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b08c      	sub	sp, #48	; 0x30
 80076da:	af04      	add	r7, sp, #16
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fb0c 	bl	8008d08 <pvPortMalloc>
 80076f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00e      	beq.n	8007716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076f8:	20b4      	movs	r0, #180	; 0xb4
 80076fa:	f001 fb05 	bl	8008d08 <pvPortMalloc>
 80076fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	631a      	str	r2, [r3, #48]	; 0x30
 800770c:	e005      	b.n	800771a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800770e:	6978      	ldr	r0, [r7, #20]
 8007710:	f001 fbc6 	bl	8008ea0 <vPortFree>
 8007714:	e001      	b.n	800771a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d017      	beq.n	8007750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	2300      	movs	r3, #0
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	9302      	str	r3, [sp, #8]
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f80e 	bl	8007760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007744:	69f8      	ldr	r0, [r7, #28]
 8007746:	f000 f8a9 	bl	800789c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800774a:	2301      	movs	r3, #1
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e002      	b.n	8007756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007756:	69bb      	ldr	r3, [r7, #24]
	}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007778:	3b01      	subs	r3, #1
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	617b      	str	r3, [r7, #20]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01f      	beq.n	80077ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	e012      	b.n	80077da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	7819      	ldrb	r1, [r3, #0]
 80077bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	3334      	adds	r3, #52	; 0x34
 80077c4:	460a      	mov	r2, r1
 80077c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d006      	beq.n	80077e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	3301      	adds	r3, #1
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	2b0f      	cmp	r3, #15
 80077de:	d9e9      	bls.n	80077b4 <prvInitialiseNewTask+0x54>
 80077e0:	e000      	b.n	80077e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80077e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ec:	e003      	b.n	80077f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	2b06      	cmp	r3, #6
 80077fa:	d901      	bls.n	8007800 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077fc:	2306      	movs	r3, #6
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007804:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2200      	movs	r2, #0
 8007810:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f837 	bl	800688a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	3318      	adds	r3, #24
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f832 	bl	800688a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	f1c3 0207 	rsb	r2, r3, #7
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2200      	movs	r2, #0
 8007848:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	334c      	adds	r3, #76	; 0x4c
 8007850:	2260      	movs	r2, #96	; 0x60
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fc7b 	bl	8009150 <memset>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <prvInitialiseNewTask+0x130>)
 800785e:	651a      	str	r2, [r3, #80]	; 0x50
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <prvInitialiseNewTask+0x134>)
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	4a0b      	ldr	r2, [pc, #44]	; (8007898 <prvInitialiseNewTask+0x138>)
 800786a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	69b8      	ldr	r0, [r7, #24]
 8007872:	f000 fff7 	bl	8008864 <pxPortInitialiseStack>
 8007876:	4602      	mov	r2, r0
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007886:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007888:	bf00      	nop
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	0800aac0 	.word	0x0800aac0
 8007894:	0800aae0 	.word	0x0800aae0
 8007898:	0800aaa0 	.word	0x0800aaa0

0800789c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a4:	f001 f90e 	bl	8008ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a8:	4b2a      	ldr	r3, [pc, #168]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a29      	ldr	r2, [pc, #164]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078b2:	4b29      	ldr	r3, [pc, #164]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ba:	4a27      	ldr	r2, [pc, #156]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078c0:	4b24      	ldr	r3, [pc, #144]	; (8007954 <prvAddNewTaskToReadyList+0xb8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d110      	bne.n	80078ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c8:	f000 fba4 	bl	8008014 <prvInitialiseTaskLists>
 80078cc:	e00d      	b.n	80078ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ce:	4b23      	ldr	r3, [pc, #140]	; (800795c <prvAddNewTaskToReadyList+0xc0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d6:	4b20      	ldr	r3, [pc, #128]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d802      	bhi.n	80078ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e4:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ea:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <prvAddNewTaskToReadyList+0xc4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3301      	adds	r3, #1
 80078f0:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <prvAddNewTaskToReadyList+0xc4>)
 80078f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	2201      	movs	r2, #1
 80078fa:	409a      	lsls	r2, r3
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <prvAddNewTaskToReadyList+0xc8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4313      	orrs	r3, r2
 8007902:	4a18      	ldr	r2, [pc, #96]	; (8007964 <prvAddNewTaskToReadyList+0xc8>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <prvAddNewTaskToReadyList+0xcc>)
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	4619      	mov	r1, r3
 800791c:	4610      	mov	r0, r2
 800791e:	f7fe ffc1 	bl	80068a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007922:	f001 f8ff 	bl	8008b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prvAddNewTaskToReadyList+0xc0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvAddNewTaskToReadyList+0xbc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	429a      	cmp	r2, r3
 800793a:	d207      	bcs.n	800794c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <prvAddNewTaskToReadyList+0xd0>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000710 	.word	0x20000710
 8007958:	20000610 	.word	0x20000610
 800795c:	2000071c 	.word	0x2000071c
 8007960:	2000072c 	.word	0x2000072c
 8007964:	20000718 	.word	0x20000718
 8007968:	20000614 	.word	0x20000614
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800797e:	463a      	mov	r2, r7
 8007980:	1d39      	adds	r1, r7, #4
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7f9 ff4e 	bl	8001828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	9202      	str	r2, [sp, #8]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	460a      	mov	r2, r1
 800799e:	4921      	ldr	r1, [pc, #132]	; (8007a24 <vTaskStartScheduler+0xb4>)
 80079a0:	4821      	ldr	r0, [pc, #132]	; (8007a28 <vTaskStartScheduler+0xb8>)
 80079a2:	f7ff fe3b 	bl	800761c <xTaskCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <vTaskStartScheduler+0xbc>)
 80079aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079ac:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <vTaskStartScheduler+0xbc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e001      	b.n	80079be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d11b      	bne.n	80079fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	613b      	str	r3, [r7, #16]
}
 80079d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079d8:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <vTaskStartScheduler+0xc0>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	334c      	adds	r3, #76	; 0x4c
 80079de:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <vTaskStartScheduler+0xc4>)
 80079e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <vTaskStartScheduler+0xc8>)
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <vTaskStartScheduler+0xcc>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <vTaskStartScheduler+0xd0>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079f6:	f000 ffc3 	bl	8008980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079fa:	e00e      	b.n	8007a1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d10a      	bne.n	8007a1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <vTaskStartScheduler+0xa8>
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	0800aa80 	.word	0x0800aa80
 8007a28:	08007fe1 	.word	0x08007fe1
 8007a2c:	20000734 	.word	0x20000734
 8007a30:	20000610 	.word	0x20000610
 8007a34:	200000c8 	.word	0x200000c8
 8007a38:	20000730 	.word	0x20000730
 8007a3c:	2000071c 	.word	0x2000071c
 8007a40:	20000714 	.word	0x20000714

08007a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a48:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <vTaskSuspendAll+0x18>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a03      	ldr	r2, [pc, #12]	; (8007a5c <vTaskSuspendAll+0x18>)
 8007a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a52:	bf00      	nop
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000738 	.word	0x20000738

08007a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a6e:	4b41      	ldr	r3, [pc, #260]	; (8007b74 <xTaskResumeAll+0x114>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <xTaskResumeAll+0x2c>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	603b      	str	r3, [r7, #0]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a8c:	f001 f81a 	bl	8008ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a90:	4b38      	ldr	r3, [pc, #224]	; (8007b74 <xTaskResumeAll+0x114>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	4a37      	ldr	r2, [pc, #220]	; (8007b74 <xTaskResumeAll+0x114>)
 8007a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a9a:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <xTaskResumeAll+0x114>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d161      	bne.n	8007b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aa2:	4b35      	ldr	r3, [pc, #212]	; (8007b78 <xTaskResumeAll+0x118>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d05d      	beq.n	8007b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aaa:	e02e      	b.n	8007b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aac:	4b33      	ldr	r3, [pc, #204]	; (8007b7c <xTaskResumeAll+0x11c>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3318      	adds	r3, #24
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe ff50 	bl	800695e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe ff4b 	bl	800695e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	2201      	movs	r2, #1
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <xTaskResumeAll+0x120>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	4a2a      	ldr	r2, [pc, #168]	; (8007b80 <xTaskResumeAll+0x120>)
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <xTaskResumeAll+0x124>)
 8007ae8:	441a      	add	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fe fed7 	bl	80068a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <xTaskResumeAll+0x128>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b04:	4b21      	ldr	r3, [pc, #132]	; (8007b8c <xTaskResumeAll+0x12c>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b0a:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <xTaskResumeAll+0x11c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1cc      	bne.n	8007aac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b18:	f000 fb1e 	bl	8008158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b1c:	4b1c      	ldr	r3, [pc, #112]	; (8007b90 <xTaskResumeAll+0x130>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d010      	beq.n	8007b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b28:	f000 f836 	bl	8007b98 <xTaskIncrementTick>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <xTaskResumeAll+0x12c>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f1      	bne.n	8007b28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <xTaskResumeAll+0x130>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b4a:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <xTaskResumeAll+0x12c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b52:	2301      	movs	r3, #1
 8007b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <xTaskResumeAll+0x134>)
 8007b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f000 ffdd 	bl	8008b24 <vPortExitCritical>

	return xAlreadyYielded;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000738 	.word	0x20000738
 8007b78:	20000710 	.word	0x20000710
 8007b7c:	200006d0 	.word	0x200006d0
 8007b80:	20000718 	.word	0x20000718
 8007b84:	20000614 	.word	0x20000614
 8007b88:	20000610 	.word	0x20000610
 8007b8c:	20000724 	.word	0x20000724
 8007b90:	20000720 	.word	0x20000720
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba2:	4b4e      	ldr	r3, [pc, #312]	; (8007cdc <xTaskIncrementTick+0x144>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 808e 	bne.w	8007cc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <xTaskIncrementTick+0x148>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bb4:	4a4a      	ldr	r2, [pc, #296]	; (8007ce0 <xTaskIncrementTick+0x148>)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d120      	bne.n	8007c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bc0:	4b48      	ldr	r3, [pc, #288]	; (8007ce4 <xTaskIncrementTick+0x14c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	603b      	str	r3, [r7, #0]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <xTaskIncrementTick+0x46>
 8007be0:	4b40      	ldr	r3, [pc, #256]	; (8007ce4 <xTaskIncrementTick+0x14c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	4b40      	ldr	r3, [pc, #256]	; (8007ce8 <xTaskIncrementTick+0x150>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3e      	ldr	r2, [pc, #248]	; (8007ce4 <xTaskIncrementTick+0x14c>)
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	4a3e      	ldr	r2, [pc, #248]	; (8007ce8 <xTaskIncrementTick+0x150>)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <xTaskIncrementTick+0x154>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	4a3c      	ldr	r2, [pc, #240]	; (8007cec <xTaskIncrementTick+0x154>)
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	f000 faab 	bl	8008158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c02:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <xTaskIncrementTick+0x158>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d348      	bcc.n	8007c9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0c:	4b35      	ldr	r3, [pc, #212]	; (8007ce4 <xTaskIncrementTick+0x14c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c16:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <xTaskIncrementTick+0x158>)
 8007c18:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1c:	601a      	str	r2, [r3, #0]
					break;
 8007c1e:	e03e      	b.n	8007c9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c20:	4b30      	ldr	r3, [pc, #192]	; (8007ce4 <xTaskIncrementTick+0x14c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d203      	bcs.n	8007c40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c38:	4a2d      	ldr	r2, [pc, #180]	; (8007cf0 <xTaskIncrementTick+0x158>)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c3e:	e02e      	b.n	8007c9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fe8a 	bl	800695e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	3318      	adds	r3, #24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fe81 	bl	800695e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	2201      	movs	r2, #1
 8007c62:	409a      	lsls	r2, r3
 8007c64:	4b23      	ldr	r3, [pc, #140]	; (8007cf4 <xTaskIncrementTick+0x15c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <xTaskIncrementTick+0x15c>)
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4a1f      	ldr	r2, [pc, #124]	; (8007cf8 <xTaskIncrementTick+0x160>)
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f7fe fe0d 	bl	80068a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <xTaskIncrementTick+0x164>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3b9      	bcc.n	8007c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c9c:	e7b6      	b.n	8007c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c9e:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <xTaskIncrementTick+0x164>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca4:	4914      	ldr	r1, [pc, #80]	; (8007cf8 <xTaskIncrementTick+0x160>)
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d901      	bls.n	8007cba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <xTaskIncrementTick+0x168>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e004      	b.n	8007cd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <xTaskIncrementTick+0x16c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	4a0d      	ldr	r2, [pc, #52]	; (8007d04 <xTaskIncrementTick+0x16c>)
 8007cd0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cd2:	697b      	ldr	r3, [r7, #20]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000738 	.word	0x20000738
 8007ce0:	20000714 	.word	0x20000714
 8007ce4:	200006c8 	.word	0x200006c8
 8007ce8:	200006cc 	.word	0x200006cc
 8007cec:	20000728 	.word	0x20000728
 8007cf0:	20000730 	.word	0x20000730
 8007cf4:	20000718 	.word	0x20000718
 8007cf8:	20000614 	.word	0x20000614
 8007cfc:	20000610 	.word	0x20000610
 8007d00:	20000724 	.word	0x20000724
 8007d04:	20000720 	.word	0x20000720

08007d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <vTaskSwitchContext+0xac>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d16:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <vTaskSwitchContext+0xb0>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d1c:	e044      	b.n	8007da8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007d1e:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <vTaskSwitchContext+0xb0>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <vTaskSwitchContext+0xb4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	fab3 f383 	clz	r3, r3
 8007d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	f1c3 031f 	rsb	r3, r3, #31
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	4921      	ldr	r1, [pc, #132]	; (8007dc0 <vTaskSwitchContext+0xb8>)
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vTaskSwitchContext+0x5a>
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <vTaskSwitchContext+0xb8>)
 8007d70:	4413      	add	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3308      	adds	r3, #8
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d104      	bne.n	8007d94 <vTaskSwitchContext+0x8c>
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <vTaskSwitchContext+0xbc>)
 8007d9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d9e:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <vTaskSwitchContext+0xbc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	334c      	adds	r3, #76	; 0x4c
 8007da4:	4a08      	ldr	r2, [pc, #32]	; (8007dc8 <vTaskSwitchContext+0xc0>)
 8007da6:	6013      	str	r3, [r2, #0]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000738 	.word	0x20000738
 8007db8:	20000724 	.word	0x20000724
 8007dbc:	20000718 	.word	0x20000718
 8007dc0:	20000614 	.word	0x20000614
 8007dc4:	20000610 	.word	0x20000610
 8007dc8:	200000c8 	.word	0x200000c8

08007dcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60fb      	str	r3, [r7, #12]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <vTaskPlaceOnEventList+0x44>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3318      	adds	r3, #24
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fe fd76 	bl	80068ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e00:	2101      	movs	r1, #1
 8007e02:	6838      	ldr	r0, [r7, #0]
 8007e04:	f000 fcc8 	bl	8008798 <prvAddCurrentTaskToDelayedList>
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000610 	.word	0x20000610

08007e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	60fb      	str	r3, [r7, #12]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3318      	adds	r3, #24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fd8a 	bl	800695e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <xTaskRemoveFromEventList+0xac>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d11c      	bne.n	8007e8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fd81 	bl	800695e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <xTaskRemoveFromEventList+0xb0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <xTaskRemoveFromEventList+0xb0>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <xTaskRemoveFromEventList+0xb4>)
 8007e7c:	441a      	add	r2, r3
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f7fe fd0d 	bl	80068a4 <vListInsertEnd>
 8007e8a:	e005      	b.n	8007e98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3318      	adds	r3, #24
 8007e90:	4619      	mov	r1, r3
 8007e92:	480e      	ldr	r0, [pc, #56]	; (8007ecc <xTaskRemoveFromEventList+0xb8>)
 8007e94:	f7fe fd06 	bl	80068a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <xTaskRemoveFromEventList+0xbc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d905      	bls.n	8007eb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <xTaskRemoveFromEventList+0xc0>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e001      	b.n	8007eb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eb6:	697b      	ldr	r3, [r7, #20]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000738 	.word	0x20000738
 8007ec4:	20000718 	.word	0x20000718
 8007ec8:	20000614 	.word	0x20000614
 8007ecc:	200006d0 	.word	0x200006d0
 8007ed0:	20000610 	.word	0x20000610
 8007ed4:	20000724 	.word	0x20000724

08007ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <vTaskInternalSetTimeOutState+0x24>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <vTaskInternalSetTimeOutState+0x28>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	605a      	str	r2, [r3, #4]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	20000728 	.word	0x20000728
 8007f00:	20000714 	.word	0x20000714

08007f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	613b      	str	r3, [r7, #16]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f46:	f000 fdbd 	bl	8008ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <xTaskCheckForTimeOut+0xbc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d102      	bne.n	8007f6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e023      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <xTaskCheckForTimeOut+0xc0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d007      	beq.n	8007f86 <xTaskCheckForTimeOut+0x82>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e015      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d20b      	bcs.n	8007fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ff9b 	bl	8007ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e004      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fb2:	f000 fdb7 	bl	8008b24 <vPortExitCritical>

	return xReturn;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000714 	.word	0x20000714
 8007fc4:	20000728 	.word	0x20000728

08007fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <vTaskMissedYield+0x14>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000724 	.word	0x20000724

08007fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fe8:	f000 f854 	bl	8008094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <prvIdleTask+0x2c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d907      	bls.n	8008004 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <prvIdleTask+0x30>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008004:	f7f9 fe58 	bl	8001cb8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008008:	e7ee      	b.n	8007fe8 <prvIdleTask+0x8>
 800800a:	bf00      	nop
 800800c:	20000614 	.word	0x20000614
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
 800801e:	e00c      	b.n	800803a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <prvInitialiseTaskLists+0x60>)
 800802c:	4413      	add	r3, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fc0b 	bl	800684a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3301      	adds	r3, #1
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b06      	cmp	r3, #6
 800803e:	d9ef      	bls.n	8008020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008040:	480d      	ldr	r0, [pc, #52]	; (8008078 <prvInitialiseTaskLists+0x64>)
 8008042:	f7fe fc02 	bl	800684a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008046:	480d      	ldr	r0, [pc, #52]	; (800807c <prvInitialiseTaskLists+0x68>)
 8008048:	f7fe fbff 	bl	800684a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800804c:	480c      	ldr	r0, [pc, #48]	; (8008080 <prvInitialiseTaskLists+0x6c>)
 800804e:	f7fe fbfc 	bl	800684a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008052:	480c      	ldr	r0, [pc, #48]	; (8008084 <prvInitialiseTaskLists+0x70>)
 8008054:	f7fe fbf9 	bl	800684a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008058:	480b      	ldr	r0, [pc, #44]	; (8008088 <prvInitialiseTaskLists+0x74>)
 800805a:	f7fe fbf6 	bl	800684a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <prvInitialiseTaskLists+0x78>)
 8008060:	4a05      	ldr	r2, [pc, #20]	; (8008078 <prvInitialiseTaskLists+0x64>)
 8008062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvInitialiseTaskLists+0x7c>)
 8008066:	4a05      	ldr	r2, [pc, #20]	; (800807c <prvInitialiseTaskLists+0x68>)
 8008068:	601a      	str	r2, [r3, #0]
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000614 	.word	0x20000614
 8008078:	200006a0 	.word	0x200006a0
 800807c:	200006b4 	.word	0x200006b4
 8008080:	200006d0 	.word	0x200006d0
 8008084:	200006e4 	.word	0x200006e4
 8008088:	200006fc 	.word	0x200006fc
 800808c:	200006c8 	.word	0x200006c8
 8008090:	200006cc 	.word	0x200006cc

08008094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800809a:	e019      	b.n	80080d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800809c:	f000 fd12 	bl	8008ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a0:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <prvCheckTasksWaitingTermination+0x50>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe fc56 	bl	800695e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <prvCheckTasksWaitingTermination+0x54>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4a0b      	ldr	r2, [pc, #44]	; (80080e8 <prvCheckTasksWaitingTermination+0x54>)
 80080ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080bc:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <prvCheckTasksWaitingTermination+0x58>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <prvCheckTasksWaitingTermination+0x58>)
 80080c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080c6:	f000 fd2d 	bl	8008b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f810 	bl	80080f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d0:	4b06      	ldr	r3, [pc, #24]	; (80080ec <prvCheckTasksWaitingTermination+0x58>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e1      	bne.n	800809c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200006e4 	.word	0x200006e4
 80080e8:	20000710 	.word	0x20000710
 80080ec:	200006f8 	.word	0x200006f8

080080f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	334c      	adds	r3, #76	; 0x4c
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f8d1 	bl	80092a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d108      	bne.n	800811e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fec5 	bl	8008ea0 <vPortFree>
				vPortFree( pxTCB );
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fec2 	bl	8008ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800811c:	e018      	b.n	8008150 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008124:	2b01      	cmp	r3, #1
 8008126:	d103      	bne.n	8008130 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 feb9 	bl	8008ea0 <vPortFree>
	}
 800812e:	e00f      	b.n	8008150 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008136:	2b02      	cmp	r3, #2
 8008138:	d00a      	beq.n	8008150 <prvDeleteTCB+0x60>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	60fb      	str	r3, [r7, #12]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <prvDeleteTCB+0x5e>
	}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008170:	e008      	b.n	8008184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4a04      	ldr	r2, [pc, #16]	; (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	200006c8 	.word	0x200006c8
 8008194:	20000730 	.word	0x20000730

08008198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <xTaskGetSchedulerState+0x34>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a6:	2301      	movs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e008      	b.n	80081be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ac:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <xTaskGetSchedulerState+0x38>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b4:	2302      	movs	r3, #2
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	e001      	b.n	80081be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081be:	687b      	ldr	r3, [r7, #4]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	2000071c 	.word	0x2000071c
 80081d0:	20000738 	.word	0x20000738

080081d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d05e      	beq.n	80082a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ee:	4b31      	ldr	r3, [pc, #196]	; (80082b4 <xTaskPriorityInherit+0xe0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d24e      	bcs.n	8008296 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db06      	blt.n	800820e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008200:	4b2c      	ldr	r3, [pc, #176]	; (80082b4 <xTaskPriorityInherit+0xe0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	f1c3 0207 	rsb	r2, r3, #7
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6959      	ldr	r1, [r3, #20]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a26      	ldr	r2, [pc, #152]	; (80082b8 <xTaskPriorityInherit+0xe4>)
 8008220:	4413      	add	r3, r2
 8008222:	4299      	cmp	r1, r3
 8008224:	d12f      	bne.n	8008286 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fb97 	bl	800695e <uxListRemove>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	2201      	movs	r2, #1
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43da      	mvns	r2, r3
 8008242:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <xTaskPriorityInherit+0xe8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4013      	ands	r3, r2
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <xTaskPriorityInherit+0xe8>)
 800824a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <xTaskPriorityInherit+0xe0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	2201      	movs	r2, #1
 800825c:	409a      	lsls	r2, r3
 800825e:	4b17      	ldr	r3, [pc, #92]	; (80082bc <xTaskPriorityInherit+0xe8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	4a15      	ldr	r2, [pc, #84]	; (80082bc <xTaskPriorityInherit+0xe8>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a10      	ldr	r2, [pc, #64]	; (80082b8 <xTaskPriorityInherit+0xe4>)
 8008276:	441a      	add	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fb10 	bl	80068a4 <vListInsertEnd>
 8008284:	e004      	b.n	8008290 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008286:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <xTaskPriorityInherit+0xe0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e008      	b.n	80082a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <xTaskPriorityInherit+0xe0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d201      	bcs.n	80082a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082a8:	68fb      	ldr	r3, [r7, #12]
	}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000610 	.word	0x20000610
 80082b8:	20000614 	.word	0x20000614
 80082bc:	20000718 	.word	0x20000718

080082c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d06e      	beq.n	80083b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082d6:	4b3a      	ldr	r3, [pc, #232]	; (80083c0 <xTaskPriorityDisinherit+0x100>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d00a      	beq.n	80082f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008318:	1e5a      	subs	r2, r3, #1
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	429a      	cmp	r2, r3
 8008328:	d044      	beq.n	80083b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832e:	2b00      	cmp	r3, #0
 8008330:	d140      	bne.n	80083b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3304      	adds	r3, #4
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fb11 	bl	800695e <uxListRemove>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d115      	bne.n	800836e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008346:	491f      	ldr	r1, [pc, #124]	; (80083c4 <xTaskPriorityDisinherit+0x104>)
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xTaskPriorityDisinherit+0xae>
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	2201      	movs	r2, #1
 800835e:	fa02 f303 	lsl.w	r3, r2, r3
 8008362:	43da      	mvns	r2, r3
 8008364:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <xTaskPriorityDisinherit+0x108>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4013      	ands	r3, r2
 800836a:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <xTaskPriorityDisinherit+0x108>)
 800836c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	f1c3 0207 	rsb	r2, r3, #7
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	2201      	movs	r2, #1
 8008388:	409a      	lsls	r2, r3
 800838a:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <xTaskPriorityDisinherit+0x108>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4313      	orrs	r3, r2
 8008390:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <xTaskPriorityDisinherit+0x108>)
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <xTaskPriorityDisinherit+0x104>)
 80083a2:	441a      	add	r2, r3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f7fe fa7a 	bl	80068a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083b4:	697b      	ldr	r3, [r7, #20]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000610 	.word	0x20000610
 80083c4:	20000614 	.word	0x20000614
 80083c8:	20000718 	.word	0x20000718

080083cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d077      	beq.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60fb      	str	r3, [r7, #12]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d902      	bls.n	8008412 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	e002      	b.n	8008418 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008416:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	429a      	cmp	r2, r3
 8008420:	d058      	beq.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	429a      	cmp	r2, r3
 800842a:	d153      	bne.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	429a      	cmp	r2, r3
 8008434:	d10a      	bne.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	db04      	blt.n	800846a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f1c3 0207 	rsb	r2, r3, #7
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	6959      	ldr	r1, [r3, #20]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4a19      	ldr	r2, [pc, #100]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800847a:	4413      	add	r3, r2
 800847c:	4299      	cmp	r1, r3
 800847e:	d129      	bne.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	3304      	adds	r3, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fa6a 	bl	800695e <uxListRemove>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	2201      	movs	r2, #1
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	43da      	mvns	r2, r3
 800849c:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4013      	ands	r3, r2
 80084a2:	4a10      	ldr	r2, [pc, #64]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	2201      	movs	r2, #1
 80084ac:	409a      	lsls	r2, r3
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	4a0b      	ldr	r2, [pc, #44]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80084c6:	441a      	add	r2, r3
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	3304      	adds	r3, #4
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f7fe f9e8 	bl	80068a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084d4:	bf00      	nop
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000610 	.word	0x20000610
 80084e0:	20000614 	.word	0x20000614
 80084e4:	20000718 	.word	0x20000718

080084e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084fa:	3201      	adds	r2, #1
 80084fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80084fe:	4b03      	ldr	r3, [pc, #12]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 8008500:	681b      	ldr	r3, [r3, #0]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	20000610 	.word	0x20000610

08008510 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800851e:	f000 fad1 	bl	8008ac4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008522:	4b29      	ldr	r3, [pc, #164]	; (80085c8 <xTaskNotifyWait+0xb8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b02      	cmp	r3, #2
 800852e:	d01c      	beq.n	800856a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <xTaskNotifyWait+0xb8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	43d2      	mvns	r2, r2
 800853c:	400a      	ands	r2, r1
 800853e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008542:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <xTaskNotifyWait+0xb8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008552:	2101      	movs	r1, #1
 8008554:	6838      	ldr	r0, [r7, #0]
 8008556:	f000 f91f 	bl	8008798 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800855a:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <xTaskNotifyWait+0xbc>)
 800855c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800856a:	f000 fadb 	bl	8008b24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800856e:	f000 faa9 	bl	8008ac4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008578:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <xTaskNotifyWait+0xb8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008584:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <xTaskNotifyWait+0xb8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d002      	beq.n	8008598 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	e00a      	b.n	80085ae <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <xTaskNotifyWait+0xb8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	43d2      	mvns	r2, r2
 80085a4:	400a      	ands	r2, r1
 80085a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 80085aa:	2301      	movs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085ae:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <xTaskNotifyWait+0xb8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80085b8:	f000 fab4 	bl	8008b24 <vPortExitCritical>

		return xReturn;
 80085bc:	697b      	ldr	r3, [r7, #20]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000610 	.word	0x20000610
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	; 0x38
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80085e0:	2301      	movs	r3, #1
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008600:	f000 fb42 	bl	8008c88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008608:	f3ef 8211 	mrs	r2, BASEPRI
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	623a      	str	r2, [r7, #32]
 800861e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008620:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d004      	beq.n	8008634 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2202      	movs	r2, #2
 8008642:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b04      	cmp	r3, #4
 800864a:	d82f      	bhi.n	80086ac <xTaskGenericNotifyFromISR+0xdc>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <xTaskGenericNotifyFromISR+0x84>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	080086cf 	.word	0x080086cf
 8008658:	08008669 	.word	0x08008669
 800865c:	0800867b 	.word	0x0800867b
 8008660:	0800868b 	.word	0x0800868b
 8008664:	08008695 	.word	0x08008695
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	431a      	orrs	r2, r3
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008678:	e02c      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008688:	e024      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008692:	e01f      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008698:	2b02      	cmp	r3, #2
 800869a:	d004      	beq.n	80086a6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086a4:	e016      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80086aa:	e013      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d00c      	beq.n	80086d2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	61bb      	str	r3, [r7, #24]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xTaskGenericNotifyFromISR+0xfc>
					break;
 80086ce:	bf00      	nop
 80086d0:	e000      	b.n	80086d4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80086d2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80086d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d145      	bne.n	8008768 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	617b      	str	r3, [r7, #20]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fa:	4b21      	ldr	r3, [pc, #132]	; (8008780 <xTaskGenericNotifyFromISR+0x1b0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d11c      	bne.n	800873c <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	3304      	adds	r3, #4
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe f929 	bl	800695e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	2201      	movs	r2, #1
 8008712:	409a      	lsls	r2, r3
 8008714:	4b1b      	ldr	r3, [pc, #108]	; (8008784 <xTaskGenericNotifyFromISR+0x1b4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4313      	orrs	r3, r2
 800871a:	4a1a      	ldr	r2, [pc, #104]	; (8008784 <xTaskGenericNotifyFromISR+0x1b4>)
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4a17      	ldr	r2, [pc, #92]	; (8008788 <xTaskGenericNotifyFromISR+0x1b8>)
 800872c:	441a      	add	r2, r3
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	3304      	adds	r3, #4
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f7fe f8b5 	bl	80068a4 <vListInsertEnd>
 800873a:	e005      	b.n	8008748 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	3318      	adds	r3, #24
 8008740:	4619      	mov	r1, r3
 8008742:	4812      	ldr	r0, [pc, #72]	; (800878c <xTaskGenericNotifyFromISR+0x1bc>)
 8008744:	f7fe f8ae 	bl	80068a4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	4b10      	ldr	r3, [pc, #64]	; (8008790 <xTaskGenericNotifyFromISR+0x1c0>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	429a      	cmp	r2, r3
 8008754:	d908      	bls.n	8008768 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800875c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875e:	2201      	movs	r2, #1
 8008760:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <xTaskGenericNotifyFromISR+0x1c4>)
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f383 8811 	msr	BASEPRI, r3
}
 8008772:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008776:	4618      	mov	r0, r3
 8008778:	3738      	adds	r7, #56	; 0x38
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000738 	.word	0x20000738
 8008784:	20000718 	.word	0x20000718
 8008788:	20000614 	.word	0x20000614
 800878c:	200006d0 	.word	0x200006d0
 8008790:	20000610 	.word	0x20000610
 8008794:	20000724 	.word	0x20000724

08008798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087a2:	4b29      	ldr	r3, [pc, #164]	; (8008848 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087a8:	4b28      	ldr	r3, [pc, #160]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe f8d5 	bl	800695e <uxListRemove>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	2201      	movs	r2, #1
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	43da      	mvns	r2, r3
 80087c8:	4b21      	ldr	r3, [pc, #132]	; (8008850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4013      	ands	r3, r2
 80087ce:	4a20      	ldr	r2, [pc, #128]	; (8008850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d10a      	bne.n	80087f0 <prvAddCurrentTaskToDelayedList+0x58>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087e0:	4b1a      	ldr	r3, [pc, #104]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	481a      	ldr	r0, [pc, #104]	; (8008854 <prvAddCurrentTaskToDelayedList+0xbc>)
 80087ea:	f7fe f85b 	bl	80068a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087ee:	e026      	b.n	800883e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087f8:	4b14      	ldr	r3, [pc, #80]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	429a      	cmp	r2, r3
 8008806:	d209      	bcs.n	800881c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008808:	4b13      	ldr	r3, [pc, #76]	; (8008858 <prvAddCurrentTaskToDelayedList+0xc0>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3304      	adds	r3, #4
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f7fe f869 	bl	80068ec <vListInsert>
}
 800881a:	e010      	b.n	800883e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <prvAddCurrentTaskToDelayedList+0xc4>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3304      	adds	r3, #4
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f7fe f85f 	bl	80068ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	429a      	cmp	r2, r3
 8008836:	d202      	bcs.n	800883e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <prvAddCurrentTaskToDelayedList+0xc8>)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6013      	str	r3, [r2, #0]
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000714 	.word	0x20000714
 800884c:	20000610 	.word	0x20000610
 8008850:	20000718 	.word	0x20000718
 8008854:	200006fc 	.word	0x200006fc
 8008858:	200006cc 	.word	0x200006cc
 800885c:	200006c8 	.word	0x200006c8
 8008860:	20000730 	.word	0x20000730

08008864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3b04      	subs	r3, #4
 8008874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800887c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3b04      	subs	r3, #4
 8008882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f023 0201 	bic.w	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3b04      	subs	r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008894:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <pxPortInitialiseStack+0x64>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3b14      	subs	r3, #20
 800889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3b04      	subs	r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f06f 0202 	mvn.w	r2, #2
 80088b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3b20      	subs	r3, #32
 80088b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ba:	68fb      	ldr	r3, [r7, #12]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	080088cd 	.word	0x080088cd

080088cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088d6:	4b12      	ldr	r3, [pc, #72]	; (8008920 <prvTaskExitError+0x54>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088de:	d00a      	beq.n	80088f6 <prvTaskExitError+0x2a>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <prvTaskExitError+0x28>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	60bb      	str	r3, [r7, #8]
}
 8008908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800890a:	bf00      	nop
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0fc      	beq.n	800890c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	200000c4 	.word	0x200000c4
	...

08008930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <pxCurrentTCBConst2>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6808      	ldr	r0, [r1, #0]
 8008936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893a:	f380 8809 	msr	PSP, r0
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	4770      	bx	lr
 800894c:	f3af 8000 	nop.w

08008950 <pxCurrentTCBConst2>:
 8008950:	20000610 	.word	0x20000610
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop

08008958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <prvPortStartFirstTask+0x24>)
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	f380 8808 	msr	MSP, r0
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8814 	msr	CONTROL, r0
 800896a:	b662      	cpsie	i
 800896c:	b661      	cpsie	f
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	df00      	svc	0
 8008978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800897a:	bf00      	nop
 800897c:	e000ed08 	.word	0xe000ed08

08008980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008986:	4b46      	ldr	r3, [pc, #280]	; (8008aa0 <xPortStartScheduler+0x120>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a46      	ldr	r2, [pc, #280]	; (8008aa4 <xPortStartScheduler+0x124>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d10a      	bne.n	80089a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089a6:	4b3e      	ldr	r3, [pc, #248]	; (8008aa0 <xPortStartScheduler+0x120>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a3f      	ldr	r2, [pc, #252]	; (8008aa8 <xPortStartScheduler+0x128>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10a      	bne.n	80089c6 <xPortStartScheduler+0x46>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089c6:	4b39      	ldr	r3, [pc, #228]	; (8008aac <xPortStartScheduler+0x12c>)
 80089c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	4b31      	ldr	r3, [pc, #196]	; (8008ab0 <xPortStartScheduler+0x130>)
 80089ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ee:	4b31      	ldr	r3, [pc, #196]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089f0:	2207      	movs	r2, #7
 80089f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089f4:	e009      	b.n	8008a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089f6:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	4a2d      	ldr	r2, [pc, #180]	; (8008ab4 <xPortStartScheduler+0x134>)
 80089fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a12:	2b80      	cmp	r3, #128	; 0x80
 8008a14:	d0ef      	beq.n	80089f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a16:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f1c3 0307 	rsb	r3, r3, #7
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d00a      	beq.n	8008a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a42:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a4a:	4a1a      	ldr	r2, [pc, #104]	; (8008ab4 <xPortStartScheduler+0x134>)
 8008a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a56:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a62:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <xPortStartScheduler+0x138>)
 8008a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a6e:	f000 f8dd 	bl	8008c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <xPortStartScheduler+0x13c>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a78:	f000 f8fc 	bl	8008c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <xPortStartScheduler+0x140>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a0f      	ldr	r2, [pc, #60]	; (8008ac0 <xPortStartScheduler+0x140>)
 8008a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a88:	f7ff ff66 	bl	8008958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a8c:	f7ff f93c 	bl	8007d08 <vTaskSwitchContext>
	prvTaskExitError();
 8008a90:	f7ff ff1c 	bl	80088cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	e000ed00 	.word	0xe000ed00
 8008aa4:	410fc271 	.word	0x410fc271
 8008aa8:	410fc270 	.word	0x410fc270
 8008aac:	e000e400 	.word	0xe000e400
 8008ab0:	2000073c 	.word	0x2000073c
 8008ab4:	20000740 	.word	0x20000740
 8008ab8:	e000ed20 	.word	0xe000ed20
 8008abc:	200000c4 	.word	0x200000c4
 8008ac0:	e000ef34 	.word	0xe000ef34

08008ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	607b      	str	r3, [r7, #4]
}
 8008adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <vPortEnterCritical+0x58>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <vPortEnterCritical+0x58>)
 8008ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <vPortEnterCritical+0x58>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d10f      	bne.n	8008b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <vPortEnterCritical+0x5c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	603b      	str	r3, [r7, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <vPortEnterCritical+0x4a>
	}
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	200000c4 	.word	0x200000c4
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <vPortExitCritical+0x50>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <vPortExitCritical+0x24>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	607b      	str	r3, [r7, #4]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <vPortExitCritical+0x50>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	4a09      	ldr	r2, [pc, #36]	; (8008b74 <vPortExitCritical+0x50>)
 8008b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <vPortExitCritical+0x50>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <vPortExitCritical+0x42>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f383 8811 	msr	BASEPRI, r3
}
 8008b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	200000c4 	.word	0x200000c4
	...

08008b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b80:	f3ef 8009 	mrs	r0, PSP
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <pxCurrentTCBConst>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	f01e 0f10 	tst.w	lr, #16
 8008b90:	bf08      	it	eq
 8008b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	6010      	str	r0, [r2, #0]
 8008b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ba4:	f380 8811 	msr	BASEPRI, r0
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f7ff f8aa 	bl	8007d08 <vTaskSwitchContext>
 8008bb4:	f04f 0000 	mov.w	r0, #0
 8008bb8:	f380 8811 	msr	BASEPRI, r0
 8008bbc:	bc09      	pop	{r0, r3}
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	6808      	ldr	r0, [r1, #0]
 8008bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc6:	f01e 0f10 	tst.w	lr, #16
 8008bca:	bf08      	it	eq
 8008bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bd0:	f380 8809 	msr	PSP, r0
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst>:
 8008be0:	20000610 	.word	0x20000610
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c02:	f7fe ffc9 	bl	8007b98 <xTaskIncrementTick>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <SysTick_Handler+0x40>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f383 8811 	msr	BASEPRI, r3
}
 8008c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <vPortSetupTimerInterrupt+0x34>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <vPortSetupTimerInterrupt+0x38>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <vPortSetupTimerInterrupt+0x3c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <vPortSetupTimerInterrupt+0x40>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	099b      	lsrs	r3, r3, #6
 8008c48:	4a09      	ldr	r2, [pc, #36]	; (8008c70 <vPortSetupTimerInterrupt+0x44>)
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c4e:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <vPortSetupTimerInterrupt+0x34>)
 8008c50:	2207      	movs	r2, #7
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	e000e010 	.word	0xe000e010
 8008c64:	e000e018 	.word	0xe000e018
 8008c68:	200000b8 	.word	0x200000b8
 8008c6c:	10624dd3 	.word	0x10624dd3
 8008c70:	e000e014 	.word	0xe000e014

08008c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c84 <vPortEnableVFP+0x10>
 8008c78:	6801      	ldr	r1, [r0, #0]
 8008c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c7e:	6001      	str	r1, [r0, #0]
 8008c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c82:	bf00      	nop
 8008c84:	e000ed88 	.word	0xe000ed88

08008c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c8e:	f3ef 8305 	mrs	r3, IPSR
 8008c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	d914      	bls.n	8008cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c9a:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <vPortValidateInterruptPriority+0x70>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ca4:	4b15      	ldr	r3, [pc, #84]	; (8008cfc <vPortValidateInterruptPriority+0x74>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	7afa      	ldrb	r2, [r7, #11]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d20a      	bcs.n	8008cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <vPortValidateInterruptPriority+0x78>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <vPortValidateInterruptPriority+0x7c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d90a      	bls.n	8008cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	603b      	str	r3, [r7, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <vPortValidateInterruptPriority+0x60>
	}
 8008cea:	bf00      	nop
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	e000e3f0 	.word	0xe000e3f0
 8008cfc:	2000073c 	.word	0x2000073c
 8008d00:	e000ed0c 	.word	0xe000ed0c
 8008d04:	20000740 	.word	0x20000740

08008d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d14:	f7fe fe96 	bl	8007a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d18:	4b5b      	ldr	r3, [pc, #364]	; (8008e88 <pvPortMalloc+0x180>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d20:	f000 f920 	bl	8008f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d24:	4b59      	ldr	r3, [pc, #356]	; (8008e8c <pvPortMalloc+0x184>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8093 	bne.w	8008e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01d      	beq.n	8008d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d38:	2208      	movs	r2, #8
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d014      	beq.n	8008d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	3308      	adds	r3, #8
 8008d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <pvPortMalloc+0x6c>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	617b      	str	r3, [r7, #20]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d06e      	beq.n	8008e58 <pvPortMalloc+0x150>
 8008d7a:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <pvPortMalloc+0x188>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d869      	bhi.n	8008e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d84:	4b43      	ldr	r3, [pc, #268]	; (8008e94 <pvPortMalloc+0x18c>)
 8008d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d88:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <pvPortMalloc+0x18c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d8e:	e004      	b.n	8008d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d903      	bls.n	8008dac <pvPortMalloc+0xa4>
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f1      	bne.n	8008d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <pvPortMalloc+0x180>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d050      	beq.n	8008e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2208      	movs	r2, #8
 8008dbc:	4413      	add	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d91f      	bls.n	8008e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <pvPortMalloc+0xf8>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	613b      	str	r3, [r7, #16]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e12:	69b8      	ldr	r0, [r7, #24]
 8008e14:	f000 f908 	bl	8009028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <pvPortMalloc+0x188>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <pvPortMalloc+0x188>)
 8008e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e26:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <pvPortMalloc+0x188>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <pvPortMalloc+0x190>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d203      	bcs.n	8008e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e32:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <pvPortMalloc+0x188>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <pvPortMalloc+0x190>)
 8008e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <pvPortMalloc+0x184>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <pvPortMalloc+0x194>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3301      	adds	r3, #1
 8008e54:	4a11      	ldr	r2, [pc, #68]	; (8008e9c <pvPortMalloc+0x194>)
 8008e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e58:	f7fe fe02 	bl	8007a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <pvPortMalloc+0x174>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <pvPortMalloc+0x172>
	return pvReturn;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3728      	adds	r7, #40	; 0x28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000434c 	.word	0x2000434c
 8008e8c:	20004360 	.word	0x20004360
 8008e90:	20004350 	.word	0x20004350
 8008e94:	20004344 	.word	0x20004344
 8008e98:	20004354 	.word	0x20004354
 8008e9c:	20004358 	.word	0x20004358

08008ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d04d      	beq.n	8008f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	425b      	negs	r3, r3
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <vPortFree+0xb8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <vPortFree+0x44>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	60fb      	str	r3, [r7, #12]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <vPortFree+0x62>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	60bb      	str	r3, [r7, #8]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <vPortFree+0xb8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01e      	beq.n	8008f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11a      	bne.n	8008f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <vPortFree+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	401a      	ands	r2, r3
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f28:	f7fe fd8c 	bl	8007a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <vPortFree+0xbc>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4413      	add	r3, r2
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <vPortFree+0xbc>)
 8008f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f000 f874 	bl	8009028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <vPortFree+0xc0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <vPortFree+0xc0>)
 8008f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f4a:	f7fe fd89 	bl	8007a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f4e:	bf00      	nop
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20004360 	.word	0x20004360
 8008f5c:	20004350 	.word	0x20004350
 8008f60:	2000435c 	.word	0x2000435c

08008f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <prvHeapInit+0xac>)
 8008f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3307      	adds	r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <prvHeapInit+0xac>)
 8008f94:	4413      	add	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <prvHeapInit+0xb0>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fa2:	4b1c      	ldr	r3, [pc, #112]	; (8009014 <prvHeapInit+0xb0>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a15      	ldr	r2, [pc, #84]	; (8009018 <prvHeapInit+0xb4>)
 8008fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fc6:	4b14      	ldr	r3, [pc, #80]	; (8009018 <prvHeapInit+0xb4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <prvHeapInit+0xb4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <prvHeapInit+0xb4>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4a0a      	ldr	r2, [pc, #40]	; (800901c <prvHeapInit+0xb8>)
 8008ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	4a09      	ldr	r2, [pc, #36]	; (8009020 <prvHeapInit+0xbc>)
 8008ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <prvHeapInit+0xc0>)
 8008ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009002:	601a      	str	r2, [r3, #0]
}
 8009004:	bf00      	nop
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20000744 	.word	0x20000744
 8009014:	20004344 	.word	0x20004344
 8009018:	2000434c 	.word	0x2000434c
 800901c:	20004354 	.word	0x20004354
 8009020:	20004350 	.word	0x20004350
 8009024:	20004360 	.word	0x20004360

08009028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009030:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <prvInsertBlockIntoFreeList+0xac>)
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e002      	b.n	800903c <prvInsertBlockIntoFreeList+0x14>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d8f7      	bhi.n	8009036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	4413      	add	r3, r2
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d108      	bne.n	800906a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	441a      	add	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d118      	bne.n	80090b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d00d      	beq.n	80090a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	e008      	b.n	80090b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <prvInsertBlockIntoFreeList+0xb0>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e003      	b.n	80090b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d002      	beq.n	80090c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20004344 	.word	0x20004344
 80090d8:	2000434c 	.word	0x2000434c

080090dc <__errno>:
 80090dc:	4b01      	ldr	r3, [pc, #4]	; (80090e4 <__errno+0x8>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	200000c8 	.word	0x200000c8

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	; (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	; (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	; (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	; (800912c <__libc_init_array+0x44>)
 80090fc:	f001 fc12 	bl	800a924 <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	0800ab70 	.word	0x0800ab70
 8009124:	0800ab70 	.word	0x0800ab70
 8009128:	0800ab70 	.word	0x0800ab70
 800912c:	0800ab74 	.word	0x0800ab74

08009130 <__retarget_lock_acquire_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_release_recursive>:
 8009132:	4770      	bx	lr

08009134 <memcpy>:
 8009134:	440a      	add	r2, r1
 8009136:	4291      	cmp	r1, r2
 8009138:	f100 33ff 	add.w	r3, r0, #4294967295
 800913c:	d100      	bne.n	8009140 <memcpy+0xc>
 800913e:	4770      	bx	lr
 8009140:	b510      	push	{r4, lr}
 8009142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800914a:	4291      	cmp	r1, r2
 800914c:	d1f9      	bne.n	8009142 <memcpy+0xe>
 800914e:	bd10      	pop	{r4, pc}

08009150 <memset>:
 8009150:	4402      	add	r2, r0
 8009152:	4603      	mov	r3, r0
 8009154:	4293      	cmp	r3, r2
 8009156:	d100      	bne.n	800915a <memset+0xa>
 8009158:	4770      	bx	lr
 800915a:	f803 1b01 	strb.w	r1, [r3], #1
 800915e:	e7f9      	b.n	8009154 <memset+0x4>

08009160 <sbrk_aligned>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	4e0e      	ldr	r6, [pc, #56]	; (800919c <sbrk_aligned+0x3c>)
 8009164:	460c      	mov	r4, r1
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	4605      	mov	r5, r0
 800916a:	b911      	cbnz	r1, 8009172 <sbrk_aligned+0x12>
 800916c:	f000 f8f6 	bl	800935c <_sbrk_r>
 8009170:	6030      	str	r0, [r6, #0]
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 f8f1 	bl	800935c <_sbrk_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d00a      	beq.n	8009194 <sbrk_aligned+0x34>
 800917e:	1cc4      	adds	r4, r0, #3
 8009180:	f024 0403 	bic.w	r4, r4, #3
 8009184:	42a0      	cmp	r0, r4
 8009186:	d007      	beq.n	8009198 <sbrk_aligned+0x38>
 8009188:	1a21      	subs	r1, r4, r0
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f8e6 	bl	800935c <_sbrk_r>
 8009190:	3001      	adds	r0, #1
 8009192:	d101      	bne.n	8009198 <sbrk_aligned+0x38>
 8009194:	f04f 34ff 	mov.w	r4, #4294967295
 8009198:	4620      	mov	r0, r4
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	2000436c 	.word	0x2000436c

080091a0 <_malloc_r>:
 80091a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	1ccd      	adds	r5, r1, #3
 80091a6:	f025 0503 	bic.w	r5, r5, #3
 80091aa:	3508      	adds	r5, #8
 80091ac:	2d0c      	cmp	r5, #12
 80091ae:	bf38      	it	cc
 80091b0:	250c      	movcc	r5, #12
 80091b2:	2d00      	cmp	r5, #0
 80091b4:	4607      	mov	r7, r0
 80091b6:	db01      	blt.n	80091bc <_malloc_r+0x1c>
 80091b8:	42a9      	cmp	r1, r5
 80091ba:	d905      	bls.n	80091c8 <_malloc_r+0x28>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	2600      	movs	r6, #0
 80091c2:	4630      	mov	r0, r6
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	4e2e      	ldr	r6, [pc, #184]	; (8009284 <_malloc_r+0xe4>)
 80091ca:	f000 f8f7 	bl	80093bc <__malloc_lock>
 80091ce:	6833      	ldr	r3, [r6, #0]
 80091d0:	461c      	mov	r4, r3
 80091d2:	bb34      	cbnz	r4, 8009222 <_malloc_r+0x82>
 80091d4:	4629      	mov	r1, r5
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff ffc2 	bl	8009160 <sbrk_aligned>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	4604      	mov	r4, r0
 80091e0:	d14d      	bne.n	800927e <_malloc_r+0xde>
 80091e2:	6834      	ldr	r4, [r6, #0]
 80091e4:	4626      	mov	r6, r4
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d140      	bne.n	800926c <_malloc_r+0xcc>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	4631      	mov	r1, r6
 80091ee:	4638      	mov	r0, r7
 80091f0:	eb04 0803 	add.w	r8, r4, r3
 80091f4:	f000 f8b2 	bl	800935c <_sbrk_r>
 80091f8:	4580      	cmp	r8, r0
 80091fa:	d13a      	bne.n	8009272 <_malloc_r+0xd2>
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	3503      	adds	r5, #3
 8009200:	1a6d      	subs	r5, r5, r1
 8009202:	f025 0503 	bic.w	r5, r5, #3
 8009206:	3508      	adds	r5, #8
 8009208:	2d0c      	cmp	r5, #12
 800920a:	bf38      	it	cc
 800920c:	250c      	movcc	r5, #12
 800920e:	4629      	mov	r1, r5
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff ffa5 	bl	8009160 <sbrk_aligned>
 8009216:	3001      	adds	r0, #1
 8009218:	d02b      	beq.n	8009272 <_malloc_r+0xd2>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	442b      	add	r3, r5
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	e00e      	b.n	8009240 <_malloc_r+0xa0>
 8009222:	6822      	ldr	r2, [r4, #0]
 8009224:	1b52      	subs	r2, r2, r5
 8009226:	d41e      	bmi.n	8009266 <_malloc_r+0xc6>
 8009228:	2a0b      	cmp	r2, #11
 800922a:	d916      	bls.n	800925a <_malloc_r+0xba>
 800922c:	1961      	adds	r1, r4, r5
 800922e:	42a3      	cmp	r3, r4
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	bf18      	it	ne
 8009234:	6059      	strne	r1, [r3, #4]
 8009236:	6863      	ldr	r3, [r4, #4]
 8009238:	bf08      	it	eq
 800923a:	6031      	streq	r1, [r6, #0]
 800923c:	5162      	str	r2, [r4, r5]
 800923e:	604b      	str	r3, [r1, #4]
 8009240:	4638      	mov	r0, r7
 8009242:	f104 060b 	add.w	r6, r4, #11
 8009246:	f000 f8bf 	bl	80093c8 <__malloc_unlock>
 800924a:	f026 0607 	bic.w	r6, r6, #7
 800924e:	1d23      	adds	r3, r4, #4
 8009250:	1af2      	subs	r2, r6, r3
 8009252:	d0b6      	beq.n	80091c2 <_malloc_r+0x22>
 8009254:	1b9b      	subs	r3, r3, r6
 8009256:	50a3      	str	r3, [r4, r2]
 8009258:	e7b3      	b.n	80091c2 <_malloc_r+0x22>
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	42a3      	cmp	r3, r4
 800925e:	bf0c      	ite	eq
 8009260:	6032      	streq	r2, [r6, #0]
 8009262:	605a      	strne	r2, [r3, #4]
 8009264:	e7ec      	b.n	8009240 <_malloc_r+0xa0>
 8009266:	4623      	mov	r3, r4
 8009268:	6864      	ldr	r4, [r4, #4]
 800926a:	e7b2      	b.n	80091d2 <_malloc_r+0x32>
 800926c:	4634      	mov	r4, r6
 800926e:	6876      	ldr	r6, [r6, #4]
 8009270:	e7b9      	b.n	80091e6 <_malloc_r+0x46>
 8009272:	230c      	movs	r3, #12
 8009274:	603b      	str	r3, [r7, #0]
 8009276:	4638      	mov	r0, r7
 8009278:	f000 f8a6 	bl	80093c8 <__malloc_unlock>
 800927c:	e7a1      	b.n	80091c2 <_malloc_r+0x22>
 800927e:	6025      	str	r5, [r4, #0]
 8009280:	e7de      	b.n	8009240 <_malloc_r+0xa0>
 8009282:	bf00      	nop
 8009284:	20004368 	.word	0x20004368

08009288 <cleanup_glue>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	460c      	mov	r4, r1
 800928c:	6809      	ldr	r1, [r1, #0]
 800928e:	4605      	mov	r5, r0
 8009290:	b109      	cbz	r1, 8009296 <cleanup_glue+0xe>
 8009292:	f7ff fff9 	bl	8009288 <cleanup_glue>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929e:	f000 b899 	b.w	80093d4 <_free_r>
	...

080092a4 <_reclaim_reent>:
 80092a4:	4b2c      	ldr	r3, [pc, #176]	; (8009358 <_reclaim_reent+0xb4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4283      	cmp	r3, r0
 80092aa:	b570      	push	{r4, r5, r6, lr}
 80092ac:	4604      	mov	r4, r0
 80092ae:	d051      	beq.n	8009354 <_reclaim_reent+0xb0>
 80092b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80092b2:	b143      	cbz	r3, 80092c6 <_reclaim_reent+0x22>
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d14a      	bne.n	8009350 <_reclaim_reent+0xac>
 80092ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	b111      	cbz	r1, 80092c6 <_reclaim_reent+0x22>
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 f887 	bl	80093d4 <_free_r>
 80092c6:	6961      	ldr	r1, [r4, #20]
 80092c8:	b111      	cbz	r1, 80092d0 <_reclaim_reent+0x2c>
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f882 	bl	80093d4 <_free_r>
 80092d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092d2:	b111      	cbz	r1, 80092da <_reclaim_reent+0x36>
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 f87d 	bl	80093d4 <_free_r>
 80092da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092dc:	b111      	cbz	r1, 80092e4 <_reclaim_reent+0x40>
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f878 	bl	80093d4 <_free_r>
 80092e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092e6:	b111      	cbz	r1, 80092ee <_reclaim_reent+0x4a>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 f873 	bl	80093d4 <_free_r>
 80092ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80092f0:	b111      	cbz	r1, 80092f8 <_reclaim_reent+0x54>
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 f86e 	bl	80093d4 <_free_r>
 80092f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80092fa:	b111      	cbz	r1, 8009302 <_reclaim_reent+0x5e>
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 f869 	bl	80093d4 <_free_r>
 8009302:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009304:	b111      	cbz	r1, 800930c <_reclaim_reent+0x68>
 8009306:	4620      	mov	r0, r4
 8009308:	f000 f864 	bl	80093d4 <_free_r>
 800930c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800930e:	b111      	cbz	r1, 8009316 <_reclaim_reent+0x72>
 8009310:	4620      	mov	r0, r4
 8009312:	f000 f85f 	bl	80093d4 <_free_r>
 8009316:	69a3      	ldr	r3, [r4, #24]
 8009318:	b1e3      	cbz	r3, 8009354 <_reclaim_reent+0xb0>
 800931a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800931c:	4620      	mov	r0, r4
 800931e:	4798      	blx	r3
 8009320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009322:	b1b9      	cbz	r1, 8009354 <_reclaim_reent+0xb0>
 8009324:	4620      	mov	r0, r4
 8009326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800932a:	f7ff bfad 	b.w	8009288 <cleanup_glue>
 800932e:	5949      	ldr	r1, [r1, r5]
 8009330:	b941      	cbnz	r1, 8009344 <_reclaim_reent+0xa0>
 8009332:	3504      	adds	r5, #4
 8009334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009336:	2d80      	cmp	r5, #128	; 0x80
 8009338:	68d9      	ldr	r1, [r3, #12]
 800933a:	d1f8      	bne.n	800932e <_reclaim_reent+0x8a>
 800933c:	4620      	mov	r0, r4
 800933e:	f000 f849 	bl	80093d4 <_free_r>
 8009342:	e7ba      	b.n	80092ba <_reclaim_reent+0x16>
 8009344:	680e      	ldr	r6, [r1, #0]
 8009346:	4620      	mov	r0, r4
 8009348:	f000 f844 	bl	80093d4 <_free_r>
 800934c:	4631      	mov	r1, r6
 800934e:	e7ef      	b.n	8009330 <_reclaim_reent+0x8c>
 8009350:	2500      	movs	r5, #0
 8009352:	e7ef      	b.n	8009334 <_reclaim_reent+0x90>
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	bf00      	nop
 8009358:	200000c8 	.word	0x200000c8

0800935c <_sbrk_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d06      	ldr	r5, [pc, #24]	; (8009378 <_sbrk_r+0x1c>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7f9 f89c 	bl	80024a4 <_sbrk>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_sbrk_r+0x1a>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_sbrk_r+0x1a>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20004370 	.word	0x20004370

0800937c <siprintf>:
 800937c:	b40e      	push	{r1, r2, r3}
 800937e:	b500      	push	{lr}
 8009380:	b09c      	sub	sp, #112	; 0x70
 8009382:	ab1d      	add	r3, sp, #116	; 0x74
 8009384:	9002      	str	r0, [sp, #8]
 8009386:	9006      	str	r0, [sp, #24]
 8009388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <siprintf+0x38>)
 800938e:	9107      	str	r1, [sp, #28]
 8009390:	9104      	str	r1, [sp, #16]
 8009392:	4909      	ldr	r1, [pc, #36]	; (80093b8 <siprintf+0x3c>)
 8009394:	f853 2b04 	ldr.w	r2, [r3], #4
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	a902      	add	r1, sp, #8
 80093a0:	f000 f8c0 	bl	8009524 <_svfiprintf_r>
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	b01c      	add	sp, #112	; 0x70
 80093ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b0:	b003      	add	sp, #12
 80093b2:	4770      	bx	lr
 80093b4:	200000c8 	.word	0x200000c8
 80093b8:	ffff0208 	.word	0xffff0208

080093bc <__malloc_lock>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__malloc_lock+0x8>)
 80093be:	f7ff beb7 	b.w	8009130 <__retarget_lock_acquire_recursive>
 80093c2:	bf00      	nop
 80093c4:	20004364 	.word	0x20004364

080093c8 <__malloc_unlock>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__malloc_unlock+0x8>)
 80093ca:	f7ff beb2 	b.w	8009132 <__retarget_lock_release_recursive>
 80093ce:	bf00      	nop
 80093d0:	20004364 	.word	0x20004364

080093d4 <_free_r>:
 80093d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d6:	2900      	cmp	r1, #0
 80093d8:	d044      	beq.n	8009464 <_free_r+0x90>
 80093da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093de:	9001      	str	r0, [sp, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f1a1 0404 	sub.w	r4, r1, #4
 80093e6:	bfb8      	it	lt
 80093e8:	18e4      	addlt	r4, r4, r3
 80093ea:	f7ff ffe7 	bl	80093bc <__malloc_lock>
 80093ee:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <_free_r+0x94>)
 80093f0:	9801      	ldr	r0, [sp, #4]
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	b933      	cbnz	r3, 8009404 <_free_r+0x30>
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009400:	f7ff bfe2 	b.w	80093c8 <__malloc_unlock>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d908      	bls.n	800941a <_free_r+0x46>
 8009408:	6825      	ldr	r5, [r4, #0]
 800940a:	1961      	adds	r1, r4, r5
 800940c:	428b      	cmp	r3, r1
 800940e:	bf01      	itttt	eq
 8009410:	6819      	ldreq	r1, [r3, #0]
 8009412:	685b      	ldreq	r3, [r3, #4]
 8009414:	1949      	addeq	r1, r1, r5
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	e7ed      	b.n	80093f6 <_free_r+0x22>
 800941a:	461a      	mov	r2, r3
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b10b      	cbz	r3, 8009424 <_free_r+0x50>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x46>
 8009424:	6811      	ldr	r1, [r2, #0]
 8009426:	1855      	adds	r5, r2, r1
 8009428:	42a5      	cmp	r5, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x70>
 800942c:	6824      	ldr	r4, [r4, #0]
 800942e:	4421      	add	r1, r4
 8009430:	1854      	adds	r4, r2, r1
 8009432:	42a3      	cmp	r3, r4
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	d1e0      	bne.n	80093fa <_free_r+0x26>
 8009438:	681c      	ldr	r4, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	6053      	str	r3, [r2, #4]
 800943e:	4421      	add	r1, r4
 8009440:	6011      	str	r1, [r2, #0]
 8009442:	e7da      	b.n	80093fa <_free_r+0x26>
 8009444:	d902      	bls.n	800944c <_free_r+0x78>
 8009446:	230c      	movs	r3, #12
 8009448:	6003      	str	r3, [r0, #0]
 800944a:	e7d6      	b.n	80093fa <_free_r+0x26>
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	1961      	adds	r1, r4, r5
 8009450:	428b      	cmp	r3, r1
 8009452:	bf04      	itt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	bf04      	itt	eq
 800945c:	1949      	addeq	r1, r1, r5
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	6054      	str	r4, [r2, #4]
 8009462:	e7ca      	b.n	80093fa <_free_r+0x26>
 8009464:	b003      	add	sp, #12
 8009466:	bd30      	pop	{r4, r5, pc}
 8009468:	20004368 	.word	0x20004368

0800946c <__ssputs_r>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	688e      	ldr	r6, [r1, #8]
 8009472:	429e      	cmp	r6, r3
 8009474:	4682      	mov	sl, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4690      	mov	r8, r2
 800947a:	461f      	mov	r7, r3
 800947c:	d838      	bhi.n	80094f0 <__ssputs_r+0x84>
 800947e:	898a      	ldrh	r2, [r1, #12]
 8009480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009484:	d032      	beq.n	80094ec <__ssputs_r+0x80>
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	6909      	ldr	r1, [r1, #16]
 800948a:	eba5 0901 	sub.w	r9, r5, r1
 800948e:	6965      	ldr	r5, [r4, #20]
 8009490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009498:	3301      	adds	r3, #1
 800949a:	444b      	add	r3, r9
 800949c:	106d      	asrs	r5, r5, #1
 800949e:	429d      	cmp	r5, r3
 80094a0:	bf38      	it	cc
 80094a2:	461d      	movcc	r5, r3
 80094a4:	0553      	lsls	r3, r2, #21
 80094a6:	d531      	bpl.n	800950c <__ssputs_r+0xa0>
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7ff fe79 	bl	80091a0 <_malloc_r>
 80094ae:	4606      	mov	r6, r0
 80094b0:	b950      	cbnz	r0, 80094c8 <__ssputs_r+0x5c>
 80094b2:	230c      	movs	r3, #12
 80094b4:	f8ca 3000 	str.w	r3, [sl]
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c8:	6921      	ldr	r1, [r4, #16]
 80094ca:	464a      	mov	r2, r9
 80094cc:	f7ff fe32 	bl	8009134 <memcpy>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	6126      	str	r6, [r4, #16]
 80094de:	6165      	str	r5, [r4, #20]
 80094e0:	444e      	add	r6, r9
 80094e2:	eba5 0509 	sub.w	r5, r5, r9
 80094e6:	6026      	str	r6, [r4, #0]
 80094e8:	60a5      	str	r5, [r4, #8]
 80094ea:	463e      	mov	r6, r7
 80094ec:	42be      	cmp	r6, r7
 80094ee:	d900      	bls.n	80094f2 <__ssputs_r+0x86>
 80094f0:	463e      	mov	r6, r7
 80094f2:	6820      	ldr	r0, [r4, #0]
 80094f4:	4632      	mov	r2, r6
 80094f6:	4641      	mov	r1, r8
 80094f8:	f000 faa8 	bl	8009a4c <memmove>
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	1b9b      	subs	r3, r3, r6
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	4433      	add	r3, r6
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	2000      	movs	r0, #0
 800950a:	e7db      	b.n	80094c4 <__ssputs_r+0x58>
 800950c:	462a      	mov	r2, r5
 800950e:	f000 fab7 	bl	8009a80 <_realloc_r>
 8009512:	4606      	mov	r6, r0
 8009514:	2800      	cmp	r0, #0
 8009516:	d1e1      	bne.n	80094dc <__ssputs_r+0x70>
 8009518:	6921      	ldr	r1, [r4, #16]
 800951a:	4650      	mov	r0, sl
 800951c:	f7ff ff5a 	bl	80093d4 <_free_r>
 8009520:	e7c7      	b.n	80094b2 <__ssputs_r+0x46>
	...

08009524 <_svfiprintf_r>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	4698      	mov	r8, r3
 800952a:	898b      	ldrh	r3, [r1, #12]
 800952c:	061b      	lsls	r3, r3, #24
 800952e:	b09d      	sub	sp, #116	; 0x74
 8009530:	4607      	mov	r7, r0
 8009532:	460d      	mov	r5, r1
 8009534:	4614      	mov	r4, r2
 8009536:	d50e      	bpl.n	8009556 <_svfiprintf_r+0x32>
 8009538:	690b      	ldr	r3, [r1, #16]
 800953a:	b963      	cbnz	r3, 8009556 <_svfiprintf_r+0x32>
 800953c:	2140      	movs	r1, #64	; 0x40
 800953e:	f7ff fe2f 	bl	80091a0 <_malloc_r>
 8009542:	6028      	str	r0, [r5, #0]
 8009544:	6128      	str	r0, [r5, #16]
 8009546:	b920      	cbnz	r0, 8009552 <_svfiprintf_r+0x2e>
 8009548:	230c      	movs	r3, #12
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	e0d1      	b.n	80096f6 <_svfiprintf_r+0x1d2>
 8009552:	2340      	movs	r3, #64	; 0x40
 8009554:	616b      	str	r3, [r5, #20]
 8009556:	2300      	movs	r3, #0
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	2320      	movs	r3, #32
 800955c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009560:	f8cd 800c 	str.w	r8, [sp, #12]
 8009564:	2330      	movs	r3, #48	; 0x30
 8009566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009710 <_svfiprintf_r+0x1ec>
 800956a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800956e:	f04f 0901 	mov.w	r9, #1
 8009572:	4623      	mov	r3, r4
 8009574:	469a      	mov	sl, r3
 8009576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957a:	b10a      	cbz	r2, 8009580 <_svfiprintf_r+0x5c>
 800957c:	2a25      	cmp	r2, #37	; 0x25
 800957e:	d1f9      	bne.n	8009574 <_svfiprintf_r+0x50>
 8009580:	ebba 0b04 	subs.w	fp, sl, r4
 8009584:	d00b      	beq.n	800959e <_svfiprintf_r+0x7a>
 8009586:	465b      	mov	r3, fp
 8009588:	4622      	mov	r2, r4
 800958a:	4629      	mov	r1, r5
 800958c:	4638      	mov	r0, r7
 800958e:	f7ff ff6d 	bl	800946c <__ssputs_r>
 8009592:	3001      	adds	r0, #1
 8009594:	f000 80aa 	beq.w	80096ec <_svfiprintf_r+0x1c8>
 8009598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800959a:	445a      	add	r2, fp
 800959c:	9209      	str	r2, [sp, #36]	; 0x24
 800959e:	f89a 3000 	ldrb.w	r3, [sl]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80a2 	beq.w	80096ec <_svfiprintf_r+0x1c8>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f04f 32ff 	mov.w	r2, #4294967295
 80095ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b2:	f10a 0a01 	add.w	sl, sl, #1
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095be:	931a      	str	r3, [sp, #104]	; 0x68
 80095c0:	4654      	mov	r4, sl
 80095c2:	2205      	movs	r2, #5
 80095c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c8:	4851      	ldr	r0, [pc, #324]	; (8009710 <_svfiprintf_r+0x1ec>)
 80095ca:	f7f6 fe09 	bl	80001e0 <memchr>
 80095ce:	9a04      	ldr	r2, [sp, #16]
 80095d0:	b9d8      	cbnz	r0, 800960a <_svfiprintf_r+0xe6>
 80095d2:	06d0      	lsls	r0, r2, #27
 80095d4:	bf44      	itt	mi
 80095d6:	2320      	movmi	r3, #32
 80095d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095dc:	0711      	lsls	r1, r2, #28
 80095de:	bf44      	itt	mi
 80095e0:	232b      	movmi	r3, #43	; 0x2b
 80095e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095e6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ea:	2b2a      	cmp	r3, #42	; 0x2a
 80095ec:	d015      	beq.n	800961a <_svfiprintf_r+0xf6>
 80095ee:	9a07      	ldr	r2, [sp, #28]
 80095f0:	4654      	mov	r4, sl
 80095f2:	2000      	movs	r0, #0
 80095f4:	f04f 0c0a 	mov.w	ip, #10
 80095f8:	4621      	mov	r1, r4
 80095fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095fe:	3b30      	subs	r3, #48	; 0x30
 8009600:	2b09      	cmp	r3, #9
 8009602:	d94e      	bls.n	80096a2 <_svfiprintf_r+0x17e>
 8009604:	b1b0      	cbz	r0, 8009634 <_svfiprintf_r+0x110>
 8009606:	9207      	str	r2, [sp, #28]
 8009608:	e014      	b.n	8009634 <_svfiprintf_r+0x110>
 800960a:	eba0 0308 	sub.w	r3, r0, r8
 800960e:	fa09 f303 	lsl.w	r3, r9, r3
 8009612:	4313      	orrs	r3, r2
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	46a2      	mov	sl, r4
 8009618:	e7d2      	b.n	80095c0 <_svfiprintf_r+0x9c>
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	1d19      	adds	r1, r3, #4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	9103      	str	r1, [sp, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfbb      	ittet	lt
 8009626:	425b      	neglt	r3, r3
 8009628:	f042 0202 	orrlt.w	r2, r2, #2
 800962c:	9307      	strge	r3, [sp, #28]
 800962e:	9307      	strlt	r3, [sp, #28]
 8009630:	bfb8      	it	lt
 8009632:	9204      	strlt	r2, [sp, #16]
 8009634:	7823      	ldrb	r3, [r4, #0]
 8009636:	2b2e      	cmp	r3, #46	; 0x2e
 8009638:	d10c      	bne.n	8009654 <_svfiprintf_r+0x130>
 800963a:	7863      	ldrb	r3, [r4, #1]
 800963c:	2b2a      	cmp	r3, #42	; 0x2a
 800963e:	d135      	bne.n	80096ac <_svfiprintf_r+0x188>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	1d1a      	adds	r2, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	9203      	str	r2, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfb8      	it	lt
 800964c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009650:	3402      	adds	r4, #2
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009720 <_svfiprintf_r+0x1fc>
 8009658:	7821      	ldrb	r1, [r4, #0]
 800965a:	2203      	movs	r2, #3
 800965c:	4650      	mov	r0, sl
 800965e:	f7f6 fdbf 	bl	80001e0 <memchr>
 8009662:	b140      	cbz	r0, 8009676 <_svfiprintf_r+0x152>
 8009664:	2340      	movs	r3, #64	; 0x40
 8009666:	eba0 000a 	sub.w	r0, r0, sl
 800966a:	fa03 f000 	lsl.w	r0, r3, r0
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	4303      	orrs	r3, r0
 8009672:	3401      	adds	r4, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967a:	4826      	ldr	r0, [pc, #152]	; (8009714 <_svfiprintf_r+0x1f0>)
 800967c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009680:	2206      	movs	r2, #6
 8009682:	f7f6 fdad 	bl	80001e0 <memchr>
 8009686:	2800      	cmp	r0, #0
 8009688:	d038      	beq.n	80096fc <_svfiprintf_r+0x1d8>
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <_svfiprintf_r+0x1f4>)
 800968c:	bb1b      	cbnz	r3, 80096d6 <_svfiprintf_r+0x1b2>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	3307      	adds	r3, #7
 8009692:	f023 0307 	bic.w	r3, r3, #7
 8009696:	3308      	adds	r3, #8
 8009698:	9303      	str	r3, [sp, #12]
 800969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969c:	4433      	add	r3, r6
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	e767      	b.n	8009572 <_svfiprintf_r+0x4e>
 80096a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a6:	460c      	mov	r4, r1
 80096a8:	2001      	movs	r0, #1
 80096aa:	e7a5      	b.n	80095f8 <_svfiprintf_r+0xd4>
 80096ac:	2300      	movs	r3, #0
 80096ae:	3401      	adds	r4, #1
 80096b0:	9305      	str	r3, [sp, #20]
 80096b2:	4619      	mov	r1, r3
 80096b4:	f04f 0c0a 	mov.w	ip, #10
 80096b8:	4620      	mov	r0, r4
 80096ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096be:	3a30      	subs	r2, #48	; 0x30
 80096c0:	2a09      	cmp	r2, #9
 80096c2:	d903      	bls.n	80096cc <_svfiprintf_r+0x1a8>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0c5      	beq.n	8009654 <_svfiprintf_r+0x130>
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	e7c3      	b.n	8009654 <_svfiprintf_r+0x130>
 80096cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d0:	4604      	mov	r4, r0
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7f0      	b.n	80096b8 <_svfiprintf_r+0x194>
 80096d6:	ab03      	add	r3, sp, #12
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	462a      	mov	r2, r5
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <_svfiprintf_r+0x1f8>)
 80096de:	a904      	add	r1, sp, #16
 80096e0:	4638      	mov	r0, r7
 80096e2:	f3af 8000 	nop.w
 80096e6:	1c42      	adds	r2, r0, #1
 80096e8:	4606      	mov	r6, r0
 80096ea:	d1d6      	bne.n	800969a <_svfiprintf_r+0x176>
 80096ec:	89ab      	ldrh	r3, [r5, #12]
 80096ee:	065b      	lsls	r3, r3, #25
 80096f0:	f53f af2c 	bmi.w	800954c <_svfiprintf_r+0x28>
 80096f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f6:	b01d      	add	sp, #116	; 0x74
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	462a      	mov	r2, r5
 8009702:	4b06      	ldr	r3, [pc, #24]	; (800971c <_svfiprintf_r+0x1f8>)
 8009704:	a904      	add	r1, sp, #16
 8009706:	4638      	mov	r0, r7
 8009708:	f000 f87a 	bl	8009800 <_printf_i>
 800970c:	e7eb      	b.n	80096e6 <_svfiprintf_r+0x1c2>
 800970e:	bf00      	nop
 8009710:	0800ab00 	.word	0x0800ab00
 8009714:	0800ab0a 	.word	0x0800ab0a
 8009718:	00000000 	.word	0x00000000
 800971c:	0800946d 	.word	0x0800946d
 8009720:	0800ab06 	.word	0x0800ab06

08009724 <_printf_common>:
 8009724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009728:	4616      	mov	r6, r2
 800972a:	4699      	mov	r9, r3
 800972c:	688a      	ldr	r2, [r1, #8]
 800972e:	690b      	ldr	r3, [r1, #16]
 8009730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009734:	4293      	cmp	r3, r2
 8009736:	bfb8      	it	lt
 8009738:	4613      	movlt	r3, r2
 800973a:	6033      	str	r3, [r6, #0]
 800973c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009740:	4607      	mov	r7, r0
 8009742:	460c      	mov	r4, r1
 8009744:	b10a      	cbz	r2, 800974a <_printf_common+0x26>
 8009746:	3301      	adds	r3, #1
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	0699      	lsls	r1, r3, #26
 800974e:	bf42      	ittt	mi
 8009750:	6833      	ldrmi	r3, [r6, #0]
 8009752:	3302      	addmi	r3, #2
 8009754:	6033      	strmi	r3, [r6, #0]
 8009756:	6825      	ldr	r5, [r4, #0]
 8009758:	f015 0506 	ands.w	r5, r5, #6
 800975c:	d106      	bne.n	800976c <_printf_common+0x48>
 800975e:	f104 0a19 	add.w	sl, r4, #25
 8009762:	68e3      	ldr	r3, [r4, #12]
 8009764:	6832      	ldr	r2, [r6, #0]
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	42ab      	cmp	r3, r5
 800976a:	dc26      	bgt.n	80097ba <_printf_common+0x96>
 800976c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009770:	1e13      	subs	r3, r2, #0
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	bf18      	it	ne
 8009776:	2301      	movne	r3, #1
 8009778:	0692      	lsls	r2, r2, #26
 800977a:	d42b      	bmi.n	80097d4 <_printf_common+0xb0>
 800977c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009780:	4649      	mov	r1, r9
 8009782:	4638      	mov	r0, r7
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d01e      	beq.n	80097c8 <_printf_common+0xa4>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	68e5      	ldr	r5, [r4, #12]
 800978e:	6832      	ldr	r2, [r6, #0]
 8009790:	f003 0306 	and.w	r3, r3, #6
 8009794:	2b04      	cmp	r3, #4
 8009796:	bf08      	it	eq
 8009798:	1aad      	subeq	r5, r5, r2
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	6922      	ldr	r2, [r4, #16]
 800979e:	bf0c      	ite	eq
 80097a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097a4:	2500      	movne	r5, #0
 80097a6:	4293      	cmp	r3, r2
 80097a8:	bfc4      	itt	gt
 80097aa:	1a9b      	subgt	r3, r3, r2
 80097ac:	18ed      	addgt	r5, r5, r3
 80097ae:	2600      	movs	r6, #0
 80097b0:	341a      	adds	r4, #26
 80097b2:	42b5      	cmp	r5, r6
 80097b4:	d11a      	bne.n	80097ec <_printf_common+0xc8>
 80097b6:	2000      	movs	r0, #0
 80097b8:	e008      	b.n	80097cc <_printf_common+0xa8>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4652      	mov	r2, sl
 80097be:	4649      	mov	r1, r9
 80097c0:	4638      	mov	r0, r7
 80097c2:	47c0      	blx	r8
 80097c4:	3001      	adds	r0, #1
 80097c6:	d103      	bne.n	80097d0 <_printf_common+0xac>
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295
 80097cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d0:	3501      	adds	r5, #1
 80097d2:	e7c6      	b.n	8009762 <_printf_common+0x3e>
 80097d4:	18e1      	adds	r1, r4, r3
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	2030      	movs	r0, #48	; 0x30
 80097da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097de:	4422      	add	r2, r4
 80097e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097e8:	3302      	adds	r3, #2
 80097ea:	e7c7      	b.n	800977c <_printf_common+0x58>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4622      	mov	r2, r4
 80097f0:	4649      	mov	r1, r9
 80097f2:	4638      	mov	r0, r7
 80097f4:	47c0      	blx	r8
 80097f6:	3001      	adds	r0, #1
 80097f8:	d0e6      	beq.n	80097c8 <_printf_common+0xa4>
 80097fa:	3601      	adds	r6, #1
 80097fc:	e7d9      	b.n	80097b2 <_printf_common+0x8e>
	...

08009800 <_printf_i>:
 8009800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	7e0f      	ldrb	r7, [r1, #24]
 8009806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009808:	2f78      	cmp	r7, #120	; 0x78
 800980a:	4691      	mov	r9, r2
 800980c:	4680      	mov	r8, r0
 800980e:	460c      	mov	r4, r1
 8009810:	469a      	mov	sl, r3
 8009812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009816:	d807      	bhi.n	8009828 <_printf_i+0x28>
 8009818:	2f62      	cmp	r7, #98	; 0x62
 800981a:	d80a      	bhi.n	8009832 <_printf_i+0x32>
 800981c:	2f00      	cmp	r7, #0
 800981e:	f000 80d8 	beq.w	80099d2 <_printf_i+0x1d2>
 8009822:	2f58      	cmp	r7, #88	; 0x58
 8009824:	f000 80a3 	beq.w	800996e <_printf_i+0x16e>
 8009828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800982c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009830:	e03a      	b.n	80098a8 <_printf_i+0xa8>
 8009832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009836:	2b15      	cmp	r3, #21
 8009838:	d8f6      	bhi.n	8009828 <_printf_i+0x28>
 800983a:	a101      	add	r1, pc, #4	; (adr r1, 8009840 <_printf_i+0x40>)
 800983c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009840:	08009899 	.word	0x08009899
 8009844:	080098ad 	.word	0x080098ad
 8009848:	08009829 	.word	0x08009829
 800984c:	08009829 	.word	0x08009829
 8009850:	08009829 	.word	0x08009829
 8009854:	08009829 	.word	0x08009829
 8009858:	080098ad 	.word	0x080098ad
 800985c:	08009829 	.word	0x08009829
 8009860:	08009829 	.word	0x08009829
 8009864:	08009829 	.word	0x08009829
 8009868:	08009829 	.word	0x08009829
 800986c:	080099b9 	.word	0x080099b9
 8009870:	080098dd 	.word	0x080098dd
 8009874:	0800999b 	.word	0x0800999b
 8009878:	08009829 	.word	0x08009829
 800987c:	08009829 	.word	0x08009829
 8009880:	080099db 	.word	0x080099db
 8009884:	08009829 	.word	0x08009829
 8009888:	080098dd 	.word	0x080098dd
 800988c:	08009829 	.word	0x08009829
 8009890:	08009829 	.word	0x08009829
 8009894:	080099a3 	.word	0x080099a3
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	1d1a      	adds	r2, r3, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	602a      	str	r2, [r5, #0]
 80098a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098a8:	2301      	movs	r3, #1
 80098aa:	e0a3      	b.n	80099f4 <_printf_i+0x1f4>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	6829      	ldr	r1, [r5, #0]
 80098b0:	0606      	lsls	r6, r0, #24
 80098b2:	f101 0304 	add.w	r3, r1, #4
 80098b6:	d50a      	bpl.n	80098ce <_printf_i+0xce>
 80098b8:	680e      	ldr	r6, [r1, #0]
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	2e00      	cmp	r6, #0
 80098be:	da03      	bge.n	80098c8 <_printf_i+0xc8>
 80098c0:	232d      	movs	r3, #45	; 0x2d
 80098c2:	4276      	negs	r6, r6
 80098c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098c8:	485e      	ldr	r0, [pc, #376]	; (8009a44 <_printf_i+0x244>)
 80098ca:	230a      	movs	r3, #10
 80098cc:	e019      	b.n	8009902 <_printf_i+0x102>
 80098ce:	680e      	ldr	r6, [r1, #0]
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098d6:	bf18      	it	ne
 80098d8:	b236      	sxthne	r6, r6
 80098da:	e7ef      	b.n	80098bc <_printf_i+0xbc>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	1d19      	adds	r1, r3, #4
 80098e2:	6029      	str	r1, [r5, #0]
 80098e4:	0601      	lsls	r1, r0, #24
 80098e6:	d501      	bpl.n	80098ec <_printf_i+0xec>
 80098e8:	681e      	ldr	r6, [r3, #0]
 80098ea:	e002      	b.n	80098f2 <_printf_i+0xf2>
 80098ec:	0646      	lsls	r6, r0, #25
 80098ee:	d5fb      	bpl.n	80098e8 <_printf_i+0xe8>
 80098f0:	881e      	ldrh	r6, [r3, #0]
 80098f2:	4854      	ldr	r0, [pc, #336]	; (8009a44 <_printf_i+0x244>)
 80098f4:	2f6f      	cmp	r7, #111	; 0x6f
 80098f6:	bf0c      	ite	eq
 80098f8:	2308      	moveq	r3, #8
 80098fa:	230a      	movne	r3, #10
 80098fc:	2100      	movs	r1, #0
 80098fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009902:	6865      	ldr	r5, [r4, #4]
 8009904:	60a5      	str	r5, [r4, #8]
 8009906:	2d00      	cmp	r5, #0
 8009908:	bfa2      	ittt	ge
 800990a:	6821      	ldrge	r1, [r4, #0]
 800990c:	f021 0104 	bicge.w	r1, r1, #4
 8009910:	6021      	strge	r1, [r4, #0]
 8009912:	b90e      	cbnz	r6, 8009918 <_printf_i+0x118>
 8009914:	2d00      	cmp	r5, #0
 8009916:	d04d      	beq.n	80099b4 <_printf_i+0x1b4>
 8009918:	4615      	mov	r5, r2
 800991a:	fbb6 f1f3 	udiv	r1, r6, r3
 800991e:	fb03 6711 	mls	r7, r3, r1, r6
 8009922:	5dc7      	ldrb	r7, [r0, r7]
 8009924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009928:	4637      	mov	r7, r6
 800992a:	42bb      	cmp	r3, r7
 800992c:	460e      	mov	r6, r1
 800992e:	d9f4      	bls.n	800991a <_printf_i+0x11a>
 8009930:	2b08      	cmp	r3, #8
 8009932:	d10b      	bne.n	800994c <_printf_i+0x14c>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	07de      	lsls	r6, r3, #31
 8009938:	d508      	bpl.n	800994c <_printf_i+0x14c>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	6861      	ldr	r1, [r4, #4]
 800993e:	4299      	cmp	r1, r3
 8009940:	bfde      	ittt	le
 8009942:	2330      	movle	r3, #48	; 0x30
 8009944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800994c:	1b52      	subs	r2, r2, r5
 800994e:	6122      	str	r2, [r4, #16]
 8009950:	f8cd a000 	str.w	sl, [sp]
 8009954:	464b      	mov	r3, r9
 8009956:	aa03      	add	r2, sp, #12
 8009958:	4621      	mov	r1, r4
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fee2 	bl	8009724 <_printf_common>
 8009960:	3001      	adds	r0, #1
 8009962:	d14c      	bne.n	80099fe <_printf_i+0x1fe>
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	b004      	add	sp, #16
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	4835      	ldr	r0, [pc, #212]	; (8009a44 <_printf_i+0x244>)
 8009970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	f851 6b04 	ldr.w	r6, [r1], #4
 800997c:	6029      	str	r1, [r5, #0]
 800997e:	061d      	lsls	r5, r3, #24
 8009980:	d514      	bpl.n	80099ac <_printf_i+0x1ac>
 8009982:	07df      	lsls	r7, r3, #31
 8009984:	bf44      	itt	mi
 8009986:	f043 0320 	orrmi.w	r3, r3, #32
 800998a:	6023      	strmi	r3, [r4, #0]
 800998c:	b91e      	cbnz	r6, 8009996 <_printf_i+0x196>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	f023 0320 	bic.w	r3, r3, #32
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	2310      	movs	r3, #16
 8009998:	e7b0      	b.n	80098fc <_printf_i+0xfc>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	f043 0320 	orr.w	r3, r3, #32
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	2378      	movs	r3, #120	; 0x78
 80099a4:	4828      	ldr	r0, [pc, #160]	; (8009a48 <_printf_i+0x248>)
 80099a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099aa:	e7e3      	b.n	8009974 <_printf_i+0x174>
 80099ac:	0659      	lsls	r1, r3, #25
 80099ae:	bf48      	it	mi
 80099b0:	b2b6      	uxthmi	r6, r6
 80099b2:	e7e6      	b.n	8009982 <_printf_i+0x182>
 80099b4:	4615      	mov	r5, r2
 80099b6:	e7bb      	b.n	8009930 <_printf_i+0x130>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	6826      	ldr	r6, [r4, #0]
 80099bc:	6961      	ldr	r1, [r4, #20]
 80099be:	1d18      	adds	r0, r3, #4
 80099c0:	6028      	str	r0, [r5, #0]
 80099c2:	0635      	lsls	r5, r6, #24
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	d501      	bpl.n	80099cc <_printf_i+0x1cc>
 80099c8:	6019      	str	r1, [r3, #0]
 80099ca:	e002      	b.n	80099d2 <_printf_i+0x1d2>
 80099cc:	0670      	lsls	r0, r6, #25
 80099ce:	d5fb      	bpl.n	80099c8 <_printf_i+0x1c8>
 80099d0:	8019      	strh	r1, [r3, #0]
 80099d2:	2300      	movs	r3, #0
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	4615      	mov	r5, r2
 80099d8:	e7ba      	b.n	8009950 <_printf_i+0x150>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	681d      	ldr	r5, [r3, #0]
 80099e2:	6862      	ldr	r2, [r4, #4]
 80099e4:	2100      	movs	r1, #0
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7f6 fbfa 	bl	80001e0 <memchr>
 80099ec:	b108      	cbz	r0, 80099f2 <_printf_i+0x1f2>
 80099ee:	1b40      	subs	r0, r0, r5
 80099f0:	6060      	str	r0, [r4, #4]
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	2300      	movs	r3, #0
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	e7a8      	b.n	8009950 <_printf_i+0x150>
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4649      	mov	r1, r9
 8009a04:	4640      	mov	r0, r8
 8009a06:	47d0      	blx	sl
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d0ab      	beq.n	8009964 <_printf_i+0x164>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	d413      	bmi.n	8009a3a <_printf_i+0x23a>
 8009a12:	68e0      	ldr	r0, [r4, #12]
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	4298      	cmp	r0, r3
 8009a18:	bfb8      	it	lt
 8009a1a:	4618      	movlt	r0, r3
 8009a1c:	e7a4      	b.n	8009968 <_printf_i+0x168>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4632      	mov	r2, r6
 8009a22:	4649      	mov	r1, r9
 8009a24:	4640      	mov	r0, r8
 8009a26:	47d0      	blx	sl
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d09b      	beq.n	8009964 <_printf_i+0x164>
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	68e3      	ldr	r3, [r4, #12]
 8009a30:	9903      	ldr	r1, [sp, #12]
 8009a32:	1a5b      	subs	r3, r3, r1
 8009a34:	42ab      	cmp	r3, r5
 8009a36:	dcf2      	bgt.n	8009a1e <_printf_i+0x21e>
 8009a38:	e7eb      	b.n	8009a12 <_printf_i+0x212>
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	f104 0619 	add.w	r6, r4, #25
 8009a40:	e7f5      	b.n	8009a2e <_printf_i+0x22e>
 8009a42:	bf00      	nop
 8009a44:	0800ab11 	.word	0x0800ab11
 8009a48:	0800ab22 	.word	0x0800ab22

08009a4c <memmove>:
 8009a4c:	4288      	cmp	r0, r1
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	eb01 0402 	add.w	r4, r1, r2
 8009a54:	d902      	bls.n	8009a5c <memmove+0x10>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	4623      	mov	r3, r4
 8009a5a:	d807      	bhi.n	8009a6c <memmove+0x20>
 8009a5c:	1e43      	subs	r3, r0, #1
 8009a5e:	42a1      	cmp	r1, r4
 8009a60:	d008      	beq.n	8009a74 <memmove+0x28>
 8009a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a6a:	e7f8      	b.n	8009a5e <memmove+0x12>
 8009a6c:	4402      	add	r2, r0
 8009a6e:	4601      	mov	r1, r0
 8009a70:	428a      	cmp	r2, r1
 8009a72:	d100      	bne.n	8009a76 <memmove+0x2a>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a7e:	e7f7      	b.n	8009a70 <memmove+0x24>

08009a80 <_realloc_r>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	4680      	mov	r8, r0
 8009a86:	4614      	mov	r4, r2
 8009a88:	460e      	mov	r6, r1
 8009a8a:	b921      	cbnz	r1, 8009a96 <_realloc_r+0x16>
 8009a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	4611      	mov	r1, r2
 8009a92:	f7ff bb85 	b.w	80091a0 <_malloc_r>
 8009a96:	b92a      	cbnz	r2, 8009aa4 <_realloc_r+0x24>
 8009a98:	f7ff fc9c 	bl	80093d4 <_free_r>
 8009a9c:	4625      	mov	r5, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	f000 f81b 	bl	8009ade <_malloc_usable_size_r>
 8009aa8:	4284      	cmp	r4, r0
 8009aaa:	4607      	mov	r7, r0
 8009aac:	d802      	bhi.n	8009ab4 <_realloc_r+0x34>
 8009aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ab2:	d812      	bhi.n	8009ada <_realloc_r+0x5a>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7ff fb72 	bl	80091a0 <_malloc_r>
 8009abc:	4605      	mov	r5, r0
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d0ed      	beq.n	8009a9e <_realloc_r+0x1e>
 8009ac2:	42bc      	cmp	r4, r7
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	bf28      	it	cs
 8009aca:	463a      	movcs	r2, r7
 8009acc:	f7ff fb32 	bl	8009134 <memcpy>
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff fc7e 	bl	80093d4 <_free_r>
 8009ad8:	e7e1      	b.n	8009a9e <_realloc_r+0x1e>
 8009ada:	4635      	mov	r5, r6
 8009adc:	e7df      	b.n	8009a9e <_realloc_r+0x1e>

08009ade <_malloc_usable_size_r>:
 8009ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae2:	1f18      	subs	r0, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfbc      	itt	lt
 8009ae8:	580b      	ldrlt	r3, [r1, r0]
 8009aea:	18c0      	addlt	r0, r0, r3
 8009aec:	4770      	bx	lr
	...

08009af0 <pow>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	ed2d 8b02 	vpush	{d8}
 8009af6:	eeb0 8a40 	vmov.f32	s16, s0
 8009afa:	eef0 8a60 	vmov.f32	s17, s1
 8009afe:	ec55 4b11 	vmov	r4, r5, d1
 8009b02:	f000 f865 	bl	8009bd0 <__ieee754_pow>
 8009b06:	4622      	mov	r2, r4
 8009b08:	462b      	mov	r3, r5
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	ec57 6b10 	vmov	r6, r7, d0
 8009b12:	f7f7 f80b 	bl	8000b2c <__aeabi_dcmpun>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d13b      	bne.n	8009b92 <pow+0xa2>
 8009b1a:	ec51 0b18 	vmov	r0, r1, d8
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2300      	movs	r3, #0
 8009b22:	f7f6 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b26:	b1b8      	cbz	r0, 8009b58 <pow+0x68>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d146      	bne.n	8009bc6 <pow+0xd6>
 8009b38:	ec45 4b10 	vmov	d0, r4, r5
 8009b3c:	f000 fe61 	bl	800a802 <finite>
 8009b40:	b338      	cbz	r0, 8009b92 <pow+0xa2>
 8009b42:	2200      	movs	r2, #0
 8009b44:	2300      	movs	r3, #0
 8009b46:	4620      	mov	r0, r4
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7f6 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8009b4e:	b300      	cbz	r0, 8009b92 <pow+0xa2>
 8009b50:	f7ff fac4 	bl	80090dc <__errno>
 8009b54:	2322      	movs	r3, #34	; 0x22
 8009b56:	e01b      	b.n	8009b90 <pow+0xa0>
 8009b58:	ec47 6b10 	vmov	d0, r6, r7
 8009b5c:	f000 fe51 	bl	800a802 <finite>
 8009b60:	b9e0      	cbnz	r0, 8009b9c <pow+0xac>
 8009b62:	eeb0 0a48 	vmov.f32	s0, s16
 8009b66:	eef0 0a68 	vmov.f32	s1, s17
 8009b6a:	f000 fe4a 	bl	800a802 <finite>
 8009b6e:	b1a8      	cbz	r0, 8009b9c <pow+0xac>
 8009b70:	ec45 4b10 	vmov	d0, r4, r5
 8009b74:	f000 fe45 	bl	800a802 <finite>
 8009b78:	b180      	cbz	r0, 8009b9c <pow+0xac>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 ffd3 	bl	8000b2c <__aeabi_dcmpun>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0e2      	beq.n	8009b50 <pow+0x60>
 8009b8a:	f7ff faa7 	bl	80090dc <__errno>
 8009b8e:	2321      	movs	r3, #33	; 0x21
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	ecbd 8b02 	vpop	{d8}
 8009b96:	ec47 6b10 	vmov	d0, r6, r7
 8009b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d0f2      	beq.n	8009b92 <pow+0xa2>
 8009bac:	eeb0 0a48 	vmov.f32	s0, s16
 8009bb0:	eef0 0a68 	vmov.f32	s1, s17
 8009bb4:	f000 fe25 	bl	800a802 <finite>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d0ea      	beq.n	8009b92 <pow+0xa2>
 8009bbc:	ec45 4b10 	vmov	d0, r4, r5
 8009bc0:	f000 fe1f 	bl	800a802 <finite>
 8009bc4:	e7c3      	b.n	8009b4e <pow+0x5e>
 8009bc6:	4f01      	ldr	r7, [pc, #4]	; (8009bcc <pow+0xdc>)
 8009bc8:	2600      	movs	r6, #0
 8009bca:	e7e2      	b.n	8009b92 <pow+0xa2>
 8009bcc:	3ff00000 	.word	0x3ff00000

08009bd0 <__ieee754_pow>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	ed2d 8b06 	vpush	{d8-d10}
 8009bd8:	b089      	sub	sp, #36	; 0x24
 8009bda:	ed8d 1b00 	vstr	d1, [sp]
 8009bde:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009be2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009be6:	ea58 0102 	orrs.w	r1, r8, r2
 8009bea:	ec57 6b10 	vmov	r6, r7, d0
 8009bee:	d115      	bne.n	8009c1c <__ieee754_pow+0x4c>
 8009bf0:	19b3      	adds	r3, r6, r6
 8009bf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009bf6:	4152      	adcs	r2, r2
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	4b89      	ldr	r3, [pc, #548]	; (8009e20 <__ieee754_pow+0x250>)
 8009bfc:	4193      	sbcs	r3, r2
 8009bfe:	f080 84d2 	bcs.w	800a5a6 <__ieee754_pow+0x9d6>
 8009c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c06:	4630      	mov	r0, r6
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7f6 fb3f 	bl	800028c <__adddf3>
 8009c0e:	ec41 0b10 	vmov	d0, r0, r1
 8009c12:	b009      	add	sp, #36	; 0x24
 8009c14:	ecbd 8b06 	vpop	{d8-d10}
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	4b81      	ldr	r3, [pc, #516]	; (8009e24 <__ieee754_pow+0x254>)
 8009c1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009c22:	429c      	cmp	r4, r3
 8009c24:	ee10 aa10 	vmov	sl, s0
 8009c28:	463d      	mov	r5, r7
 8009c2a:	dc06      	bgt.n	8009c3a <__ieee754_pow+0x6a>
 8009c2c:	d101      	bne.n	8009c32 <__ieee754_pow+0x62>
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d1e7      	bne.n	8009c02 <__ieee754_pow+0x32>
 8009c32:	4598      	cmp	r8, r3
 8009c34:	dc01      	bgt.n	8009c3a <__ieee754_pow+0x6a>
 8009c36:	d10f      	bne.n	8009c58 <__ieee754_pow+0x88>
 8009c38:	b172      	cbz	r2, 8009c58 <__ieee754_pow+0x88>
 8009c3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009c3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009c42:	ea55 050a 	orrs.w	r5, r5, sl
 8009c46:	d1dc      	bne.n	8009c02 <__ieee754_pow+0x32>
 8009c48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c4c:	18db      	adds	r3, r3, r3
 8009c4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009c52:	4152      	adcs	r2, r2
 8009c54:	429d      	cmp	r5, r3
 8009c56:	e7d0      	b.n	8009bfa <__ieee754_pow+0x2a>
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	da3b      	bge.n	8009cd4 <__ieee754_pow+0x104>
 8009c5c:	4b72      	ldr	r3, [pc, #456]	; (8009e28 <__ieee754_pow+0x258>)
 8009c5e:	4598      	cmp	r8, r3
 8009c60:	dc51      	bgt.n	8009d06 <__ieee754_pow+0x136>
 8009c62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009c66:	4598      	cmp	r8, r3
 8009c68:	f340 84ac 	ble.w	800a5c4 <__ieee754_pow+0x9f4>
 8009c6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c74:	2b14      	cmp	r3, #20
 8009c76:	dd0f      	ble.n	8009c98 <__ieee754_pow+0xc8>
 8009c78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009c7c:	fa22 f103 	lsr.w	r1, r2, r3
 8009c80:	fa01 f303 	lsl.w	r3, r1, r3
 8009c84:	4293      	cmp	r3, r2
 8009c86:	f040 849d 	bne.w	800a5c4 <__ieee754_pow+0x9f4>
 8009c8a:	f001 0101 	and.w	r1, r1, #1
 8009c8e:	f1c1 0302 	rsb	r3, r1, #2
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	b182      	cbz	r2, 8009cb8 <__ieee754_pow+0xe8>
 8009c96:	e05f      	b.n	8009d58 <__ieee754_pow+0x188>
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	d15b      	bne.n	8009d54 <__ieee754_pow+0x184>
 8009c9c:	f1c3 0314 	rsb	r3, r3, #20
 8009ca0:	fa48 f103 	asr.w	r1, r8, r3
 8009ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca8:	4543      	cmp	r3, r8
 8009caa:	f040 8488 	bne.w	800a5be <__ieee754_pow+0x9ee>
 8009cae:	f001 0101 	and.w	r1, r1, #1
 8009cb2:	f1c1 0302 	rsb	r3, r1, #2
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	4b5c      	ldr	r3, [pc, #368]	; (8009e2c <__ieee754_pow+0x25c>)
 8009cba:	4598      	cmp	r8, r3
 8009cbc:	d132      	bne.n	8009d24 <__ieee754_pow+0x154>
 8009cbe:	f1b9 0f00 	cmp.w	r9, #0
 8009cc2:	f280 8478 	bge.w	800a5b6 <__ieee754_pow+0x9e6>
 8009cc6:	4959      	ldr	r1, [pc, #356]	; (8009e2c <__ieee754_pow+0x25c>)
 8009cc8:	4632      	mov	r2, r6
 8009cca:	463b      	mov	r3, r7
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f7f6 fdbd 	bl	800084c <__aeabi_ddiv>
 8009cd2:	e79c      	b.n	8009c0e <__ieee754_pow+0x3e>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	d13d      	bne.n	8009d58 <__ieee754_pow+0x188>
 8009cdc:	4b51      	ldr	r3, [pc, #324]	; (8009e24 <__ieee754_pow+0x254>)
 8009cde:	4598      	cmp	r8, r3
 8009ce0:	d1ea      	bne.n	8009cb8 <__ieee754_pow+0xe8>
 8009ce2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ce6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009cea:	ea53 030a 	orrs.w	r3, r3, sl
 8009cee:	f000 845a 	beq.w	800a5a6 <__ieee754_pow+0x9d6>
 8009cf2:	4b4f      	ldr	r3, [pc, #316]	; (8009e30 <__ieee754_pow+0x260>)
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	dd08      	ble.n	8009d0a <__ieee754_pow+0x13a>
 8009cf8:	f1b9 0f00 	cmp.w	r9, #0
 8009cfc:	f2c0 8457 	blt.w	800a5ae <__ieee754_pow+0x9de>
 8009d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d04:	e783      	b.n	8009c0e <__ieee754_pow+0x3e>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e7e5      	b.n	8009cd6 <__ieee754_pow+0x106>
 8009d0a:	f1b9 0f00 	cmp.w	r9, #0
 8009d0e:	f04f 0000 	mov.w	r0, #0
 8009d12:	f04f 0100 	mov.w	r1, #0
 8009d16:	f6bf af7a 	bge.w	8009c0e <__ieee754_pow+0x3e>
 8009d1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009d1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d22:	e774      	b.n	8009c0e <__ieee754_pow+0x3e>
 8009d24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009d28:	d106      	bne.n	8009d38 <__ieee754_pow+0x168>
 8009d2a:	4632      	mov	r2, r6
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fc61 	bl	80005f8 <__aeabi_dmul>
 8009d36:	e76a      	b.n	8009c0e <__ieee754_pow+0x3e>
 8009d38:	4b3e      	ldr	r3, [pc, #248]	; (8009e34 <__ieee754_pow+0x264>)
 8009d3a:	4599      	cmp	r9, r3
 8009d3c:	d10c      	bne.n	8009d58 <__ieee754_pow+0x188>
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	db0a      	blt.n	8009d58 <__ieee754_pow+0x188>
 8009d42:	ec47 6b10 	vmov	d0, r6, r7
 8009d46:	b009      	add	sp, #36	; 0x24
 8009d48:	ecbd 8b06 	vpop	{d8-d10}
 8009d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	f000 bc6c 	b.w	800a62c <__ieee754_sqrt>
 8009d54:	2300      	movs	r3, #0
 8009d56:	9304      	str	r3, [sp, #16]
 8009d58:	ec47 6b10 	vmov	d0, r6, r7
 8009d5c:	f000 fd48 	bl	800a7f0 <fabs>
 8009d60:	ec51 0b10 	vmov	r0, r1, d0
 8009d64:	f1ba 0f00 	cmp.w	sl, #0
 8009d68:	d129      	bne.n	8009dbe <__ieee754_pow+0x1ee>
 8009d6a:	b124      	cbz	r4, 8009d76 <__ieee754_pow+0x1a6>
 8009d6c:	4b2f      	ldr	r3, [pc, #188]	; (8009e2c <__ieee754_pow+0x25c>)
 8009d6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d123      	bne.n	8009dbe <__ieee754_pow+0x1ee>
 8009d76:	f1b9 0f00 	cmp.w	r9, #0
 8009d7a:	da05      	bge.n	8009d88 <__ieee754_pow+0x1b8>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	2000      	movs	r0, #0
 8009d82:	492a      	ldr	r1, [pc, #168]	; (8009e2c <__ieee754_pow+0x25c>)
 8009d84:	f7f6 fd62 	bl	800084c <__aeabi_ddiv>
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	f6bf af40 	bge.w	8009c0e <__ieee754_pow+0x3e>
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d98:	4323      	orrs	r3, r4
 8009d9a:	d108      	bne.n	8009dae <__ieee754_pow+0x1de>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4610      	mov	r0, r2
 8009da2:	4619      	mov	r1, r3
 8009da4:	f7f6 fa70 	bl	8000288 <__aeabi_dsub>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e78f      	b.n	8009cce <__ieee754_pow+0xfe>
 8009dae:	9b04      	ldr	r3, [sp, #16]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f47f af2c 	bne.w	8009c0e <__ieee754_pow+0x3e>
 8009db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dba:	4619      	mov	r1, r3
 8009dbc:	e727      	b.n	8009c0e <__ieee754_pow+0x3e>
 8009dbe:	0feb      	lsrs	r3, r5, #31
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	9306      	str	r3, [sp, #24]
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d102      	bne.n	8009dd2 <__ieee754_pow+0x202>
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	e7e6      	b.n	8009da0 <__ieee754_pow+0x1d0>
 8009dd2:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <__ieee754_pow+0x268>)
 8009dd4:	4598      	cmp	r8, r3
 8009dd6:	f340 80fb 	ble.w	8009fd0 <__ieee754_pow+0x400>
 8009dda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009dde:	4598      	cmp	r8, r3
 8009de0:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <__ieee754_pow+0x260>)
 8009de2:	dd0c      	ble.n	8009dfe <__ieee754_pow+0x22e>
 8009de4:	429c      	cmp	r4, r3
 8009de6:	dc0f      	bgt.n	8009e08 <__ieee754_pow+0x238>
 8009de8:	f1b9 0f00 	cmp.w	r9, #0
 8009dec:	da0f      	bge.n	8009e0e <__ieee754_pow+0x23e>
 8009dee:	2000      	movs	r0, #0
 8009df0:	b009      	add	sp, #36	; 0x24
 8009df2:	ecbd 8b06 	vpop	{d8-d10}
 8009df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	f000 bcf0 	b.w	800a7de <__math_oflow>
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	dbf2      	blt.n	8009de8 <__ieee754_pow+0x218>
 8009e02:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <__ieee754_pow+0x25c>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	dd19      	ble.n	8009e3c <__ieee754_pow+0x26c>
 8009e08:	f1b9 0f00 	cmp.w	r9, #0
 8009e0c:	dcef      	bgt.n	8009dee <__ieee754_pow+0x21e>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	b009      	add	sp, #36	; 0x24
 8009e12:	ecbd 8b06 	vpop	{d8-d10}
 8009e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	f000 bcd7 	b.w	800a7cc <__math_uflow>
 8009e1e:	bf00      	nop
 8009e20:	fff00000 	.word	0xfff00000
 8009e24:	7ff00000 	.word	0x7ff00000
 8009e28:	433fffff 	.word	0x433fffff
 8009e2c:	3ff00000 	.word	0x3ff00000
 8009e30:	3fefffff 	.word	0x3fefffff
 8009e34:	3fe00000 	.word	0x3fe00000
 8009e38:	41e00000 	.word	0x41e00000
 8009e3c:	4b60      	ldr	r3, [pc, #384]	; (8009fc0 <__ieee754_pow+0x3f0>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f7f6 fa22 	bl	8000288 <__aeabi_dsub>
 8009e44:	a354      	add	r3, pc, #336	; (adr r3, 8009f98 <__ieee754_pow+0x3c8>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	f7f6 fbd3 	bl	80005f8 <__aeabi_dmul>
 8009e52:	a353      	add	r3, pc, #332	; (adr r3, 8009fa0 <__ieee754_pow+0x3d0>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	4606      	mov	r6, r0
 8009e5a:	460f      	mov	r7, r1
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	4b57      	ldr	r3, [pc, #348]	; (8009fc4 <__ieee754_pow+0x3f4>)
 8009e66:	4682      	mov	sl, r0
 8009e68:	468b      	mov	fp, r1
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	f7f6 fbc2 	bl	80005f8 <__aeabi_dmul>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	a14b      	add	r1, pc, #300	; (adr r1, 8009fa8 <__ieee754_pow+0x3d8>)
 8009e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e7e:	f7f6 fa03 	bl	8000288 <__aeabi_dsub>
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	2000      	movs	r0, #0
 8009e90:	494d      	ldr	r1, [pc, #308]	; (8009fc8 <__ieee754_pow+0x3f8>)
 8009e92:	f7f6 f9f9 	bl	8000288 <__aeabi_dsub>
 8009e96:	4622      	mov	r2, r4
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fba9 	bl	80005f8 <__aeabi_dmul>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	a33f      	add	r3, pc, #252	; (adr r3, 8009fb0 <__ieee754_pow+0x3e0>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	f7f6 f9e0 	bl	8000288 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4689      	mov	r9, r1
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	f7f6 f9da 	bl	800028c <__adddf3>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4632      	mov	r2, r6
 8009edc:	463b      	mov	r3, r7
 8009ede:	4604      	mov	r4, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	f7f6 f9d1 	bl	8000288 <__aeabi_dsub>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 f9cb 	bl	8000288 <__aeabi_dsub>
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	9a06      	ldr	r2, [sp, #24]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	4682      	mov	sl, r0
 8009efc:	468b      	mov	fp, r1
 8009efe:	f040 81e7 	bne.w	800a2d0 <__ieee754_pow+0x700>
 8009f02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009fb8 <__ieee754_pow+0x3e8>
 8009f06:	eeb0 8a47 	vmov.f32	s16, s14
 8009f0a:	eef0 8a67 	vmov.f32	s17, s15
 8009f0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f12:	2600      	movs	r6, #0
 8009f14:	4632      	mov	r2, r6
 8009f16:	463b      	mov	r3, r7
 8009f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f1c:	f7f6 f9b4 	bl	8000288 <__aeabi_dsub>
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	f7f6 fb68 	bl	80005f8 <__aeabi_dmul>
 8009f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4689      	mov	r9, r1
 8009f30:	4650      	mov	r0, sl
 8009f32:	4659      	mov	r1, fp
 8009f34:	f7f6 fb60 	bl	80005f8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	4649      	mov	r1, r9
 8009f40:	f7f6 f9a4 	bl	800028c <__adddf3>
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4689      	mov	r9, r1
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	460b      	mov	r3, r1
 8009f56:	4604      	mov	r4, r0
 8009f58:	460d      	mov	r5, r1
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7f6 f994 	bl	800028c <__adddf3>
 8009f64:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <__ieee754_pow+0x3fc>)
 8009f66:	4299      	cmp	r1, r3
 8009f68:	ec45 4b19 	vmov	d9, r4, r5
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	460f      	mov	r7, r1
 8009f70:	468b      	mov	fp, r1
 8009f72:	f340 82f1 	ble.w	800a558 <__ieee754_pow+0x988>
 8009f76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f7e:	4303      	orrs	r3, r0
 8009f80:	f000 81e4 	beq.w	800a34c <__ieee754_pow+0x77c>
 8009f84:	ec51 0b18 	vmov	r0, r1, d8
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f7f6 fda6 	bl	8000adc <__aeabi_dcmplt>
 8009f90:	3800      	subs	r0, #0
 8009f92:	bf18      	it	ne
 8009f94:	2001      	movne	r0, #1
 8009f96:	e72b      	b.n	8009df0 <__ieee754_pow+0x220>
 8009f98:	60000000 	.word	0x60000000
 8009f9c:	3ff71547 	.word	0x3ff71547
 8009fa0:	f85ddf44 	.word	0xf85ddf44
 8009fa4:	3e54ae0b 	.word	0x3e54ae0b
 8009fa8:	55555555 	.word	0x55555555
 8009fac:	3fd55555 	.word	0x3fd55555
 8009fb0:	652b82fe 	.word	0x652b82fe
 8009fb4:	3ff71547 	.word	0x3ff71547
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	bff00000 	.word	0xbff00000
 8009fc0:	3ff00000 	.word	0x3ff00000
 8009fc4:	3fd00000 	.word	0x3fd00000
 8009fc8:	3fe00000 	.word	0x3fe00000
 8009fcc:	408fffff 	.word	0x408fffff
 8009fd0:	4bd5      	ldr	r3, [pc, #852]	; (800a328 <__ieee754_pow+0x758>)
 8009fd2:	402b      	ands	r3, r5
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	b92b      	cbnz	r3, 8009fe4 <__ieee754_pow+0x414>
 8009fd8:	4bd4      	ldr	r3, [pc, #848]	; (800a32c <__ieee754_pow+0x75c>)
 8009fda:	f7f6 fb0d 	bl	80005f8 <__aeabi_dmul>
 8009fde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	1523      	asrs	r3, r4, #20
 8009fe6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fea:	4413      	add	r3, r2
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	4bd0      	ldr	r3, [pc, #832]	; (800a330 <__ieee754_pow+0x760>)
 8009ff0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ff4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ffe:	dd08      	ble.n	800a012 <__ieee754_pow+0x442>
 800a000:	4bcc      	ldr	r3, [pc, #816]	; (800a334 <__ieee754_pow+0x764>)
 800a002:	429c      	cmp	r4, r3
 800a004:	f340 8162 	ble.w	800a2cc <__ieee754_pow+0x6fc>
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	3301      	adds	r3, #1
 800a00c:	9305      	str	r3, [sp, #20]
 800a00e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a012:	2400      	movs	r4, #0
 800a014:	00e3      	lsls	r3, r4, #3
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	4bc7      	ldr	r3, [pc, #796]	; (800a338 <__ieee754_pow+0x768>)
 800a01a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a01e:	ed93 7b00 	vldr	d7, [r3]
 800a022:	4629      	mov	r1, r5
 800a024:	ec53 2b17 	vmov	r2, r3, d7
 800a028:	eeb0 9a47 	vmov.f32	s18, s14
 800a02c:	eef0 9a67 	vmov.f32	s19, s15
 800a030:	4682      	mov	sl, r0
 800a032:	f7f6 f929 	bl	8000288 <__aeabi_dsub>
 800a036:	4652      	mov	r2, sl
 800a038:	4606      	mov	r6, r0
 800a03a:	460f      	mov	r7, r1
 800a03c:	462b      	mov	r3, r5
 800a03e:	ec51 0b19 	vmov	r0, r1, d9
 800a042:	f7f6 f923 	bl	800028c <__adddf3>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	2000      	movs	r0, #0
 800a04c:	49bb      	ldr	r1, [pc, #748]	; (800a33c <__ieee754_pow+0x76c>)
 800a04e:	f7f6 fbfd 	bl	800084c <__aeabi_ddiv>
 800a052:	ec41 0b1a 	vmov	d10, r0, r1
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 facb 	bl	80005f8 <__aeabi_dmul>
 800a062:	2300      	movs	r3, #0
 800a064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a06e:	46ab      	mov	fp, r5
 800a070:	106d      	asrs	r5, r5, #1
 800a072:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a076:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a07a:	ec41 0b18 	vmov	d8, r0, r1
 800a07e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a082:	2200      	movs	r2, #0
 800a084:	4640      	mov	r0, r8
 800a086:	4649      	mov	r1, r9
 800a088:	4614      	mov	r4, r2
 800a08a:	461d      	mov	r5, r3
 800a08c:	f7f6 fab4 	bl	80005f8 <__aeabi_dmul>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4630      	mov	r0, r6
 800a096:	4639      	mov	r1, r7
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	ec53 2b19 	vmov	r2, r3, d9
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	460f      	mov	r7, r1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 f8ee 	bl	8000288 <__aeabi_dsub>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	4659      	mov	r1, fp
 800a0b4:	f7f6 f8e8 	bl	8000288 <__aeabi_dsub>
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	f7f6 fa9c 	bl	80005f8 <__aeabi_dmul>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	f7f6 f8de 	bl	8000288 <__aeabi_dsub>
 800a0cc:	ec53 2b1a 	vmov	r2, r3, d10
 800a0d0:	f7f6 fa92 	bl	80005f8 <__aeabi_dmul>
 800a0d4:	ec53 2b18 	vmov	r2, r3, d8
 800a0d8:	ec41 0b19 	vmov	d9, r0, r1
 800a0dc:	ec51 0b18 	vmov	r0, r1, d8
 800a0e0:	f7f6 fa8a 	bl	80005f8 <__aeabi_dmul>
 800a0e4:	a37c      	add	r3, pc, #496	; (adr r3, 800a2d8 <__ieee754_pow+0x708>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	f7f6 fa83 	bl	80005f8 <__aeabi_dmul>
 800a0f2:	a37b      	add	r3, pc, #492	; (adr r3, 800a2e0 <__ieee754_pow+0x710>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f7f6 f8c8 	bl	800028c <__adddf3>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	f7f6 fa7a 	bl	80005f8 <__aeabi_dmul>
 800a104:	a378      	add	r3, pc, #480	; (adr r3, 800a2e8 <__ieee754_pow+0x718>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f8bf 	bl	800028c <__adddf3>
 800a10e:	4622      	mov	r2, r4
 800a110:	462b      	mov	r3, r5
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	a376      	add	r3, pc, #472	; (adr r3, 800a2f0 <__ieee754_pow+0x720>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f8b6 	bl	800028c <__adddf3>
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	f7f6 fa68 	bl	80005f8 <__aeabi_dmul>
 800a128:	a373      	add	r3, pc, #460	; (adr r3, 800a2f8 <__ieee754_pow+0x728>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 f8ad 	bl	800028c <__adddf3>
 800a132:	4622      	mov	r2, r4
 800a134:	462b      	mov	r3, r5
 800a136:	f7f6 fa5f 	bl	80005f8 <__aeabi_dmul>
 800a13a:	a371      	add	r3, pc, #452	; (adr r3, 800a300 <__ieee754_pow+0x730>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 f8a4 	bl	800028c <__adddf3>
 800a144:	4622      	mov	r2, r4
 800a146:	4606      	mov	r6, r0
 800a148:	460f      	mov	r7, r1
 800a14a:	462b      	mov	r3, r5
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fa4c 	bl	80005f8 <__aeabi_dmul>
 800a160:	4642      	mov	r2, r8
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
 800a166:	464b      	mov	r3, r9
 800a168:	ec51 0b18 	vmov	r0, r1, d8
 800a16c:	f7f6 f88e 	bl	800028c <__adddf3>
 800a170:	ec53 2b19 	vmov	r2, r3, d9
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	f7f6 f886 	bl	800028c <__adddf3>
 800a180:	4642      	mov	r2, r8
 800a182:	4682      	mov	sl, r0
 800a184:	468b      	mov	fp, r1
 800a186:	464b      	mov	r3, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	4649      	mov	r1, r9
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	4b6b      	ldr	r3, [pc, #428]	; (800a340 <__ieee754_pow+0x770>)
 800a192:	2200      	movs	r2, #0
 800a194:	4606      	mov	r6, r0
 800a196:	460f      	mov	r7, r1
 800a198:	f7f6 f878 	bl	800028c <__adddf3>
 800a19c:	4652      	mov	r2, sl
 800a19e:	465b      	mov	r3, fp
 800a1a0:	f7f6 f874 	bl	800028c <__adddf3>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	460d      	mov	r5, r1
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 fa21 	bl	80005f8 <__aeabi_dmul>
 800a1b6:	4b62      	ldr	r3, [pc, #392]	; (800a340 <__ieee754_pow+0x770>)
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	4689      	mov	r9, r1
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 f861 	bl	8000288 <__aeabi_dsub>
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	f7f6 f85d 	bl	8000288 <__aeabi_dsub>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	ec53 2b18 	vmov	r2, r3, d8
 800a1de:	f7f6 fa0b 	bl	80005f8 <__aeabi_dmul>
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	460f      	mov	r7, r1
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	ec51 0b19 	vmov	r0, r1, d9
 800a1ee:	f7f6 fa03 	bl	80005f8 <__aeabi_dmul>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	f7f6 f847 	bl	800028c <__adddf3>
 800a1fe:	4606      	mov	r6, r0
 800a200:	460f      	mov	r7, r1
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 f83f 	bl	800028c <__adddf3>
 800a20e:	a33e      	add	r3, pc, #248	; (adr r3, 800a308 <__ieee754_pow+0x738>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	2000      	movs	r0, #0
 800a216:	4604      	mov	r4, r0
 800a218:	460d      	mov	r5, r1
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	4642      	mov	r2, r8
 800a220:	ec41 0b18 	vmov	d8, r0, r1
 800a224:	464b      	mov	r3, r9
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 f82d 	bl	8000288 <__aeabi_dsub>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f827 	bl	8000288 <__aeabi_dsub>
 800a23a:	a335      	add	r3, pc, #212	; (adr r3, 800a310 <__ieee754_pow+0x740>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	a334      	add	r3, pc, #208	; (adr r3, 800a318 <__ieee754_pow+0x748>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	f7f6 f9d1 	bl	80005f8 <__aeabi_dmul>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4630      	mov	r0, r6
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 f815 	bl	800028c <__adddf3>
 800a262:	9a07      	ldr	r2, [sp, #28]
 800a264:	4b37      	ldr	r3, [pc, #220]	; (800a344 <__ieee754_pow+0x774>)
 800a266:	4413      	add	r3, r2
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f6 f80e 	bl	800028c <__adddf3>
 800a270:	4682      	mov	sl, r0
 800a272:	9805      	ldr	r0, [sp, #20]
 800a274:	468b      	mov	fp, r1
 800a276:	f7f6 f955 	bl	8000524 <__aeabi_i2d>
 800a27a:	9a07      	ldr	r2, [sp, #28]
 800a27c:	4b32      	ldr	r3, [pc, #200]	; (800a348 <__ieee754_pow+0x778>)
 800a27e:	4413      	add	r3, r2
 800a280:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	4652      	mov	r2, sl
 800a28a:	465b      	mov	r3, fp
 800a28c:	ec51 0b18 	vmov	r0, r1, d8
 800a290:	f7f5 fffc 	bl	800028c <__adddf3>
 800a294:	4642      	mov	r2, r8
 800a296:	464b      	mov	r3, r9
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f5 fff4 	bl	800028c <__adddf3>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	4642      	mov	r2, r8
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	f7f5 ffe7 	bl	8000288 <__aeabi_dsub>
 800a2ba:	ec53 2b18 	vmov	r2, r3, d8
 800a2be:	f7f5 ffe3 	bl	8000288 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	e610      	b.n	8009eee <__ieee754_pow+0x31e>
 800a2cc:	2401      	movs	r4, #1
 800a2ce:	e6a1      	b.n	800a014 <__ieee754_pow+0x444>
 800a2d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a320 <__ieee754_pow+0x750>
 800a2d4:	e617      	b.n	8009f06 <__ieee754_pow+0x336>
 800a2d6:	bf00      	nop
 800a2d8:	4a454eef 	.word	0x4a454eef
 800a2dc:	3fca7e28 	.word	0x3fca7e28
 800a2e0:	93c9db65 	.word	0x93c9db65
 800a2e4:	3fcd864a 	.word	0x3fcd864a
 800a2e8:	a91d4101 	.word	0xa91d4101
 800a2ec:	3fd17460 	.word	0x3fd17460
 800a2f0:	518f264d 	.word	0x518f264d
 800a2f4:	3fd55555 	.word	0x3fd55555
 800a2f8:	db6fabff 	.word	0xdb6fabff
 800a2fc:	3fdb6db6 	.word	0x3fdb6db6
 800a300:	33333303 	.word	0x33333303
 800a304:	3fe33333 	.word	0x3fe33333
 800a308:	e0000000 	.word	0xe0000000
 800a30c:	3feec709 	.word	0x3feec709
 800a310:	dc3a03fd 	.word	0xdc3a03fd
 800a314:	3feec709 	.word	0x3feec709
 800a318:	145b01f5 	.word	0x145b01f5
 800a31c:	be3e2fe0 	.word	0xbe3e2fe0
 800a320:	00000000 	.word	0x00000000
 800a324:	3ff00000 	.word	0x3ff00000
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	43400000 	.word	0x43400000
 800a330:	0003988e 	.word	0x0003988e
 800a334:	000bb679 	.word	0x000bb679
 800a338:	0800ab38 	.word	0x0800ab38
 800a33c:	3ff00000 	.word	0x3ff00000
 800a340:	40080000 	.word	0x40080000
 800a344:	0800ab58 	.word	0x0800ab58
 800a348:	0800ab48 	.word	0x0800ab48
 800a34c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a624 <__ieee754_pow+0xa54>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f5 ff99 	bl	800028c <__adddf3>
 800a35a:	4622      	mov	r2, r4
 800a35c:	ec41 0b1a 	vmov	d10, r0, r1
 800a360:	462b      	mov	r3, r5
 800a362:	4630      	mov	r0, r6
 800a364:	4639      	mov	r1, r7
 800a366:	f7f5 ff8f 	bl	8000288 <__aeabi_dsub>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	ec51 0b1a 	vmov	r0, r1, d10
 800a372:	f7f6 fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 800a376:	2800      	cmp	r0, #0
 800a378:	f47f ae04 	bne.w	8009f84 <__ieee754_pow+0x3b4>
 800a37c:	4aa4      	ldr	r2, [pc, #656]	; (800a610 <__ieee754_pow+0xa40>)
 800a37e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a382:	4293      	cmp	r3, r2
 800a384:	f340 8108 	ble.w	800a598 <__ieee754_pow+0x9c8>
 800a388:	151b      	asrs	r3, r3, #20
 800a38a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a38e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a392:	fa4a f303 	asr.w	r3, sl, r3
 800a396:	445b      	add	r3, fp
 800a398:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a39c:	4e9d      	ldr	r6, [pc, #628]	; (800a614 <__ieee754_pow+0xa44>)
 800a39e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3a2:	4116      	asrs	r6, r2
 800a3a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	ea23 0106 	bic.w	r1, r3, r6
 800a3ae:	f1c2 0214 	rsb	r2, r2, #20
 800a3b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a3b6:	fa4a fa02 	asr.w	sl, sl, r2
 800a3ba:	f1bb 0f00 	cmp.w	fp, #0
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	bfb8      	it	lt
 800a3c8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3cc:	f7f5 ff5c 	bl	8000288 <__aeabi_dsub>
 800a3d0:	ec41 0b19 	vmov	d9, r0, r1
 800a3d4:	4642      	mov	r2, r8
 800a3d6:	464b      	mov	r3, r9
 800a3d8:	ec51 0b19 	vmov	r0, r1, d9
 800a3dc:	f7f5 ff56 	bl	800028c <__adddf3>
 800a3e0:	a37b      	add	r3, pc, #492	; (adr r3, 800a5d0 <__ieee754_pow+0xa00>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	f7f6 f904 	bl	80005f8 <__aeabi_dmul>
 800a3f0:	ec53 2b19 	vmov	r2, r3, d9
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	460f      	mov	r7, r1
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f5 ff44 	bl	8000288 <__aeabi_dsub>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4640      	mov	r0, r8
 800a406:	4649      	mov	r1, r9
 800a408:	f7f5 ff3e 	bl	8000288 <__aeabi_dsub>
 800a40c:	a372      	add	r3, pc, #456	; (adr r3, 800a5d8 <__ieee754_pow+0xa08>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f6 f8f1 	bl	80005f8 <__aeabi_dmul>
 800a416:	a372      	add	r3, pc, #456	; (adr r3, 800a5e0 <__ieee754_pow+0xa10>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f6 f8e8 	bl	80005f8 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f5 ff2c 	bl	800028c <__adddf3>
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4630      	mov	r0, r6
 800a43e:	4639      	mov	r1, r7
 800a440:	f7f5 ff24 	bl	800028c <__adddf3>
 800a444:	4632      	mov	r2, r6
 800a446:	463b      	mov	r3, r7
 800a448:	4680      	mov	r8, r0
 800a44a:	4689      	mov	r9, r1
 800a44c:	f7f5 ff1c 	bl	8000288 <__aeabi_dsub>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff16 	bl	8000288 <__aeabi_dsub>
 800a45c:	4642      	mov	r2, r8
 800a45e:	4606      	mov	r6, r0
 800a460:	460f      	mov	r7, r1
 800a462:	464b      	mov	r3, r9
 800a464:	4640      	mov	r0, r8
 800a466:	4649      	mov	r1, r9
 800a468:	f7f6 f8c6 	bl	80005f8 <__aeabi_dmul>
 800a46c:	a35e      	add	r3, pc, #376	; (adr r3, 800a5e8 <__ieee754_pow+0xa18>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4604      	mov	r4, r0
 800a474:	460d      	mov	r5, r1
 800a476:	f7f6 f8bf 	bl	80005f8 <__aeabi_dmul>
 800a47a:	a35d      	add	r3, pc, #372	; (adr r3, 800a5f0 <__ieee754_pow+0xa20>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f5 ff02 	bl	8000288 <__aeabi_dsub>
 800a484:	4622      	mov	r2, r4
 800a486:	462b      	mov	r3, r5
 800a488:	f7f6 f8b6 	bl	80005f8 <__aeabi_dmul>
 800a48c:	a35a      	add	r3, pc, #360	; (adr r3, 800a5f8 <__ieee754_pow+0xa28>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fefb 	bl	800028c <__adddf3>
 800a496:	4622      	mov	r2, r4
 800a498:	462b      	mov	r3, r5
 800a49a:	f7f6 f8ad 	bl	80005f8 <__aeabi_dmul>
 800a49e:	a358      	add	r3, pc, #352	; (adr r3, 800a600 <__ieee754_pow+0xa30>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f7f5 fef0 	bl	8000288 <__aeabi_dsub>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	f7f6 f8a4 	bl	80005f8 <__aeabi_dmul>
 800a4b0:	a355      	add	r3, pc, #340	; (adr r3, 800a608 <__ieee754_pow+0xa38>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f5 fee9 	bl	800028c <__adddf3>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	462b      	mov	r3, r5
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4640      	mov	r0, r8
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	f7f5 fedd 	bl	8000288 <__aeabi_dsub>
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f6 f88d 	bl	80005f8 <__aeabi_dmul>
 800a4de:	2200      	movs	r2, #0
 800a4e0:	ec41 0b19 	vmov	d9, r0, r1
 800a4e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 fecc 	bl	8000288 <__aeabi_dsub>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	ec51 0b19 	vmov	r0, r1, d9
 800a4f8:	f7f6 f9a8 	bl	800084c <__aeabi_ddiv>
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	463b      	mov	r3, r7
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	f7f6 f876 	bl	80005f8 <__aeabi_dmul>
 800a50c:	4632      	mov	r2, r6
 800a50e:	463b      	mov	r3, r7
 800a510:	f7f5 febc 	bl	800028c <__adddf3>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4620      	mov	r0, r4
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	f7f5 feb0 	bl	8000288 <__aeabi_dsub>
 800a528:	460b      	mov	r3, r1
 800a52a:	4602      	mov	r2, r0
 800a52c:	493a      	ldr	r1, [pc, #232]	; (800a618 <__ieee754_pow+0xa48>)
 800a52e:	2000      	movs	r0, #0
 800a530:	f7f5 feaa 	bl	8000288 <__aeabi_dsub>
 800a534:	ec41 0b10 	vmov	d0, r0, r1
 800a538:	ee10 3a90 	vmov	r3, s1
 800a53c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a544:	da2b      	bge.n	800a59e <__ieee754_pow+0x9ce>
 800a546:	4650      	mov	r0, sl
 800a548:	f000 f966 	bl	800a818 <scalbn>
 800a54c:	ec51 0b10 	vmov	r0, r1, d0
 800a550:	ec53 2b18 	vmov	r2, r3, d8
 800a554:	f7ff bbed 	b.w	8009d32 <__ieee754_pow+0x162>
 800a558:	4b30      	ldr	r3, [pc, #192]	; (800a61c <__ieee754_pow+0xa4c>)
 800a55a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a55e:	429e      	cmp	r6, r3
 800a560:	f77f af0c 	ble.w	800a37c <__ieee754_pow+0x7ac>
 800a564:	4b2e      	ldr	r3, [pc, #184]	; (800a620 <__ieee754_pow+0xa50>)
 800a566:	440b      	add	r3, r1
 800a568:	4303      	orrs	r3, r0
 800a56a:	d009      	beq.n	800a580 <__ieee754_pow+0x9b0>
 800a56c:	ec51 0b18 	vmov	r0, r1, d8
 800a570:	2200      	movs	r2, #0
 800a572:	2300      	movs	r3, #0
 800a574:	f7f6 fab2 	bl	8000adc <__aeabi_dcmplt>
 800a578:	3800      	subs	r0, #0
 800a57a:	bf18      	it	ne
 800a57c:	2001      	movne	r0, #1
 800a57e:	e447      	b.n	8009e10 <__ieee754_pow+0x240>
 800a580:	4622      	mov	r2, r4
 800a582:	462b      	mov	r3, r5
 800a584:	f7f5 fe80 	bl	8000288 <__aeabi_dsub>
 800a588:	4642      	mov	r2, r8
 800a58a:	464b      	mov	r3, r9
 800a58c:	f7f6 faba 	bl	8000b04 <__aeabi_dcmpge>
 800a590:	2800      	cmp	r0, #0
 800a592:	f43f aef3 	beq.w	800a37c <__ieee754_pow+0x7ac>
 800a596:	e7e9      	b.n	800a56c <__ieee754_pow+0x99c>
 800a598:	f04f 0a00 	mov.w	sl, #0
 800a59c:	e71a      	b.n	800a3d4 <__ieee754_pow+0x804>
 800a59e:	ec51 0b10 	vmov	r0, r1, d0
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	e7d4      	b.n	800a550 <__ieee754_pow+0x980>
 800a5a6:	491c      	ldr	r1, [pc, #112]	; (800a618 <__ieee754_pow+0xa48>)
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f7ff bb30 	b.w	8009c0e <__ieee754_pow+0x3e>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	f7ff bb2c 	b.w	8009c0e <__ieee754_pow+0x3e>
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	f7ff bb28 	b.w	8009c0e <__ieee754_pow+0x3e>
 800a5be:	9204      	str	r2, [sp, #16]
 800a5c0:	f7ff bb7a 	b.w	8009cb8 <__ieee754_pow+0xe8>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f7ff bb64 	b.w	8009c92 <__ieee754_pow+0xc2>
 800a5ca:	bf00      	nop
 800a5cc:	f3af 8000 	nop.w
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	3fe62e43 	.word	0x3fe62e43
 800a5d8:	fefa39ef 	.word	0xfefa39ef
 800a5dc:	3fe62e42 	.word	0x3fe62e42
 800a5e0:	0ca86c39 	.word	0x0ca86c39
 800a5e4:	be205c61 	.word	0xbe205c61
 800a5e8:	72bea4d0 	.word	0x72bea4d0
 800a5ec:	3e663769 	.word	0x3e663769
 800a5f0:	c5d26bf1 	.word	0xc5d26bf1
 800a5f4:	3ebbbd41 	.word	0x3ebbbd41
 800a5f8:	af25de2c 	.word	0xaf25de2c
 800a5fc:	3f11566a 	.word	0x3f11566a
 800a600:	16bebd93 	.word	0x16bebd93
 800a604:	3f66c16c 	.word	0x3f66c16c
 800a608:	5555553e 	.word	0x5555553e
 800a60c:	3fc55555 	.word	0x3fc55555
 800a610:	3fe00000 	.word	0x3fe00000
 800a614:	000fffff 	.word	0x000fffff
 800a618:	3ff00000 	.word	0x3ff00000
 800a61c:	4090cbff 	.word	0x4090cbff
 800a620:	3f6f3400 	.word	0x3f6f3400
 800a624:	652b82fe 	.word	0x652b82fe
 800a628:	3c971547 	.word	0x3c971547

0800a62c <__ieee754_sqrt>:
 800a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a630:	ec55 4b10 	vmov	r4, r5, d0
 800a634:	4e55      	ldr	r6, [pc, #340]	; (800a78c <__ieee754_sqrt+0x160>)
 800a636:	43ae      	bics	r6, r5
 800a638:	ee10 0a10 	vmov	r0, s0
 800a63c:	ee10 3a10 	vmov	r3, s0
 800a640:	462a      	mov	r2, r5
 800a642:	4629      	mov	r1, r5
 800a644:	d110      	bne.n	800a668 <__ieee754_sqrt+0x3c>
 800a646:	ee10 2a10 	vmov	r2, s0
 800a64a:	462b      	mov	r3, r5
 800a64c:	f7f5 ffd4 	bl	80005f8 <__aeabi_dmul>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 fe18 	bl	800028c <__adddf3>
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	ec45 4b10 	vmov	d0, r4, r5
 800a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a668:	2d00      	cmp	r5, #0
 800a66a:	dc10      	bgt.n	800a68e <__ieee754_sqrt+0x62>
 800a66c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a670:	4330      	orrs	r0, r6
 800a672:	d0f5      	beq.n	800a660 <__ieee754_sqrt+0x34>
 800a674:	b15d      	cbz	r5, 800a68e <__ieee754_sqrt+0x62>
 800a676:	ee10 2a10 	vmov	r2, s0
 800a67a:	462b      	mov	r3, r5
 800a67c:	ee10 0a10 	vmov	r0, s0
 800a680:	f7f5 fe02 	bl	8000288 <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	f7f6 f8e0 	bl	800084c <__aeabi_ddiv>
 800a68c:	e7e6      	b.n	800a65c <__ieee754_sqrt+0x30>
 800a68e:	1512      	asrs	r2, r2, #20
 800a690:	d074      	beq.n	800a77c <__ieee754_sqrt+0x150>
 800a692:	07d4      	lsls	r4, r2, #31
 800a694:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a698:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a69c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a6a0:	bf5e      	ittt	pl
 800a6a2:	0fda      	lsrpl	r2, r3, #31
 800a6a4:	005b      	lslpl	r3, r3, #1
 800a6a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a6aa:	2400      	movs	r4, #0
 800a6ac:	0fda      	lsrs	r2, r3, #31
 800a6ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a6b2:	107f      	asrs	r7, r7, #1
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	2516      	movs	r5, #22
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a6be:	1886      	adds	r6, r0, r2
 800a6c0:	428e      	cmp	r6, r1
 800a6c2:	bfde      	ittt	le
 800a6c4:	1b89      	suble	r1, r1, r6
 800a6c6:	18b0      	addle	r0, r6, r2
 800a6c8:	18a4      	addle	r4, r4, r2
 800a6ca:	0049      	lsls	r1, r1, #1
 800a6cc:	3d01      	subs	r5, #1
 800a6ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a6d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a6d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6da:	d1f0      	bne.n	800a6be <__ieee754_sqrt+0x92>
 800a6dc:	462a      	mov	r2, r5
 800a6de:	f04f 0e20 	mov.w	lr, #32
 800a6e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a6e6:	4281      	cmp	r1, r0
 800a6e8:	eb06 0c05 	add.w	ip, r6, r5
 800a6ec:	dc02      	bgt.n	800a6f4 <__ieee754_sqrt+0xc8>
 800a6ee:	d113      	bne.n	800a718 <__ieee754_sqrt+0xec>
 800a6f0:	459c      	cmp	ip, r3
 800a6f2:	d811      	bhi.n	800a718 <__ieee754_sqrt+0xec>
 800a6f4:	f1bc 0f00 	cmp.w	ip, #0
 800a6f8:	eb0c 0506 	add.w	r5, ip, r6
 800a6fc:	da43      	bge.n	800a786 <__ieee754_sqrt+0x15a>
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	db41      	blt.n	800a786 <__ieee754_sqrt+0x15a>
 800a702:	f100 0801 	add.w	r8, r0, #1
 800a706:	1a09      	subs	r1, r1, r0
 800a708:	459c      	cmp	ip, r3
 800a70a:	bf88      	it	hi
 800a70c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a710:	eba3 030c 	sub.w	r3, r3, ip
 800a714:	4432      	add	r2, r6
 800a716:	4640      	mov	r0, r8
 800a718:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a71c:	f1be 0e01 	subs.w	lr, lr, #1
 800a720:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a724:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a728:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a72c:	d1db      	bne.n	800a6e6 <__ieee754_sqrt+0xba>
 800a72e:	430b      	orrs	r3, r1
 800a730:	d006      	beq.n	800a740 <__ieee754_sqrt+0x114>
 800a732:	1c50      	adds	r0, r2, #1
 800a734:	bf13      	iteet	ne
 800a736:	3201      	addne	r2, #1
 800a738:	3401      	addeq	r4, #1
 800a73a:	4672      	moveq	r2, lr
 800a73c:	f022 0201 	bicne.w	r2, r2, #1
 800a740:	1063      	asrs	r3, r4, #1
 800a742:	0852      	lsrs	r2, r2, #1
 800a744:	07e1      	lsls	r1, r4, #31
 800a746:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a74a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a74e:	bf48      	it	mi
 800a750:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a754:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a758:	4614      	mov	r4, r2
 800a75a:	e781      	b.n	800a660 <__ieee754_sqrt+0x34>
 800a75c:	0ad9      	lsrs	r1, r3, #11
 800a75e:	3815      	subs	r0, #21
 800a760:	055b      	lsls	r3, r3, #21
 800a762:	2900      	cmp	r1, #0
 800a764:	d0fa      	beq.n	800a75c <__ieee754_sqrt+0x130>
 800a766:	02cd      	lsls	r5, r1, #11
 800a768:	d50a      	bpl.n	800a780 <__ieee754_sqrt+0x154>
 800a76a:	f1c2 0420 	rsb	r4, r2, #32
 800a76e:	fa23 f404 	lsr.w	r4, r3, r4
 800a772:	1e55      	subs	r5, r2, #1
 800a774:	4093      	lsls	r3, r2
 800a776:	4321      	orrs	r1, r4
 800a778:	1b42      	subs	r2, r0, r5
 800a77a:	e78a      	b.n	800a692 <__ieee754_sqrt+0x66>
 800a77c:	4610      	mov	r0, r2
 800a77e:	e7f0      	b.n	800a762 <__ieee754_sqrt+0x136>
 800a780:	0049      	lsls	r1, r1, #1
 800a782:	3201      	adds	r2, #1
 800a784:	e7ef      	b.n	800a766 <__ieee754_sqrt+0x13a>
 800a786:	4680      	mov	r8, r0
 800a788:	e7bd      	b.n	800a706 <__ieee754_sqrt+0xda>
 800a78a:	bf00      	nop
 800a78c:	7ff00000 	.word	0x7ff00000

0800a790 <with_errno>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	460d      	mov	r5, r1
 800a796:	4616      	mov	r6, r2
 800a798:	f7fe fca0 	bl	80090dc <__errno>
 800a79c:	4629      	mov	r1, r5
 800a79e:	6006      	str	r6, [r0, #0]
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}

0800a7a4 <xflow>:
 800a7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	461d      	mov	r5, r3
 800a7aa:	b108      	cbz	r0, 800a7b0 <xflow+0xc>
 800a7ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a7b0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	2222      	movs	r2, #34	; 0x22
 800a7c2:	b003      	add	sp, #12
 800a7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c8:	f7ff bfe2 	b.w	800a790 <with_errno>

0800a7cc <__math_uflow>:
 800a7cc:	b508      	push	{r3, lr}
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7d4:	f7ff ffe6 	bl	800a7a4 <xflow>
 800a7d8:	ec41 0b10 	vmov	d0, r0, r1
 800a7dc:	bd08      	pop	{r3, pc}

0800a7de <__math_oflow>:
 800a7de:	b508      	push	{r3, lr}
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a7e6:	f7ff ffdd 	bl	800a7a4 <xflow>
 800a7ea:	ec41 0b10 	vmov	d0, r0, r1
 800a7ee:	bd08      	pop	{r3, pc}

0800a7f0 <fabs>:
 800a7f0:	ec51 0b10 	vmov	r0, r1, d0
 800a7f4:	ee10 2a10 	vmov	r2, s0
 800a7f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7fc:	ec43 2b10 	vmov	d0, r2, r3
 800a800:	4770      	bx	lr

0800a802 <finite>:
 800a802:	b082      	sub	sp, #8
 800a804:	ed8d 0b00 	vstr	d0, [sp]
 800a808:	9801      	ldr	r0, [sp, #4]
 800a80a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a80e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a812:	0fc0      	lsrs	r0, r0, #31
 800a814:	b002      	add	sp, #8
 800a816:	4770      	bx	lr

0800a818 <scalbn>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	ec55 4b10 	vmov	r4, r5, d0
 800a81e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a822:	4606      	mov	r6, r0
 800a824:	462b      	mov	r3, r5
 800a826:	b99a      	cbnz	r2, 800a850 <scalbn+0x38>
 800a828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a82c:	4323      	orrs	r3, r4
 800a82e:	d036      	beq.n	800a89e <scalbn+0x86>
 800a830:	4b39      	ldr	r3, [pc, #228]	; (800a918 <scalbn+0x100>)
 800a832:	4629      	mov	r1, r5
 800a834:	ee10 0a10 	vmov	r0, s0
 800a838:	2200      	movs	r2, #0
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	4b37      	ldr	r3, [pc, #220]	; (800a91c <scalbn+0x104>)
 800a840:	429e      	cmp	r6, r3
 800a842:	4604      	mov	r4, r0
 800a844:	460d      	mov	r5, r1
 800a846:	da10      	bge.n	800a86a <scalbn+0x52>
 800a848:	a32b      	add	r3, pc, #172	; (adr r3, 800a8f8 <scalbn+0xe0>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	e03a      	b.n	800a8c6 <scalbn+0xae>
 800a850:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a854:	428a      	cmp	r2, r1
 800a856:	d10c      	bne.n	800a872 <scalbn+0x5a>
 800a858:	ee10 2a10 	vmov	r2, s0
 800a85c:	4620      	mov	r0, r4
 800a85e:	4629      	mov	r1, r5
 800a860:	f7f5 fd14 	bl	800028c <__adddf3>
 800a864:	4604      	mov	r4, r0
 800a866:	460d      	mov	r5, r1
 800a868:	e019      	b.n	800a89e <scalbn+0x86>
 800a86a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a86e:	460b      	mov	r3, r1
 800a870:	3a36      	subs	r2, #54	; 0x36
 800a872:	4432      	add	r2, r6
 800a874:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a878:	428a      	cmp	r2, r1
 800a87a:	dd08      	ble.n	800a88e <scalbn+0x76>
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	a120      	add	r1, pc, #128	; (adr r1, 800a900 <scalbn+0xe8>)
 800a880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a884:	da1c      	bge.n	800a8c0 <scalbn+0xa8>
 800a886:	a120      	add	r1, pc, #128	; (adr r1, 800a908 <scalbn+0xf0>)
 800a888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a88c:	e018      	b.n	800a8c0 <scalbn+0xa8>
 800a88e:	2a00      	cmp	r2, #0
 800a890:	dd08      	ble.n	800a8a4 <scalbn+0x8c>
 800a892:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a89a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a89e:	ec45 4b10 	vmov	d0, r4, r5
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a8a8:	da19      	bge.n	800a8de <scalbn+0xc6>
 800a8aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a8ae:	429e      	cmp	r6, r3
 800a8b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a8b4:	dd0a      	ble.n	800a8cc <scalbn+0xb4>
 800a8b6:	a112      	add	r1, pc, #72	; (adr r1, 800a900 <scalbn+0xe8>)
 800a8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1e2      	bne.n	800a886 <scalbn+0x6e>
 800a8c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a900 <scalbn+0xe8>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	e7cb      	b.n	800a864 <scalbn+0x4c>
 800a8cc:	a10a      	add	r1, pc, #40	; (adr r1, 800a8f8 <scalbn+0xe0>)
 800a8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0b8      	beq.n	800a848 <scalbn+0x30>
 800a8d6:	a10e      	add	r1, pc, #56	; (adr r1, 800a910 <scalbn+0xf8>)
 800a8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8dc:	e7b4      	b.n	800a848 <scalbn+0x30>
 800a8de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8e2:	3236      	adds	r2, #54	; 0x36
 800a8e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <scalbn+0x108>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	e7e8      	b.n	800a8c6 <scalbn+0xae>
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	c2f8f359 	.word	0xc2f8f359
 800a8fc:	01a56e1f 	.word	0x01a56e1f
 800a900:	8800759c 	.word	0x8800759c
 800a904:	7e37e43c 	.word	0x7e37e43c
 800a908:	8800759c 	.word	0x8800759c
 800a90c:	fe37e43c 	.word	0xfe37e43c
 800a910:	c2f8f359 	.word	0xc2f8f359
 800a914:	81a56e1f 	.word	0x81a56e1f
 800a918:	43500000 	.word	0x43500000
 800a91c:	ffff3cb0 	.word	0xffff3cb0
 800a920:	3c900000 	.word	0x3c900000

0800a924 <_init>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	bf00      	nop
 800a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92a:	bc08      	pop	{r3}
 800a92c:	469e      	mov	lr, r3
 800a92e:	4770      	bx	lr

0800a930 <_fini>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	bf00      	nop
 800a934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a936:	bc08      	pop	{r3}
 800a938:	469e      	mov	lr, r3
 800a93a:	4770      	bx	lr
